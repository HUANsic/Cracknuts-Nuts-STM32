
NUT_F103C8TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  08005bb0  08005bb0  00006bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800645c  0800645c  00008078  2**0
                  CONTENTS
  4 .ARM          00000000  0800645c  0800645c  00008078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800645c  0800645c  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800645c  0800645c  0000745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006460  08006460  00007460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006464  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004964  20000078  080064dc  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049dc  080064dc  000089dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc44  00000000  00000000  000080a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d5  00000000  00000000  00017ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0001a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be9  00000000  00000000  0001b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187bf  00000000  00000000  0001bcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b09  00000000  00000000  00034480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d92a  00000000  00000000  00047f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d58b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f00  00000000  00000000  000d58f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d97f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b98 	.word	0x08005b98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08005b98 	.word	0x08005b98

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f003 fb38 	bl	80037c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f811 	bl	800017a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f93a 	bl	80003d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f8e4 	bl	8000328 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000160:	f000 f84c 	bl	80001fc <MX_CAN_Init>
  MX_I2C1_Init();
 8000164:	f000 f880 	bl	8000268 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000168:	f000 f8ac 	bl	80002c4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800016c:	f000 f906 	bl	800037c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	Nut_Init();
 8000170:	f000 fdc6 	bl	8000d00 <Nut_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		Nut_loop();
 8000174:	f000 fa46 	bl	8000604 <Nut_loop>
 8000178:	e7fc      	b.n	8000174 <main+0x28>

0800017a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b090      	sub	sp, #64	@ 0x40
 800017e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000180:	f107 0318 	add.w	r3, r7, #24
 8000184:	2228      	movs	r2, #40	@ 0x28
 8000186:	2100      	movs	r1, #0
 8000188:	4618      	mov	r0, r3
 800018a:	f005 fcd9 	bl	8005b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019c:	2302      	movs	r3, #2
 800019e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a0:	2301      	movs	r3, #1
 80001a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a4:	2310      	movs	r3, #16
 80001a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a8:	2302      	movs	r3, #2
 80001aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ac:	2300      	movs	r3, #0
 80001ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b0:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	4618      	mov	r0, r3
 80001bc:	f004 f860 	bl	8004280 <HAL_RCC_OscConfig>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001c6:	f000 f969 	bl	800049c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ca:	230f      	movs	r3, #15
 80001cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ce:	2302      	movs	r3, #2
 80001d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80001d2:	23a0      	movs	r3, #160	@ 0xa0
 80001d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2102      	movs	r1, #2
 80001e4:	4618      	mov	r0, r3
 80001e6:	f004 facd 	bl	8004784 <HAL_RCC_ClockConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f0:	f000 f954 	bl	800049c <Error_Handler>
  }
}
 80001f4:	bf00      	nop
 80001f6:	3740      	adds	r7, #64	@ 0x40
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000200:	4b17      	ldr	r3, [pc, #92]	@ (8000260 <MX_CAN_Init+0x64>)
 8000202:	4a18      	ldr	r2, [pc, #96]	@ (8000264 <MX_CAN_Init+0x68>)
 8000204:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 75;
 8000206:	4b16      	ldr	r3, [pc, #88]	@ (8000260 <MX_CAN_Init+0x64>)
 8000208:	224b      	movs	r2, #75	@ 0x4b
 800020a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800020c:	4b14      	ldr	r3, [pc, #80]	@ (8000260 <MX_CAN_Init+0x64>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000212:	4b13      	ldr	r3, [pc, #76]	@ (8000260 <MX_CAN_Init+0x64>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000218:	4b11      	ldr	r3, [pc, #68]	@ (8000260 <MX_CAN_Init+0x64>)
 800021a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800021e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000220:	4b0f      	ldr	r3, [pc, #60]	@ (8000260 <MX_CAN_Init+0x64>)
 8000222:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000226:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000228:	4b0d      	ldr	r3, [pc, #52]	@ (8000260 <MX_CAN_Init+0x64>)
 800022a:	2200      	movs	r2, #0
 800022c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800022e:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <MX_CAN_Init+0x64>)
 8000230:	2200      	movs	r2, #0
 8000232:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000234:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <MX_CAN_Init+0x64>)
 8000236:	2200      	movs	r2, #0
 8000238:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800023a:	4b09      	ldr	r3, [pc, #36]	@ (8000260 <MX_CAN_Init+0x64>)
 800023c:	2200      	movs	r2, #0
 800023e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000240:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <MX_CAN_Init+0x64>)
 8000242:	2200      	movs	r2, #0
 8000244:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000246:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <MX_CAN_Init+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <MX_CAN_Init+0x64>)
 800024e:	f003 fb3f 	bl	80038d0 <HAL_CAN_Init>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000258:	f000 f920 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000094 	.word	0x20000094
 8000264:	40006400 	.word	0x40006400

08000268 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800026c:	4b12      	ldr	r3, [pc, #72]	@ (80002b8 <MX_I2C1_Init+0x50>)
 800026e:	4a13      	ldr	r2, [pc, #76]	@ (80002bc <MX_I2C1_Init+0x54>)
 8000270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000272:	4b11      	ldr	r3, [pc, #68]	@ (80002b8 <MX_I2C1_Init+0x50>)
 8000274:	4a12      	ldr	r2, [pc, #72]	@ (80002c0 <MX_I2C1_Init+0x58>)
 8000276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000278:	4b0f      	ldr	r3, [pc, #60]	@ (80002b8 <MX_I2C1_Init+0x50>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 12;
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <MX_I2C1_Init+0x50>)
 8000280:	220c      	movs	r2, #12
 8000282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000284:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <MX_I2C1_Init+0x50>)
 8000286:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800028a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800028c:	4b0a      	ldr	r3, [pc, #40]	@ (80002b8 <MX_I2C1_Init+0x50>)
 800028e:	2200      	movs	r2, #0
 8000290:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000292:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <MX_I2C1_Init+0x50>)
 8000294:	2200      	movs	r2, #0
 8000296:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000298:	4b07      	ldr	r3, [pc, #28]	@ (80002b8 <MX_I2C1_Init+0x50>)
 800029a:	2200      	movs	r2, #0
 800029c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800029e:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <MX_I2C1_Init+0x50>)
 80002a0:	2280      	movs	r2, #128	@ 0x80
 80002a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <MX_I2C1_Init+0x50>)
 80002a6:	f003 fea7 	bl	8003ff8 <HAL_I2C_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002b0:	f000 f8f4 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	200000bc 	.word	0x200000bc
 80002bc:	40005400 	.word	0x40005400
 80002c0:	000186a0 	.word	0x000186a0

080002c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002c8:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <MX_SPI1_Init+0x5c>)
 80002ca:	4a16      	ldr	r2, [pc, #88]	@ (8000324 <MX_SPI1_Init+0x60>)
 80002cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80002ce:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <MX_SPI1_Init+0x5c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002d4:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <MX_SPI1_Init+0x5c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002da:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <MX_SPI1_Init+0x5c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <MX_SPI1_Init+0x5c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <MX_SPI1_Init+0x5c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <MX_SPI1_Init+0x5c>)
 80002ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <MX_SPI1_Init+0x5c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002fa:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <MX_SPI1_Init+0x5c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000300:	4b07      	ldr	r3, [pc, #28]	@ (8000320 <MX_SPI1_Init+0x5c>)
 8000302:	2200      	movs	r2, #0
 8000304:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000306:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <MX_SPI1_Init+0x5c>)
 8000308:	220a      	movs	r2, #10
 800030a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800030c:	4804      	ldr	r0, [pc, #16]	@ (8000320 <MX_SPI1_Init+0x5c>)
 800030e:	f004 fbc7 	bl	8004aa0 <HAL_SPI_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000318:	f000 f8c0 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000110 	.word	0x20000110
 8000324:	40013000 	.word	0x40013000

08000328 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800032c:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_USART1_UART_Init+0x4c>)
 800032e:	4a12      	ldr	r2, [pc, #72]	@ (8000378 <MX_USART1_UART_Init+0x50>)
 8000330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000332:	4b10      	ldr	r3, [pc, #64]	@ (8000374 <MX_USART1_UART_Init+0x4c>)
 8000334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <MX_USART1_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000346:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800034c:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <MX_USART1_UART_Init+0x4c>)
 800034e:	220c      	movs	r2, #12
 8000350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000352:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <MX_USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <MX_USART1_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800035e:	4805      	ldr	r0, [pc, #20]	@ (8000374 <MX_USART1_UART_Init+0x4c>)
 8000360:	f005 f933 	bl	80055ca <HAL_UART_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800036a:	f000 f897 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000168 	.word	0x20000168
 8000378:	40013800 	.word	0x40013800

0800037c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000380:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000382:	4a12      	ldr	r2, [pc, #72]	@ (80003cc <MX_USART2_UART_Init+0x50>)
 8000384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000386:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000388:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800038c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000394:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <MX_USART2_UART_Init+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a0:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b2:	4805      	ldr	r0, [pc, #20]	@ (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003b4:	f005 f909 	bl	80055ca <HAL_UART_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003be:	f000 f86d 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	200001b0 	.word	0x200001b0
 80003cc:	40004400 	.word	0x40004400

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000490 <MX_GPIO_Init+0xc0>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a29      	ldr	r2, [pc, #164]	@ (8000490 <MX_GPIO_Init+0xc0>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b27      	ldr	r3, [pc, #156]	@ (8000490 <MX_GPIO_Init+0xc0>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	4b24      	ldr	r3, [pc, #144]	@ (8000490 <MX_GPIO_Init+0xc0>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a23      	ldr	r2, [pc, #140]	@ (8000490 <MX_GPIO_Init+0xc0>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b21      	ldr	r3, [pc, #132]	@ (8000490 <MX_GPIO_Init+0xc0>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0304 	and.w	r3, r3, #4
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b1e      	ldr	r3, [pc, #120]	@ (8000490 <MX_GPIO_Init+0xc0>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a1d      	ldr	r2, [pc, #116]	@ (8000490 <MX_GPIO_Init+0xc0>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b1b      	ldr	r3, [pc, #108]	@ (8000490 <MX_GPIO_Init+0xc0>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GP_01_Pin|GP_02_Pin|GP_03_Pin|LED1_Pin, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	f240 2107 	movw	r1, #519	@ 0x207
 8000432:	4818      	ldr	r0, [pc, #96]	@ (8000494 <MX_GPIO_Init+0xc4>)
 8000434:	f003 fdc7 	bl	8003fc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CSN_Pin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin;
 8000438:	2310      	movs	r3, #16
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000440:	2301      	movs	r3, #1
 8000442:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CSN_GPIO_Port, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4813      	ldr	r0, [pc, #76]	@ (8000498 <MX_GPIO_Init+0xc8>)
 800044c:	f003 fc20 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : GP_01_Pin GP_02_Pin GP_03_Pin LED1_Pin */
  GPIO_InitStruct.Pin = GP_01_Pin|GP_02_Pin|GP_03_Pin|LED1_Pin;
 8000450:	f240 2307 	movw	r3, #519	@ 0x207
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2302      	movs	r3, #2
 8000460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	4619      	mov	r1, r3
 8000468:	480a      	ldr	r0, [pc, #40]	@ (8000494 <MX_GPIO_Init+0xc4>)
 800046a:	f003 fc11 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_KEY_Pin */
  GPIO_InitStruct.Pin = USR_KEY_Pin;
 800046e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USR_KEY_GPIO_Port, &GPIO_InitStruct);
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	4619      	mov	r1, r3
 8000482:	4804      	ldr	r0, [pc, #16]	@ (8000494 <MX_GPIO_Init+0xc4>)
 8000484:	f003 fc04 	bl	8003c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000488:	bf00      	nop
 800048a:	3720      	adds	r7, #32
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	40010c00 	.word	0x40010c00
 8000498:	40010800 	.word	0x40010800

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <Error_Handler+0x8>

080004a8 <_NutComm_DecodeHeader>:
void _NutComm_SPI_Enable(void);
void _NutComm_I2C_Enable(void);
void _NutComm_CAN_Enable(void);

/* Decode header */
uint32_t _NutComm_DecodeHeader() {
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
	uint32_t length;
	uint8_t i;
	uint16_t command;
	/* Decode the header */
	command = rx_header[0];
 80004ae:	4b35      	ldr	r3, [pc, #212]	@ (8000584 <_NutComm_DecodeHeader+0xdc>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	80bb      	strh	r3, [r7, #4]
	command <<= 8;
 80004b4:	88bb      	ldrh	r3, [r7, #4]
 80004b6:	021b      	lsls	r3, r3, #8
 80004b8:	80bb      	strh	r3, [r7, #4]
	command |= rx_header[1];
 80004ba:	4b32      	ldr	r3, [pc, #200]	@ (8000584 <_NutComm_DecodeHeader+0xdc>)
 80004bc:	785b      	ldrb	r3, [r3, #1]
 80004be:	461a      	mov	r2, r3
 80004c0:	88bb      	ldrh	r3, [r7, #4]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	80bb      	strh	r3, [r7, #4]
	length = rx_header[4];
 80004c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000584 <_NutComm_DecodeHeader+0xdc>)
 80004c8:	791b      	ldrb	r3, [r3, #4]
 80004ca:	603b      	str	r3, [r7, #0]
	length <<= 8;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	021b      	lsls	r3, r3, #8
 80004d0:	603b      	str	r3, [r7, #0]
	length |= rx_header[5];
 80004d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000584 <_NutComm_DecodeHeader+0xdc>)
 80004d4:	795b      	ldrb	r3, [r3, #5]
 80004d6:	461a      	mov	r2, r3
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	4313      	orrs	r3, r2
 80004dc:	603b      	str	r3, [r7, #0]
	length <<= 8;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	021b      	lsls	r3, r3, #8
 80004e2:	603b      	str	r3, [r7, #0]
	length |= rx_header[6];
 80004e4:	4b27      	ldr	r3, [pc, #156]	@ (8000584 <_NutComm_DecodeHeader+0xdc>)
 80004e6:	799b      	ldrb	r3, [r3, #6]
 80004e8:	461a      	mov	r2, r3
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	603b      	str	r3, [r7, #0]
	length <<= 8;
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	021b      	lsls	r3, r3, #8
 80004f4:	603b      	str	r3, [r7, #0]
	length |= rx_header[7];
 80004f6:	4b23      	ldr	r3, [pc, #140]	@ (8000584 <_NutComm_DecodeHeader+0xdc>)
 80004f8:	79db      	ldrb	r3, [r3, #7]
 80004fa:	461a      	mov	r2, r3
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	4313      	orrs	r3, r2
 8000500:	603b      	str	r3, [r7, #0]
	/* Parse command */
	cmd_program = 0;
 8000502:	4b21      	ldr	r3, [pc, #132]	@ (8000588 <_NutComm_DecodeHeader+0xe0>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 255; i++) {		// just scan all TODO need to fix this
 8000508:	2300      	movs	r3, #0
 800050a:	71fb      	strb	r3, [r7, #7]
 800050c:	e019      	b.n	8000542 <_NutComm_DecodeHeader+0x9a>
		if (cmd_program)
 800050e:	4b1e      	ldr	r3, [pc, #120]	@ (8000588 <_NutComm_DecodeHeader+0xe0>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d119      	bne.n	800054a <_NutComm_DecodeHeader+0xa2>
			break;
		if (cmd_list[i] == command)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	4a1c      	ldr	r2, [pc, #112]	@ (800058c <_NutComm_DecodeHeader+0xe4>)
 800051a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800051e:	88ba      	ldrh	r2, [r7, #4]
 8000520:	429a      	cmp	r2, r3
 8000522:	d105      	bne.n	8000530 <_NutComm_DecodeHeader+0x88>
			cmd_program = cmd_prog_list[i];	// set the program
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	4a1a      	ldr	r2, [pc, #104]	@ (8000590 <_NutComm_DecodeHeader+0xe8>)
 8000528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052c:	4a16      	ldr	r2, [pc, #88]	@ (8000588 <_NutComm_DecodeHeader+0xe0>)
 800052e:	6013      	str	r3, [r2, #0]
		if (cmd_list[i] == 0)
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4a16      	ldr	r2, [pc, #88]	@ (800058c <_NutComm_DecodeHeader+0xe4>)
 8000534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d008      	beq.n	800054e <_NutComm_DecodeHeader+0xa6>
	for (i = 0; i < 255; i++) {		// just scan all TODO need to fix this
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	3301      	adds	r3, #1
 8000540:	71fb      	strb	r3, [r7, #7]
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2bff      	cmp	r3, #255	@ 0xff
 8000546:	d1e2      	bne.n	800050e <_NutComm_DecodeHeader+0x66>
 8000548:	e002      	b.n	8000550 <_NutComm_DecodeHeader+0xa8>
			break;
 800054a:	bf00      	nop
 800054c:	e000      	b.n	8000550 <_NutComm_DecodeHeader+0xa8>
			break;
 800054e:	bf00      	nop
	}
	/* If the command is not found, then continue to receive the payload if possible */
	if (!cmd_program) {
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <_NutComm_DecodeHeader+0xe0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d105      	bne.n	8000564 <_NutComm_DecodeHeader+0xbc>
		status = NUT_WARNING;
 8000558:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <_NutComm_DecodeHeader+0xec>)
 800055a:	2201      	movs	r2, #1
 800055c:	701a      	strb	r2, [r3, #0]
		error = NUT_ERROR_CMD_UNKNOWN;
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <_NutComm_DecodeHeader+0xf0>)
 8000560:	2206      	movs	r2, #6
 8000562:	701a      	strb	r2, [r3, #0]
	}
	if (length > NUT_BUFFER_SIZE) {
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800056a:	d905      	bls.n	8000578 <_NutComm_DecodeHeader+0xd0>
		status = NUT_ERROR;
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <_NutComm_DecodeHeader+0xec>)
 800056e:	2202      	movs	r2, #2
 8000570:	701a      	strb	r2, [r3, #0]
		error = NUT_ERROR_PAYLOAD_SIZE;
 8000572:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <_NutComm_DecodeHeader+0xf0>)
 8000574:	2203      	movs	r2, #3
 8000576:	701a      	strb	r2, [r3, #0]
	}
	return length;
 8000578:	683b      	ldr	r3, [r7, #0]
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	20001208 	.word	0x20001208
 8000588:	200001f8 	.word	0x200001f8
 800058c:	20000024 	.word	0x20000024
 8000590:	20000040 	.word	0x20000040
 8000594:	200001fc 	.word	0x200001fc
 8000598:	200001fd 	.word	0x200001fd

0800059c <_NutComm_UART_Quit>:
void _NutComm_Pins_Init() {

}

/* Last things to do before next communucation */
void _NutComm_UART_Quit() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	/* Empty buffer */
	// uint8_t tmp = NUT_UART.Instance->DR;
	// (void)tmp;
	/* Enable other interfaces */
	_NutComm_SPI_Enable();
 80005a0:	f000 fc6e 	bl	8000e80 <_NutComm_SPI_Enable>
	_NutComm_I2C_Enable();
 80005a4:	f000 fc82 	bl	8000eac <_NutComm_I2C_Enable>
	_NutComm_CAN_Enable();
 80005a8:	f000 fc96 	bl	8000ed8 <_NutComm_CAN_Enable>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <_NutComm_SPI_Quit>:
void _NutComm_SPI_Quit() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	/* Wait until CSn releases */
	while (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_RESET)
 80005b4:	bf00      	nop
 80005b6:	2110      	movs	r1, #16
 80005b8:	480a      	ldr	r0, [pc, #40]	@ (80005e4 <_NutComm_SPI_Quit+0x34>)
 80005ba:	f003 fced 	bl	8003f98 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0f8      	beq.n	80005b6 <_NutComm_SPI_Quit+0x6>
		;
	/* Set Internal SS */
	NUT_SPI.Instance->CR1 |= SPI_CR1_SSI;
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <_NutComm_SPI_Quit+0x38>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <_NutComm_SPI_Quit+0x38>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80005d2:	601a      	str	r2, [r3, #0]
	/* Enable other interfaces */
	_NutComm_UART_Enable();
 80005d4:	f000 fc3e 	bl	8000e54 <_NutComm_UART_Enable>
	_NutComm_I2C_Enable();
 80005d8:	f000 fc68 	bl	8000eac <_NutComm_I2C_Enable>
	_NutComm_CAN_Enable();
 80005dc:	f000 fc7c 	bl	8000ed8 <_NutComm_CAN_Enable>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40010800 	.word	0x40010800
 80005e8:	20000110 	.word	0x20000110

080005ec <_NutComm_Init>:
	NUT_CAN.Instance->MCR &= ~CAN_MCR_SLEEP;
	// no need to check for wake up
}

/* Initializes communication interfaces */
void _NutComm_Init() {
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	/* Constrain the size of each burst */
	comm_max_batch_size = (65535 > NUT_BUFFER_SIZE) ? NUT_BUFFER_SIZE : 65535;
 80005f0:	4b03      	ldr	r3, [pc, #12]	@ (8000600 <_NutComm_Init+0x14>)
 80005f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005f6:	801a      	strh	r2, [r3, #0]

}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	20002210 	.word	0x20002210

08000604 <Nut_loop>:

/* Continuously check for signs of communication */
void Nut_loop() {
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b087      	sub	sp, #28
 8000608:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef retstatus = HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	72fb      	strb	r3, [r7, #11]
	uint32_t length;
	uint32_t response_length = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
	uint32_t i;

	/* Check UART */
	if (NUT_UART.Instance->SR & UART_FLAG_RXNE) {
 8000612:	4ba6      	ldr	r3, [pc, #664]	@ (80008ac <Nut_loop+0x2a8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 0320 	and.w	r3, r3, #32
 800061c:	2b00      	cmp	r3, #0
 800061e:	f000 818b 	beq.w	8000938 <Nut_loop+0x334>
		received_any_count++;
 8000622:	4ba3      	ldr	r3, [pc, #652]	@ (80008b0 <Nut_loop+0x2ac>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4ba1      	ldr	r3, [pc, #644]	@ (80008b0 <Nut_loop+0x2ac>)
 800062c:	701a      	strb	r2, [r3, #0]
		/* Record the first byte of header */
		rx_header[0] = (uint8_t) NUT_UART.Instance->DR;
 800062e:	4b9f      	ldr	r3, [pc, #636]	@ (80008ac <Nut_loop+0x2a8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b9f      	ldr	r3, [pc, #636]	@ (80008b4 <Nut_loop+0x2b0>)
 8000638:	701a      	strb	r2, [r3, #0]
		/* Disable other interfaces */
		_NutComm_SPI_Disable();
 800063a:	f000 fbe1 	bl	8000e00 <_NutComm_SPI_Disable>
		_NutComm_I2C_Disable();
 800063e:	f000 fbed 	bl	8000e1c <_NutComm_I2C_Disable>
		_NutComm_CAN_Disable();
 8000642:	f000 fbf9 	bl	8000e38 <_NutComm_CAN_Disable>
		/* Finish receiving the header */
		for (i = 1; i < 8;) {
 8000646:	2301      	movs	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	e028      	b.n	800069e <Nut_loop+0x9a>
			retstatus = HAL_UART_Receive(&NUT_UART, rx_header + i, 1, 100);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4a99      	ldr	r2, [pc, #612]	@ (80008b4 <Nut_loop+0x2b0>)
 8000650:	1899      	adds	r1, r3, r2
 8000652:	2364      	movs	r3, #100	@ 0x64
 8000654:	2201      	movs	r2, #1
 8000656:	4895      	ldr	r0, [pc, #596]	@ (80008ac <Nut_loop+0x2a8>)
 8000658:	f005 f892 	bl	8005780 <HAL_UART_Receive>
 800065c:	4603      	mov	r3, r0
 800065e:	72fb      	strb	r3, [r7, #11]
			if (retstatus == HAL_OK) {
 8000660:	7afb      	ldrb	r3, [r7, #11]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d103      	bne.n	800066e <Nut_loop+0x6a>
				i++;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3301      	adds	r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	e017      	b.n	800069e <Nut_loop+0x9a>
			}
			/* in case of timeout and error, must exit because UART is special and must not get stuck */
			else if (retstatus == HAL_TIMEOUT) {
 800066e:	7afb      	ldrb	r3, [r7, #11]
 8000670:	2b03      	cmp	r3, #3
 8000672:	d108      	bne.n	8000686 <Nut_loop+0x82>
				status = NUT_WARNING;
 8000674:	4b90      	ldr	r3, [pc, #576]	@ (80008b8 <Nut_loop+0x2b4>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
				error = NUT_ERROR_TIMEOUT;
 800067a:	4b90      	ldr	r3, [pc, #576]	@ (80008bc <Nut_loop+0x2b8>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
				_NutComm_UART_Quit();
 8000680:	f7ff ff8c 	bl	800059c <_NutComm_UART_Quit>
				return;
 8000684:	e32b      	b.n	8000cde <Nut_loop+0x6da>
			} else if (retstatus != HAL_OK) {
 8000686:	7afb      	ldrb	r3, [r7, #11]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d008      	beq.n	800069e <Nut_loop+0x9a>
				status = NUT_ERROR;
 800068c:	4b8a      	ldr	r3, [pc, #552]	@ (80008b8 <Nut_loop+0x2b4>)
 800068e:	2202      	movs	r2, #2
 8000690:	701a      	strb	r2, [r3, #0]
				error = NUT_ERROR_UNKNOWN;
 8000692:	4b8a      	ldr	r3, [pc, #552]	@ (80008bc <Nut_loop+0x2b8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
				_NutComm_UART_Quit();
 8000698:	f7ff ff80 	bl	800059c <_NutComm_UART_Quit>
				return;
 800069c:	e31f      	b.n	8000cde <Nut_loop+0x6da>
		for (i = 1; i < 8;) {
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2b07      	cmp	r3, #7
 80006a2:	d9d3      	bls.n	800064c <Nut_loop+0x48>
			}
		}

		/* Decode header */
		status = NUT_OK;
 80006a4:	4b84      	ldr	r3, [pc, #528]	@ (80008b8 <Nut_loop+0x2b4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
		length = _NutComm_DecodeHeader();
 80006aa:	f7ff fefd 	bl	80004a8 <_NutComm_DecodeHeader>
 80006ae:	6078      	str	r0, [r7, #4]
		/* If ERROR occurred, prepare to send error package */
		if (status == NUT_ERROR) {
 80006b0:	4b81      	ldr	r3, [pc, #516]	@ (80008b8 <Nut_loop+0x2b4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d149      	bne.n	800074c <Nut_loop+0x148>
			/* Wait until the other side to finish transmission */
			for (i = 0; i < length;) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	e027      	b.n	800070e <Nut_loop+0x10a>
				retstatus = HAL_UART_Receive(&NUT_UART, rx_buffer, 1, 100);
 80006be:	4b80      	ldr	r3, [pc, #512]	@ (80008c0 <Nut_loop+0x2bc>)
 80006c0:	6819      	ldr	r1, [r3, #0]
 80006c2:	2364      	movs	r3, #100	@ 0x64
 80006c4:	2201      	movs	r2, #1
 80006c6:	4879      	ldr	r0, [pc, #484]	@ (80008ac <Nut_loop+0x2a8>)
 80006c8:	f005 f85a 	bl	8005780 <HAL_UART_Receive>
 80006cc:	4603      	mov	r3, r0
 80006ce:	72fb      	strb	r3, [r7, #11]
				if (retstatus == HAL_OK) {
 80006d0:	7afb      	ldrb	r3, [r7, #11]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d103      	bne.n	80006de <Nut_loop+0xda>
					i++;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	e017      	b.n	800070e <Nut_loop+0x10a>
				}
				/* in case of timeout and error, must exit because UART is special and must not get stuck */
				else if (retstatus == HAL_TIMEOUT) {
 80006de:	7afb      	ldrb	r3, [r7, #11]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	d108      	bne.n	80006f6 <Nut_loop+0xf2>
					status = NUT_WARNING;
 80006e4:	4b74      	ldr	r3, [pc, #464]	@ (80008b8 <Nut_loop+0x2b4>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
					error = NUT_ERROR_TIMEOUT;
 80006ea:	4b74      	ldr	r3, [pc, #464]	@ (80008bc <Nut_loop+0x2b8>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
					_NutComm_UART_Quit();
 80006f0:	f7ff ff54 	bl	800059c <_NutComm_UART_Quit>
					return;
 80006f4:	e2f3      	b.n	8000cde <Nut_loop+0x6da>
				} else if (retstatus != HAL_OK) {
 80006f6:	7afb      	ldrb	r3, [r7, #11]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d008      	beq.n	800070e <Nut_loop+0x10a>
					status = NUT_ERROR;
 80006fc:	4b6e      	ldr	r3, [pc, #440]	@ (80008b8 <Nut_loop+0x2b4>)
 80006fe:	2202      	movs	r2, #2
 8000700:	701a      	strb	r2, [r3, #0]
					error = NUT_ERROR_UNKNOWN;
 8000702:	4b6e      	ldr	r3, [pc, #440]	@ (80008bc <Nut_loop+0x2b8>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
					_NutComm_UART_Quit();
 8000708:	f7ff ff48 	bl	800059c <_NutComm_UART_Quit>
					return;
 800070c:	e2e7      	b.n	8000cde <Nut_loop+0x6da>
			for (i = 0; i < length;) {
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	429a      	cmp	r2, r3
 8000714:	d3d3      	bcc.n	80006be <Nut_loop+0xba>
				}
			}
			/* Send error package */
			tx_header[0] = NUT_ERROR;
 8000716:	4b6b      	ldr	r3, [pc, #428]	@ (80008c4 <Nut_loop+0x2c0>)
 8000718:	2202      	movs	r2, #2
 800071a:	701a      	strb	r2, [r3, #0]
			tx_header[1] = NUT_ERROR_PAYLOAD_SIZE;
 800071c:	4b69      	ldr	r3, [pc, #420]	@ (80008c4 <Nut_loop+0x2c0>)
 800071e:	2203      	movs	r2, #3
 8000720:	705a      	strb	r2, [r3, #1]
			tx_header[2] = 0;
 8000722:	4b68      	ldr	r3, [pc, #416]	@ (80008c4 <Nut_loop+0x2c0>)
 8000724:	2200      	movs	r2, #0
 8000726:	709a      	strb	r2, [r3, #2]
			tx_header[3] = 0;
 8000728:	4b66      	ldr	r3, [pc, #408]	@ (80008c4 <Nut_loop+0x2c0>)
 800072a:	2200      	movs	r2, #0
 800072c:	70da      	strb	r2, [r3, #3]
			tx_header[4] = 0;
 800072e:	4b65      	ldr	r3, [pc, #404]	@ (80008c4 <Nut_loop+0x2c0>)
 8000730:	2200      	movs	r2, #0
 8000732:	711a      	strb	r2, [r3, #4]
			tx_header[5] = 0;
 8000734:	4b63      	ldr	r3, [pc, #396]	@ (80008c4 <Nut_loop+0x2c0>)
 8000736:	2200      	movs	r2, #0
 8000738:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit(&NUT_UART, tx_header, 6, 100);	// no need to check whether it is successful
 800073a:	2364      	movs	r3, #100	@ 0x64
 800073c:	2206      	movs	r2, #6
 800073e:	4961      	ldr	r1, [pc, #388]	@ (80008c4 <Nut_loop+0x2c0>)
 8000740:	485a      	ldr	r0, [pc, #360]	@ (80008ac <Nut_loop+0x2a8>)
 8000742:	f004 ff92 	bl	800566a <HAL_UART_Transmit>
			_NutComm_UART_Quit();
 8000746:	f7ff ff29 	bl	800059c <_NutComm_UART_Quit>
			return;
 800074a:	e2c8      	b.n	8000cde <Nut_loop+0x6da>
		}
		/* Receive the payload */
		for (i = 0; i < length;) {
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e029      	b.n	80007a6 <Nut_loop+0x1a2>
			retstatus = HAL_UART_Receive(&NUT_UART, rx_buffer + i, 1, 100);
 8000752:	4b5b      	ldr	r3, [pc, #364]	@ (80008c0 <Nut_loop+0x2bc>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	18d1      	adds	r1, r2, r3
 800075a:	2364      	movs	r3, #100	@ 0x64
 800075c:	2201      	movs	r2, #1
 800075e:	4853      	ldr	r0, [pc, #332]	@ (80008ac <Nut_loop+0x2a8>)
 8000760:	f005 f80e 	bl	8005780 <HAL_UART_Receive>
 8000764:	4603      	mov	r3, r0
 8000766:	72fb      	strb	r3, [r7, #11]
			if (retstatus == HAL_OK) {
 8000768:	7afb      	ldrb	r3, [r7, #11]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d103      	bne.n	8000776 <Nut_loop+0x172>
				i++;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	e017      	b.n	80007a6 <Nut_loop+0x1a2>
			}
			/* in case of timeout and error, must exit because UART is special and must not get stuck */
			else if (retstatus == HAL_TIMEOUT) {
 8000776:	7afb      	ldrb	r3, [r7, #11]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d108      	bne.n	800078e <Nut_loop+0x18a>
				status = NUT_WARNING;
 800077c:	4b4e      	ldr	r3, [pc, #312]	@ (80008b8 <Nut_loop+0x2b4>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
				error = NUT_ERROR_TIMEOUT;
 8000782:	4b4e      	ldr	r3, [pc, #312]	@ (80008bc <Nut_loop+0x2b8>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
				_NutComm_UART_Quit();
 8000788:	f7ff ff08 	bl	800059c <_NutComm_UART_Quit>
				return;
 800078c:	e2a7      	b.n	8000cde <Nut_loop+0x6da>
			} else if (retstatus != HAL_OK) {
 800078e:	7afb      	ldrb	r3, [r7, #11]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d008      	beq.n	80007a6 <Nut_loop+0x1a2>
				status = NUT_ERROR;
 8000794:	4b48      	ldr	r3, [pc, #288]	@ (80008b8 <Nut_loop+0x2b4>)
 8000796:	2202      	movs	r2, #2
 8000798:	701a      	strb	r2, [r3, #0]
				error = NUT_ERROR_UNKNOWN;
 800079a:	4b48      	ldr	r3, [pc, #288]	@ (80008bc <Nut_loop+0x2b8>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
				_NutComm_UART_Quit();
 80007a0:	f7ff fefc 	bl	800059c <_NutComm_UART_Quit>
				return;
 80007a4:	e29b      	b.n	8000cde <Nut_loop+0x6da>
		for (i = 0; i < length;) {
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d3d1      	bcc.n	8000752 <Nut_loop+0x14e>
			}
		}
		/* Process the command and give feedback */
		if (cmd_program) {
 80007ae:	4b46      	ldr	r3, [pc, #280]	@ (80008c8 <Nut_loop+0x2c4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f000 80a5 	beq.w	8000902 <Nut_loop+0x2fe>
			status = cmd_program(rx_buffer, length, tx_buffer, &response_length, NUT_BUFFER_SIZE);
 80007b8:	4b43      	ldr	r3, [pc, #268]	@ (80008c8 <Nut_loop+0x2c4>)
 80007ba:	681c      	ldr	r4, [r3, #0]
 80007bc:	4b40      	ldr	r3, [pc, #256]	@ (80008c0 <Nut_loop+0x2bc>)
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	4b42      	ldr	r3, [pc, #264]	@ (80008cc <Nut_loop+0x2c8>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	463b      	mov	r3, r7
 80007c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ca:	9100      	str	r1, [sp, #0]
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	47a0      	blx	r4
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b38      	ldr	r3, [pc, #224]	@ (80008b8 <Nut_loop+0x2b4>)
 80007d6:	701a      	strb	r2, [r3, #0]
			/* Send response package according to response length */
			if (response_length > NUT_BUFFER_SIZE) {
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80007de:	d91a      	bls.n	8000816 <Nut_loop+0x212>
				tx_header[0] = NUT_ERROR;
 80007e0:	4b38      	ldr	r3, [pc, #224]	@ (80008c4 <Nut_loop+0x2c0>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	701a      	strb	r2, [r3, #0]
				tx_header[1] = NUT_ERROR_PAYLOAD_SIZE;
 80007e6:	4b37      	ldr	r3, [pc, #220]	@ (80008c4 <Nut_loop+0x2c0>)
 80007e8:	2203      	movs	r2, #3
 80007ea:	705a      	strb	r2, [r3, #1]
				tx_header[2] = 0;
 80007ec:	4b35      	ldr	r3, [pc, #212]	@ (80008c4 <Nut_loop+0x2c0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	709a      	strb	r2, [r3, #2]
				tx_header[3] = 0;
 80007f2:	4b34      	ldr	r3, [pc, #208]	@ (80008c4 <Nut_loop+0x2c0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	70da      	strb	r2, [r3, #3]
				tx_header[4] = 0;
 80007f8:	4b32      	ldr	r3, [pc, #200]	@ (80008c4 <Nut_loop+0x2c0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	711a      	strb	r2, [r3, #4]
				tx_header[5] = 0;
 80007fe:	4b31      	ldr	r3, [pc, #196]	@ (80008c4 <Nut_loop+0x2c0>)
 8000800:	2200      	movs	r2, #0
 8000802:	715a      	strb	r2, [r3, #5]
				HAL_UART_Transmit(&NUT_UART, tx_header, 6, 100);	// no need to check whether it is successful
 8000804:	2364      	movs	r3, #100	@ 0x64
 8000806:	2206      	movs	r2, #6
 8000808:	492e      	ldr	r1, [pc, #184]	@ (80008c4 <Nut_loop+0x2c0>)
 800080a:	4828      	ldr	r0, [pc, #160]	@ (80008ac <Nut_loop+0x2a8>)
 800080c:	f004 ff2d 	bl	800566a <HAL_UART_Transmit>
				_NutComm_UART_Quit();
 8000810:	f7ff fec4 	bl	800059c <_NutComm_UART_Quit>
				return;
 8000814:	e263      	b.n	8000cde <Nut_loop+0x6da>
			} else {
				/* Prepare header */
				if (status == NUT_OK) {
 8000816:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <Nut_loop+0x2b4>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d106      	bne.n	800082c <Nut_loop+0x228>
					tx_header[0] = NUT_OK;
 800081e:	4b29      	ldr	r3, [pc, #164]	@ (80008c4 <Nut_loop+0x2c0>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
					tx_header[1] = 0;
 8000824:	4b27      	ldr	r3, [pc, #156]	@ (80008c4 <Nut_loop+0x2c0>)
 8000826:	2200      	movs	r2, #0
 8000828:	705a      	strb	r2, [r3, #1]
 800082a:	e005      	b.n	8000838 <Nut_loop+0x234>
				} else {
					tx_header[0] = NUT_ERROR;
 800082c:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <Nut_loop+0x2c0>)
 800082e:	2202      	movs	r2, #2
 8000830:	701a      	strb	r2, [r3, #0]
					tx_header[1] = NUT_ERROR_USER_CODE;
 8000832:	4b24      	ldr	r3, [pc, #144]	@ (80008c4 <Nut_loop+0x2c0>)
 8000834:	2204      	movs	r2, #4
 8000836:	705a      	strb	r2, [r3, #1]
				}
				tx_header[2] = 0x0FF & (response_length >> 24);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	0e1b      	lsrs	r3, r3, #24
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b21      	ldr	r3, [pc, #132]	@ (80008c4 <Nut_loop+0x2c0>)
 8000840:	709a      	strb	r2, [r3, #2]
				tx_header[3] = 0x0FF & (response_length >> 16);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	0c1b      	lsrs	r3, r3, #16
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b1e      	ldr	r3, [pc, #120]	@ (80008c4 <Nut_loop+0x2c0>)
 800084a:	70da      	strb	r2, [r3, #3]
				tx_header[4] = 0x0FF & (response_length >> 8);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <Nut_loop+0x2c0>)
 8000854:	711a      	strb	r2, [r3, #4]
				tx_header[5] = 0x0FF & (response_length);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <Nut_loop+0x2c0>)
 800085c:	715a      	strb	r2, [r3, #5]
				/* Send the header */
				HAL_UART_Transmit(&NUT_UART, tx_header, 6, 100);
 800085e:	2364      	movs	r3, #100	@ 0x64
 8000860:	2206      	movs	r2, #6
 8000862:	4918      	ldr	r1, [pc, #96]	@ (80008c4 <Nut_loop+0x2c0>)
 8000864:	4811      	ldr	r0, [pc, #68]	@ (80008ac <Nut_loop+0x2a8>)
 8000866:	f004 ff00 	bl	800566a <HAL_UART_Transmit>
				/* Then send the payload */
				for (i = 0; i < response_length;) {
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e03b      	b.n	80008e8 <Nut_loop+0x2e4>
					retstatus = HAL_UART_Transmit(&NUT_UART, tx_buffer + i, 1, 100);
 8000870:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <Nut_loop+0x2c8>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	18d1      	adds	r1, r2, r3
 8000878:	2364      	movs	r3, #100	@ 0x64
 800087a:	2201      	movs	r2, #1
 800087c:	480b      	ldr	r0, [pc, #44]	@ (80008ac <Nut_loop+0x2a8>)
 800087e:	f004 fef4 	bl	800566a <HAL_UART_Transmit>
 8000882:	4603      	mov	r3, r0
 8000884:	72fb      	strb	r3, [r7, #11]
					if (retstatus == HAL_OK) {
 8000886:	7afb      	ldrb	r3, [r7, #11]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d103      	bne.n	8000894 <Nut_loop+0x290>
						i++;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	e029      	b.n	80008e8 <Nut_loop+0x2e4>
					}
					/* in case of timeout and error, must exit because UART is special and must not get stuck */
					else if (retstatus == HAL_TIMEOUT) {
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d11a      	bne.n	80008d0 <Nut_loop+0x2cc>
						status = NUT_WARNING;
 800089a:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <Nut_loop+0x2b4>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
						error = NUT_ERROR_TIMEOUT;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <Nut_loop+0x2b8>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
						_NutComm_UART_Quit();
 80008a6:	f7ff fe79 	bl	800059c <_NutComm_UART_Quit>
						return;
 80008aa:	e218      	b.n	8000cde <Nut_loop+0x6da>
 80008ac:	20000168 	.word	0x20000168
 80008b0:	20002213 	.word	0x20002213
 80008b4:	20001208 	.word	0x20001208
 80008b8:	200001fc 	.word	0x200001fc
 80008bc:	200001fd 	.word	0x200001fd
 80008c0:	20000004 	.word	0x20000004
 80008c4:	20000200 	.word	0x20000200
 80008c8:	200001f8 	.word	0x200001f8
 80008cc:	20000000 	.word	0x20000000
					} else if (retstatus != HAL_OK) {
 80008d0:	7afb      	ldrb	r3, [r7, #11]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d008      	beq.n	80008e8 <Nut_loop+0x2e4>
						status = NUT_ERROR;
 80008d6:	4ba9      	ldr	r3, [pc, #676]	@ (8000b7c <Nut_loop+0x578>)
 80008d8:	2202      	movs	r2, #2
 80008da:	701a      	strb	r2, [r3, #0]
						error = NUT_ERROR_UNKNOWN;
 80008dc:	4ba8      	ldr	r3, [pc, #672]	@ (8000b80 <Nut_loop+0x57c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
						_NutComm_UART_Quit();
 80008e2:	f7ff fe5b 	bl	800059c <_NutComm_UART_Quit>
						return;
 80008e6:	e1fa      	b.n	8000cde <Nut_loop+0x6da>
				for (i = 0; i < response_length;) {
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d3bf      	bcc.n	8000870 <Nut_loop+0x26c>
					}
				}
				success_cmd_count++;
 80008f0:	4ba4      	ldr	r3, [pc, #656]	@ (8000b84 <Nut_loop+0x580>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4ba2      	ldr	r3, [pc, #648]	@ (8000b84 <Nut_loop+0x580>)
 80008fa:	701a      	strb	r2, [r3, #0]
				_NutComm_UART_Quit();
 80008fc:	f7ff fe4e 	bl	800059c <_NutComm_UART_Quit>
				return;
 8000900:	e1ed      	b.n	8000cde <Nut_loop+0x6da>
			}
		}
		/* Command not found, return error */
		else {
			tx_header[0] = NUT_ERROR;
 8000902:	4ba1      	ldr	r3, [pc, #644]	@ (8000b88 <Nut_loop+0x584>)
 8000904:	2202      	movs	r2, #2
 8000906:	701a      	strb	r2, [r3, #0]
			tx_header[1] = NUT_ERROR_CMD_UNKNOWN;
 8000908:	4b9f      	ldr	r3, [pc, #636]	@ (8000b88 <Nut_loop+0x584>)
 800090a:	2206      	movs	r2, #6
 800090c:	705a      	strb	r2, [r3, #1]
			tx_header[2] = 0;
 800090e:	4b9e      	ldr	r3, [pc, #632]	@ (8000b88 <Nut_loop+0x584>)
 8000910:	2200      	movs	r2, #0
 8000912:	709a      	strb	r2, [r3, #2]
			tx_header[3] = 0;
 8000914:	4b9c      	ldr	r3, [pc, #624]	@ (8000b88 <Nut_loop+0x584>)
 8000916:	2200      	movs	r2, #0
 8000918:	70da      	strb	r2, [r3, #3]
			tx_header[4] = 0;
 800091a:	4b9b      	ldr	r3, [pc, #620]	@ (8000b88 <Nut_loop+0x584>)
 800091c:	2200      	movs	r2, #0
 800091e:	711a      	strb	r2, [r3, #4]
			tx_header[5] = 0;
 8000920:	4b99      	ldr	r3, [pc, #612]	@ (8000b88 <Nut_loop+0x584>)
 8000922:	2200      	movs	r2, #0
 8000924:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit(&NUT_UART, tx_header, 6, 100);	// no need to check whether it is successful
 8000926:	2364      	movs	r3, #100	@ 0x64
 8000928:	2206      	movs	r2, #6
 800092a:	4997      	ldr	r1, [pc, #604]	@ (8000b88 <Nut_loop+0x584>)
 800092c:	4897      	ldr	r0, [pc, #604]	@ (8000b8c <Nut_loop+0x588>)
 800092e:	f004 fe9c 	bl	800566a <HAL_UART_Transmit>
			_NutComm_UART_Quit();
 8000932:	f7ff fe33 	bl	800059c <_NutComm_UART_Quit>
			return;
 8000936:	e1d2      	b.n	8000cde <Nut_loop+0x6da>
		}
	}

	/* Check SPI */
	//	else if (0) {
	else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_RESET) {
 8000938:	2110      	movs	r1, #16
 800093a:	4895      	ldr	r0, [pc, #596]	@ (8000b90 <Nut_loop+0x58c>)
 800093c:	f003 fb2c 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	f040 81cb 	bne.w	8000cde <Nut_loop+0x6da>
		/* Clear Internal SS */
		NUT_SPI.Instance->CR1 &= ~SPI_CR1_SSI;
 8000948:	4b92      	ldr	r3, [pc, #584]	@ (8000b94 <Nut_loop+0x590>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4b91      	ldr	r3, [pc, #580]	@ (8000b94 <Nut_loop+0x590>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000956:	601a      	str	r2, [r3, #0]
		/* Disable other interfaces */
		_NutComm_UART_Disable();
 8000958:	f000 fa44 	bl	8000de4 <_NutComm_UART_Disable>
		_NutComm_I2C_Disable();
 800095c:	f000 fa5e 	bl	8000e1c <_NutComm_I2C_Disable>
		_NutComm_CAN_Disable();
 8000960:	f000 fa6a 	bl	8000e38 <_NutComm_CAN_Disable>
		/* Poll for header */
		for (i = 0; i < 8;) {
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	e020      	b.n	80009ac <Nut_loop+0x3a8>
			retstatus = HAL_SPI_Receive(&NUT_SPI, rx_header + i, 1, 100);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	4a8a      	ldr	r2, [pc, #552]	@ (8000b98 <Nut_loop+0x594>)
 800096e:	1899      	adds	r1, r3, r2
 8000970:	2364      	movs	r3, #100	@ 0x64
 8000972:	2201      	movs	r2, #1
 8000974:	4887      	ldr	r0, [pc, #540]	@ (8000b94 <Nut_loop+0x590>)
 8000976:	f004 fa5b 	bl	8004e30 <HAL_SPI_Receive>
 800097a:	4603      	mov	r3, r0
 800097c:	72fb      	strb	r3, [r7, #11]
			if (retstatus == HAL_OK) {
 800097e:	7afb      	ldrb	r3, [r7, #11]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d103      	bne.n	800098c <Nut_loop+0x388>
				i++;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3301      	adds	r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	e00f      	b.n	80009ac <Nut_loop+0x3a8>
			}
			/* if CS is released midway (in case of timeout), block if CS is held low */
			else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 800098c:	2110      	movs	r1, #16
 800098e:	4880      	ldr	r0, [pc, #512]	@ (8000b90 <Nut_loop+0x58c>)
 8000990:	f003 fb02 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	2b01      	cmp	r3, #1
 8000998:	d108      	bne.n	80009ac <Nut_loop+0x3a8>
				status = NUT_WARNING;
 800099a:	4b78      	ldr	r3, [pc, #480]	@ (8000b7c <Nut_loop+0x578>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
				error = NUT_ERROR_SPI_ABORTED;
 80009a0:	4b77      	ldr	r3, [pc, #476]	@ (8000b80 <Nut_loop+0x57c>)
 80009a2:	2205      	movs	r2, #5
 80009a4:	701a      	strb	r2, [r3, #0]
				_NutComm_SPI_Quit();
 80009a6:	f7ff fe03 	bl	80005b0 <_NutComm_SPI_Quit>
				return;
 80009aa:	e198      	b.n	8000cde <Nut_loop+0x6da>
		for (i = 0; i < 8;) {
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b07      	cmp	r3, #7
 80009b0:	d9db      	bls.n	800096a <Nut_loop+0x366>
			}
		}
		/* Decode header */
		length = _NutComm_DecodeHeader();
 80009b2:	f7ff fd79 	bl	80004a8 <_NutComm_DecodeHeader>
 80009b6:	6078      	str	r0, [r7, #4]
		/* If ERROR occurred, prepare to send error package */
		if (status == NUT_ERROR) {
 80009b8:	4b70      	ldr	r3, [pc, #448]	@ (8000b7c <Nut_loop+0x578>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d162      	bne.n	8000a86 <Nut_loop+0x482>
			/* Wait until the other side to finish transmission */
			for (i = 0; i < length;) {
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	e01f      	b.n	8000a06 <Nut_loop+0x402>
				retstatus = HAL_SPI_Receive(&NUT_SPI, rx_buffer, 1, 100);
 80009c6:	4b75      	ldr	r3, [pc, #468]	@ (8000b9c <Nut_loop+0x598>)
 80009c8:	6819      	ldr	r1, [r3, #0]
 80009ca:	2364      	movs	r3, #100	@ 0x64
 80009cc:	2201      	movs	r2, #1
 80009ce:	4871      	ldr	r0, [pc, #452]	@ (8000b94 <Nut_loop+0x590>)
 80009d0:	f004 fa2e 	bl	8004e30 <HAL_SPI_Receive>
 80009d4:	4603      	mov	r3, r0
 80009d6:	72fb      	strb	r3, [r7, #11]
				if (retstatus == HAL_OK) {
 80009d8:	7afb      	ldrb	r3, [r7, #11]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <Nut_loop+0x3e2>
					i++;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3301      	adds	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	e00f      	b.n	8000a06 <Nut_loop+0x402>
				}
				/* if CS is released midway (in case of timeout), block if CS is held low */
				else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 80009e6:	2110      	movs	r1, #16
 80009e8:	4869      	ldr	r0, [pc, #420]	@ (8000b90 <Nut_loop+0x58c>)
 80009ea:	f003 fad5 	bl	8003f98 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d108      	bne.n	8000a06 <Nut_loop+0x402>
					status = NUT_WARNING;
 80009f4:	4b61      	ldr	r3, [pc, #388]	@ (8000b7c <Nut_loop+0x578>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
					error = NUT_ERROR_SPI_ABORTED;
 80009fa:	4b61      	ldr	r3, [pc, #388]	@ (8000b80 <Nut_loop+0x57c>)
 80009fc:	2205      	movs	r2, #5
 80009fe:	701a      	strb	r2, [r3, #0]
					_NutComm_SPI_Quit();
 8000a00:	f7ff fdd6 	bl	80005b0 <_NutComm_SPI_Quit>
					return;
 8000a04:	e16b      	b.n	8000cde <Nut_loop+0x6da>
			for (i = 0; i < length;) {
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d3db      	bcc.n	80009c6 <Nut_loop+0x3c2>
				}
			}
			/* Send error package */
			tx_header[0] = NUT_ERROR;
 8000a0e:	4b5e      	ldr	r3, [pc, #376]	@ (8000b88 <Nut_loop+0x584>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	701a      	strb	r2, [r3, #0]
			tx_header[1] = NUT_ERROR_PAYLOAD_SIZE;
 8000a14:	4b5c      	ldr	r3, [pc, #368]	@ (8000b88 <Nut_loop+0x584>)
 8000a16:	2203      	movs	r2, #3
 8000a18:	705a      	strb	r2, [r3, #1]
			tx_header[2] = 0;
 8000a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8000b88 <Nut_loop+0x584>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	709a      	strb	r2, [r3, #2]
			tx_header[3] = 0;
 8000a20:	4b59      	ldr	r3, [pc, #356]	@ (8000b88 <Nut_loop+0x584>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	70da      	strb	r2, [r3, #3]
			tx_header[4] = 0;
 8000a26:	4b58      	ldr	r3, [pc, #352]	@ (8000b88 <Nut_loop+0x584>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	711a      	strb	r2, [r3, #4]
			tx_header[5] = 0;
 8000a2c:	4b56      	ldr	r3, [pc, #344]	@ (8000b88 <Nut_loop+0x584>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	715a      	strb	r2, [r3, #5]
			for (i = 0; i < 6;) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	e020      	b.n	8000a7a <Nut_loop+0x476>
				retstatus = HAL_SPI_Transmit(&NUT_SPI, tx_header + i, 1, 100);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a53      	ldr	r2, [pc, #332]	@ (8000b88 <Nut_loop+0x584>)
 8000a3c:	1899      	adds	r1, r3, r2
 8000a3e:	2364      	movs	r3, #100	@ 0x64
 8000a40:	2201      	movs	r2, #1
 8000a42:	4854      	ldr	r0, [pc, #336]	@ (8000b94 <Nut_loop+0x590>)
 8000a44:	f004 f8b0 	bl	8004ba8 <HAL_SPI_Transmit>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	72fb      	strb	r3, [r7, #11]
				if (retstatus == HAL_OK) {
 8000a4c:	7afb      	ldrb	r3, [r7, #11]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d103      	bne.n	8000a5a <Nut_loop+0x456>
					i++;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	e00f      	b.n	8000a7a <Nut_loop+0x476>
				}
				/* if CS is released midway (in case of timeout), block if CS is held low */
				else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	484c      	ldr	r0, [pc, #304]	@ (8000b90 <Nut_loop+0x58c>)
 8000a5e:	f003 fa9b 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d108      	bne.n	8000a7a <Nut_loop+0x476>
					status = NUT_WARNING;
 8000a68:	4b44      	ldr	r3, [pc, #272]	@ (8000b7c <Nut_loop+0x578>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
					error = NUT_ERROR_SPI_ABORTED;
 8000a6e:	4b44      	ldr	r3, [pc, #272]	@ (8000b80 <Nut_loop+0x57c>)
 8000a70:	2205      	movs	r2, #5
 8000a72:	701a      	strb	r2, [r3, #0]
					_NutComm_SPI_Quit();
 8000a74:	f7ff fd9c 	bl	80005b0 <_NutComm_SPI_Quit>
					return;
 8000a78:	e131      	b.n	8000cde <Nut_loop+0x6da>
			for (i = 0; i < 6;) {
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	d9db      	bls.n	8000a38 <Nut_loop+0x434>
				}
			}
			/* And just return */
			_NutComm_SPI_Quit();
 8000a80:	f7ff fd96 	bl	80005b0 <_NutComm_SPI_Quit>
			return;
 8000a84:	e12b      	b.n	8000cde <Nut_loop+0x6da>
		}
		/* Receive the payload */
		for (i = 0; i < length;) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e021      	b.n	8000ad0 <Nut_loop+0x4cc>
			retstatus = HAL_SPI_Receive(&NUT_SPI, rx_buffer + i, 1, 100);
 8000a8c:	4b43      	ldr	r3, [pc, #268]	@ (8000b9c <Nut_loop+0x598>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	18d1      	adds	r1, r2, r3
 8000a94:	2364      	movs	r3, #100	@ 0x64
 8000a96:	2201      	movs	r2, #1
 8000a98:	483e      	ldr	r0, [pc, #248]	@ (8000b94 <Nut_loop+0x590>)
 8000a9a:	f004 f9c9 	bl	8004e30 <HAL_SPI_Receive>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	72fb      	strb	r3, [r7, #11]
			if (retstatus == HAL_OK) {
 8000aa2:	7afb      	ldrb	r3, [r7, #11]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d103      	bne.n	8000ab0 <Nut_loop+0x4ac>
				i++;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	e00f      	b.n	8000ad0 <Nut_loop+0x4cc>
			}
			/* if CS is released midway (in case of timeout), block if CS is held low */
			else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	4837      	ldr	r0, [pc, #220]	@ (8000b90 <Nut_loop+0x58c>)
 8000ab4:	f003 fa70 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d108      	bne.n	8000ad0 <Nut_loop+0x4cc>
				status = NUT_WARNING;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	@ (8000b7c <Nut_loop+0x578>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
				error = NUT_ERROR_SPI_ABORTED;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b80 <Nut_loop+0x57c>)
 8000ac6:	2205      	movs	r2, #5
 8000ac8:	701a      	strb	r2, [r3, #0]
				_NutComm_SPI_Quit();
 8000aca:	f7ff fd71 	bl	80005b0 <_NutComm_SPI_Quit>
				return;
 8000ace:	e106      	b.n	8000cde <Nut_loop+0x6da>
		for (i = 0; i < length;) {
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3d9      	bcc.n	8000a8c <Nut_loop+0x488>
			}
		}
		/* Process the command and give feedback */
		if (cmd_program) {
 8000ad8:	4b31      	ldr	r3, [pc, #196]	@ (8000ba0 <Nut_loop+0x59c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f000 80d1 	beq.w	8000c84 <Nut_loop+0x680>
			status = cmd_program(rx_buffer, length, tx_buffer, &response_length, NUT_BUFFER_SIZE);
 8000ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba0 <Nut_loop+0x59c>)
 8000ae4:	681c      	ldr	r4, [r3, #0]
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <Nut_loop+0x598>)
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba4 <Nut_loop+0x5a0>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	463b      	mov	r3, r7
 8000af0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000af4:	9100      	str	r1, [sp, #0]
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	47a0      	blx	r4
 8000afa:	4603      	mov	r3, r0
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <Nut_loop+0x578>)
 8000b00:	701a      	strb	r2, [r3, #0]
			/* Send response package according to response length */
			if (response_length > NUT_BUFFER_SIZE) {
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b08:	d92c      	bls.n	8000b64 <Nut_loop+0x560>
				error_header[1] = NUT_ERROR_PAYLOAD_SIZE;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <Nut_loop+0x5a4>)
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	705a      	strb	r2, [r3, #1]
				for (i = 0; i < 6;) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	e020      	b.n	8000b58 <Nut_loop+0x554>
					retstatus = HAL_SPI_Transmit(&NUT_SPI, error_header + i, 1, 100);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4a23      	ldr	r2, [pc, #140]	@ (8000ba8 <Nut_loop+0x5a4>)
 8000b1a:	1899      	adds	r1, r3, r2
 8000b1c:	2364      	movs	r3, #100	@ 0x64
 8000b1e:	2201      	movs	r2, #1
 8000b20:	481c      	ldr	r0, [pc, #112]	@ (8000b94 <Nut_loop+0x590>)
 8000b22:	f004 f841 	bl	8004ba8 <HAL_SPI_Transmit>
 8000b26:	4603      	mov	r3, r0
 8000b28:	72fb      	strb	r3, [r7, #11]
					if (retstatus == HAL_OK) {
 8000b2a:	7afb      	ldrb	r3, [r7, #11]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <Nut_loop+0x534>
						i++;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	e00f      	b.n	8000b58 <Nut_loop+0x554>
					}
					/* if CS is released midway (in case of timeout), block if CS is held low */
					else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8000b38:	2110      	movs	r1, #16
 8000b3a:	4815      	ldr	r0, [pc, #84]	@ (8000b90 <Nut_loop+0x58c>)
 8000b3c:	f003 fa2c 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d108      	bne.n	8000b58 <Nut_loop+0x554>
						status = NUT_WARNING;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <Nut_loop+0x578>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
						error = NUT_ERROR_SPI_ABORTED;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <Nut_loop+0x57c>)
 8000b4e:	2205      	movs	r2, #5
 8000b50:	701a      	strb	r2, [r3, #0]
						_NutComm_SPI_Quit();
 8000b52:	f7ff fd2d 	bl	80005b0 <_NutComm_SPI_Quit>
						return;
 8000b56:	e0c2      	b.n	8000cde <Nut_loop+0x6da>
				for (i = 0; i < 6;) {
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b05      	cmp	r3, #5
 8000b5c:	d9db      	bls.n	8000b16 <Nut_loop+0x512>
					}
				}
				_NutComm_SPI_Quit();
 8000b5e:	f7ff fd27 	bl	80005b0 <_NutComm_SPI_Quit>
				return;
 8000b62:	e0bc      	b.n	8000cde <Nut_loop+0x6da>
			} else {
				/* Prepare header */
				if (status == NUT_OK) {
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <Nut_loop+0x578>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d11f      	bne.n	8000bac <Nut_loop+0x5a8>
					tx_header[0] = NUT_OK;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <Nut_loop+0x584>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
					tx_header[1] = 0;
 8000b72:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <Nut_loop+0x584>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	705a      	strb	r2, [r3, #1]
 8000b78:	e01e      	b.n	8000bb8 <Nut_loop+0x5b4>
 8000b7a:	bf00      	nop
 8000b7c:	200001fc 	.word	0x200001fc
 8000b80:	200001fd 	.word	0x200001fd
 8000b84:	20002212 	.word	0x20002212
 8000b88:	20000200 	.word	0x20000200
 8000b8c:	20000168 	.word	0x20000168
 8000b90:	40010800 	.word	0x40010800
 8000b94:	20000110 	.word	0x20000110
 8000b98:	20001208 	.word	0x20001208
 8000b9c:	20000004 	.word	0x20000004
 8000ba0:	200001f8 	.word	0x200001f8
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000008 	.word	0x20000008
				} else {
					tx_header[0] = NUT_ERROR;
 8000bac:	4b4d      	ldr	r3, [pc, #308]	@ (8000ce4 <Nut_loop+0x6e0>)
 8000bae:	2202      	movs	r2, #2
 8000bb0:	701a      	strb	r2, [r3, #0]
					tx_header[1] = NUT_ERROR_USER_CODE;
 8000bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8000ce4 <Nut_loop+0x6e0>)
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	705a      	strb	r2, [r3, #1]
				}
				tx_header[2] = 0x0FF & (response_length >> 24);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	0e1b      	lsrs	r3, r3, #24
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b49      	ldr	r3, [pc, #292]	@ (8000ce4 <Nut_loop+0x6e0>)
 8000bc0:	709a      	strb	r2, [r3, #2]
				tx_header[3] = 0x0FF & (response_length >> 16);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	0c1b      	lsrs	r3, r3, #16
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b46      	ldr	r3, [pc, #280]	@ (8000ce4 <Nut_loop+0x6e0>)
 8000bca:	70da      	strb	r2, [r3, #3]
				tx_header[4] = 0x0FF & (response_length >> 8);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	0a1b      	lsrs	r3, r3, #8
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b44      	ldr	r3, [pc, #272]	@ (8000ce4 <Nut_loop+0x6e0>)
 8000bd4:	711a      	strb	r2, [r3, #4]
				tx_header[5] = 0x0FF & (response_length);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b42      	ldr	r3, [pc, #264]	@ (8000ce4 <Nut_loop+0x6e0>)
 8000bdc:	715a      	strb	r2, [r3, #5]
				/* Send the header */
				for (i = 0; i < 6;) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	e020      	b.n	8000c26 <Nut_loop+0x622>
					retstatus = HAL_SPI_Transmit(&NUT_SPI, tx_header + i, 1, 100);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ce4 <Nut_loop+0x6e0>)
 8000be8:	1899      	adds	r1, r3, r2
 8000bea:	2364      	movs	r3, #100	@ 0x64
 8000bec:	2201      	movs	r2, #1
 8000bee:	483e      	ldr	r0, [pc, #248]	@ (8000ce8 <Nut_loop+0x6e4>)
 8000bf0:	f003 ffda 	bl	8004ba8 <HAL_SPI_Transmit>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	72fb      	strb	r3, [r7, #11]
					if (retstatus == HAL_OK) {
 8000bf8:	7afb      	ldrb	r3, [r7, #11]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d103      	bne.n	8000c06 <Nut_loop+0x602>
						i++;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	e00f      	b.n	8000c26 <Nut_loop+0x622>
					}
					/* if CS is released midway (in case of timeout), block if CS is held low */
					else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8000c06:	2110      	movs	r1, #16
 8000c08:	4838      	ldr	r0, [pc, #224]	@ (8000cec <Nut_loop+0x6e8>)
 8000c0a:	f003 f9c5 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d108      	bne.n	8000c26 <Nut_loop+0x622>
						status = NUT_WARNING;
 8000c14:	4b36      	ldr	r3, [pc, #216]	@ (8000cf0 <Nut_loop+0x6ec>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
						error = NUT_ERROR_SPI_ABORTED;
 8000c1a:	4b36      	ldr	r3, [pc, #216]	@ (8000cf4 <Nut_loop+0x6f0>)
 8000c1c:	2205      	movs	r2, #5
 8000c1e:	701a      	strb	r2, [r3, #0]
						_NutComm_SPI_Quit();
 8000c20:	f7ff fcc6 	bl	80005b0 <_NutComm_SPI_Quit>
						return;
 8000c24:	e05b      	b.n	8000cde <Nut_loop+0x6da>
				for (i = 0; i < 6;) {
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b05      	cmp	r3, #5
 8000c2a:	d9db      	bls.n	8000be4 <Nut_loop+0x5e0>
					}
				}
				/* Then send the payload */
				for (i = 0; i < response_length;) {
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	e021      	b.n	8000c76 <Nut_loop+0x672>
					retstatus = HAL_SPI_Transmit(&NUT_SPI, tx_buffer + i, 1, 100);
 8000c32:	4b31      	ldr	r3, [pc, #196]	@ (8000cf8 <Nut_loop+0x6f4>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	18d1      	adds	r1, r2, r3
 8000c3a:	2364      	movs	r3, #100	@ 0x64
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	482a      	ldr	r0, [pc, #168]	@ (8000ce8 <Nut_loop+0x6e4>)
 8000c40:	f003 ffb2 	bl	8004ba8 <HAL_SPI_Transmit>
 8000c44:	4603      	mov	r3, r0
 8000c46:	72fb      	strb	r3, [r7, #11]
					if (retstatus == HAL_OK) {
 8000c48:	7afb      	ldrb	r3, [r7, #11]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d103      	bne.n	8000c56 <Nut_loop+0x652>
						i++;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3301      	adds	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	e00f      	b.n	8000c76 <Nut_loop+0x672>
					}
					/* if CS is released midway (in case of timeout), block if CS is held low */
					else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8000c56:	2110      	movs	r1, #16
 8000c58:	4824      	ldr	r0, [pc, #144]	@ (8000cec <Nut_loop+0x6e8>)
 8000c5a:	f003 f99d 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d108      	bne.n	8000c76 <Nut_loop+0x672>
						status = NUT_WARNING;
 8000c64:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <Nut_loop+0x6ec>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
						error = NUT_ERROR_SPI_ABORTED;
 8000c6a:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <Nut_loop+0x6f0>)
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	701a      	strb	r2, [r3, #0]
						_NutComm_SPI_Quit();
 8000c70:	f7ff fc9e 	bl	80005b0 <_NutComm_SPI_Quit>
						return;
 8000c74:	e033      	b.n	8000cde <Nut_loop+0x6da>
				for (i = 0; i < response_length;) {
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d3d9      	bcc.n	8000c32 <Nut_loop+0x62e>
					}
				}
				_NutComm_SPI_Quit();
 8000c7e:	f7ff fc97 	bl	80005b0 <_NutComm_SPI_Quit>
				return;
 8000c82:	e02c      	b.n	8000cde <Nut_loop+0x6da>
			}
		}
		/* Command not found, return error */
		else {
			error_header[1] = NUT_ERROR_CMD_UNKNOWN;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <Nut_loop+0x6f8>)
 8000c86:	2206      	movs	r2, #6
 8000c88:	705a      	strb	r2, [r3, #1]
			for (i = 0; i < 6;) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	e020      	b.n	8000cd2 <Nut_loop+0x6ce>
				retstatus = HAL_SPI_Transmit(&NUT_SPI, error_header + i, 1, 100);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4a1a      	ldr	r2, [pc, #104]	@ (8000cfc <Nut_loop+0x6f8>)
 8000c94:	1899      	adds	r1, r3, r2
 8000c96:	2364      	movs	r3, #100	@ 0x64
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4813      	ldr	r0, [pc, #76]	@ (8000ce8 <Nut_loop+0x6e4>)
 8000c9c:	f003 ff84 	bl	8004ba8 <HAL_SPI_Transmit>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	72fb      	strb	r3, [r7, #11]
				if (retstatus == HAL_OK) {
 8000ca4:	7afb      	ldrb	r3, [r7, #11]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d103      	bne.n	8000cb2 <Nut_loop+0x6ae>
					i++;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3301      	adds	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	e00f      	b.n	8000cd2 <Nut_loop+0x6ce>
				}
				/* if CS is released midway (in case of timeout), block if CS is held low */
				else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	480d      	ldr	r0, [pc, #52]	@ (8000cec <Nut_loop+0x6e8>)
 8000cb6:	f003 f96f 	bl	8003f98 <HAL_GPIO_ReadPin>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d108      	bne.n	8000cd2 <Nut_loop+0x6ce>
					status = NUT_WARNING;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <Nut_loop+0x6ec>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
					error = NUT_ERROR_SPI_ABORTED;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <Nut_loop+0x6f0>)
 8000cc8:	2205      	movs	r2, #5
 8000cca:	701a      	strb	r2, [r3, #0]
					_NutComm_SPI_Quit();
 8000ccc:	f7ff fc70 	bl	80005b0 <_NutComm_SPI_Quit>
					return;
 8000cd0:	e005      	b.n	8000cde <Nut_loop+0x6da>
			for (i = 0; i < 6;) {
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	d9db      	bls.n	8000c90 <Nut_loop+0x68c>
				}
			}
			_NutComm_SPI_Quit();
 8000cd8:	f7ff fc6a 	bl	80005b0 <_NutComm_SPI_Quit>
			return;
 8000cdc:	bf00      	nop

	/* Check I2C */
	else if (1) {
		// TODO
	}
}
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd90      	pop	{r4, r7, pc}
 8000ce4:	20000200 	.word	0x20000200
 8000ce8:	20000110 	.word	0x20000110
 8000cec:	40010800 	.word	0x40010800
 8000cf0:	200001fc 	.word	0x200001fc
 8000cf4:	200001fd 	.word	0x200001fd
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000008 	.word	0x20000008

08000d00 <Nut_Init>:

void Nut_Init() {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	_NutComm_Init();
 8000d04:	f7ff fc72 	bl	80005ec <_NutComm_Init>
	Nut_LED(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 f827 	bl	8000d5c <Nut_LED>
	HAL_Delay(200);
 8000d0e:	20c8      	movs	r0, #200	@ 0xc8
 8000d10:	f002 fdba 	bl	8003888 <HAL_Delay>
	User_Init();
 8000d14:	f002 fb32 	bl	800337c <User_Init>
	Nut_LED(0);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 f81f 	bl	8000d5c <Nut_LED>
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <Nut_Quiet>:

void Nut_Quiet() {
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;	// disable SysTick
 8000d28:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <Nut_Quiet+0x18>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a03      	ldr	r2, [pc, #12]	@ (8000d3c <Nut_Quiet+0x18>)
 8000d2e:	f023 0302 	bic.w	r3, r3, #2
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <Nut_unQuiet>:

void Nut_unQuiet() {
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;	// enable SysTick
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <Nut_unQuiet+0x18>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a03      	ldr	r2, [pc, #12]	@ (8000d58 <Nut_unQuiet+0x18>)
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <Nut_LED>:

/* Pin Manipulation */

void Nut_LED(uint8_t on) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NUT_LED_PORT, NUT_LED_PIN, on ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bf0c      	ite	eq
 8000d6c:	2301      	moveq	r3, #1
 8000d6e:	2300      	movne	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <Nut_LED+0x2c>)
 8000d7a:	f003 f924 	bl	8003fc6 <HAL_GPIO_WritePin>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40010c00 	.word	0x40010c00

08000d8c <Nut_IO_1>:

void Nut_IO_1(uint8_t set) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NUT_IO1_PORT, NUT_IO1_PIN, set ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	bf14      	ite	ne
 8000d9c:	2301      	movne	r3, #1
 8000d9e:	2300      	moveq	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	2101      	movs	r1, #1
 8000da6:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <Nut_IO_1+0x28>)
 8000da8:	f003 f90d 	bl	8003fc6 <HAL_GPIO_WritePin>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <Nut_IO_USER>:

void Nut_IO_3(uint8_t set) {
	HAL_GPIO_WritePin(NUT_IO3_PORT, NUT_IO3_PIN, set ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

void Nut_IO_USER(uint8_t set) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NUT_IO_USER_PORT, NUT_IO_USER_PIN, set ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf14      	ite	ne
 8000dc8:	2301      	movne	r3, #1
 8000dca:	2300      	moveq	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4803      	ldr	r0, [pc, #12]	@ (8000de0 <Nut_IO_USER+0x28>)
 8000dd4:	f003 f8f7 	bl	8003fc6 <HAL_GPIO_WritePin>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40010c00 	.word	0x40010c00

08000de4 <_NutComm_UART_Disable>:

/* Stop CLK of peripheral */
inline void _NutComm_UART_Disable() {
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
	__HAL_RCC_USART1_CLK_DISABLE();
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <_NutComm_UART_Disable+0x18>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a03      	ldr	r2, [pc, #12]	@ (8000dfc <_NutComm_UART_Disable+0x18>)
 8000dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000df2:	6193      	str	r3, [r2, #24]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000

08000e00 <_NutComm_SPI_Disable>:
inline void _NutComm_SPI_Disable() {
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	__HAL_RCC_SPI1_CLK_DISABLE();
 8000e04:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <_NutComm_SPI_Disable+0x18>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a03      	ldr	r2, [pc, #12]	@ (8000e18 <_NutComm_SPI_Disable+0x18>)
 8000e0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e0e:	6193      	str	r3, [r2, #24]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	40021000 	.word	0x40021000

08000e1c <_NutComm_I2C_Disable>:
inline void _NutComm_I2C_Disable() {
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	__HAL_RCC_I2C1_CLK_DISABLE();
 8000e20:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <_NutComm_I2C_Disable+0x18>)
 8000e22:	69db      	ldr	r3, [r3, #28]
 8000e24:	4a03      	ldr	r2, [pc, #12]	@ (8000e34 <_NutComm_I2C_Disable+0x18>)
 8000e26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000e2a:	61d3      	str	r3, [r2, #28]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	40021000 	.word	0x40021000

08000e38 <_NutComm_CAN_Disable>:
inline void _NutComm_CAN_Disable() {
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	__HAL_RCC_CAN1_CLK_DISABLE();
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <_NutComm_CAN_Disable+0x18>)
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	4a03      	ldr	r2, [pc, #12]	@ (8000e50 <_NutComm_CAN_Disable+0x18>)
 8000e42:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000e46:	61d3      	str	r3, [r2, #28]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000

08000e54 <_NutComm_UART_Enable>:

/* Resume CLK of peripheral */
inline void _NutComm_UART_Enable() {
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
	__HAL_RCC_USART1_CLK_ENABLE();
 8000e5a:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <_NutComm_UART_Enable+0x28>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	4a07      	ldr	r2, [pc, #28]	@ (8000e7c <_NutComm_UART_Enable+0x28>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e64:	6193      	str	r3, [r2, #24]
 8000e66:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <_NutComm_UART_Enable+0x28>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000

08000e80 <_NutComm_SPI_Enable>:
inline void _NutComm_SPI_Enable() {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
	__HAL_RCC_SPI1_CLK_ENABLE();
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <_NutComm_SPI_Enable+0x28>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <_NutComm_SPI_Enable+0x28>)
 8000e8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <_NutComm_SPI_Enable+0x28>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	40021000 	.word	0x40021000

08000eac <_NutComm_I2C_Enable>:
inline void _NutComm_I2C_Enable() {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000eb2:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <_NutComm_I2C_Enable+0x28>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	4a07      	ldr	r2, [pc, #28]	@ (8000ed4 <_NutComm_I2C_Enable+0x28>)
 8000eb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ebc:	61d3      	str	r3, [r2, #28]
 8000ebe:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <_NutComm_I2C_Enable+0x28>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <_NutComm_CAN_Enable>:
inline void _NutComm_CAN_Enable() {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000ede:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <_NutComm_CAN_Enable+0x28>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a07      	ldr	r2, [pc, #28]	@ (8000f00 <_NutComm_CAN_Enable+0x28>)
 8000ee4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ee8:	61d3      	str	r3, [r2, #28]
 8000eea:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <_NutComm_CAN_Enable+0x28>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40021000 	.word	0x40021000

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <HAL_MspInit+0x5c>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <HAL_MspInit+0x5c>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_MspInit+0x5c>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <HAL_MspInit+0x5c>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a0e      	ldr	r2, [pc, #56]	@ (8000f60 <HAL_MspInit+0x5c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <HAL_MspInit+0x5c>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <HAL_MspInit+0x60>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <HAL_MspInit+0x60>)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010000 	.word	0x40010000

08000f68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff4 <HAL_CAN_MspInit+0x8c>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d131      	bne.n	8000fec <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <HAL_CAN_MspInit+0x90>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff8 <HAL_CAN_MspInit+0x90>)
 8000f8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_CAN_MspInit+0x90>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_CAN_MspInit+0x90>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a14      	ldr	r2, [pc, #80]	@ (8000ff8 <HAL_CAN_MspInit+0x90>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_CAN_MspInit+0x90>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480b      	ldr	r0, [pc, #44]	@ (8000ffc <HAL_CAN_MspInit+0x94>)
 8000fce:	f002 fe5f 	bl	8003c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <HAL_CAN_MspInit+0x94>)
 8000fe8:	f002 fe52 	bl	8003c90 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000fec:	bf00      	nop
 8000fee:	3720      	adds	r7, #32
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40006400 	.word	0x40006400
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010800 	.word	0x40010800

08001000 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a15      	ldr	r2, [pc, #84]	@ (8001070 <HAL_I2C_MspInit+0x70>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d123      	bne.n	8001068 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <HAL_I2C_MspInit+0x74>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a13      	ldr	r2, [pc, #76]	@ (8001074 <HAL_I2C_MspInit+0x74>)
 8001026:	f043 0308 	orr.w	r3, r3, #8
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_I2C_MspInit+0x74>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001038:	23c0      	movs	r3, #192	@ 0xc0
 800103a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103c:	2312      	movs	r3, #18
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	480b      	ldr	r0, [pc, #44]	@ (8001078 <HAL_I2C_MspInit+0x78>)
 800104c:	f002 fe20 	bl	8003c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_I2C_MspInit+0x74>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_I2C_MspInit+0x74>)
 8001056:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800105a:	61d3      	str	r3, [r2, #28]
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_I2C_MspInit+0x74>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40005400 	.word	0x40005400
 8001074:	40021000 	.word	0x40021000
 8001078:	40010c00 	.word	0x40010c00

0800107c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a1b      	ldr	r2, [pc, #108]	@ (8001104 <HAL_SPI_MspInit+0x88>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d12f      	bne.n	80010fc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <HAL_SPI_MspInit+0x8c>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a19      	ldr	r2, [pc, #100]	@ (8001108 <HAL_SPI_MspInit+0x8c>)
 80010a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <HAL_SPI_MspInit+0x8c>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <HAL_SPI_MspInit+0x8c>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a13      	ldr	r2, [pc, #76]	@ (8001108 <HAL_SPI_MspInit+0x8c>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <HAL_SPI_MspInit+0x8c>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010cc:	23a0      	movs	r3, #160	@ 0xa0
 80010ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	480b      	ldr	r0, [pc, #44]	@ (800110c <HAL_SPI_MspInit+0x90>)
 80010e0:	f002 fdd6 	bl	8003c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010e4:	2340      	movs	r3, #64	@ 0x40
 80010e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <HAL_SPI_MspInit+0x90>)
 80010f8:	f002 fdca 	bl	8003c90 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40013000 	.word	0x40013000
 8001108:	40021000 	.word	0x40021000
 800110c:	40010800 	.word	0x40010800

08001110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a37      	ldr	r2, [pc, #220]	@ (8001208 <HAL_UART_MspInit+0xf8>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d132      	bne.n	8001196 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001130:	4b36      	ldr	r3, [pc, #216]	@ (800120c <HAL_UART_MspInit+0xfc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a35      	ldr	r2, [pc, #212]	@ (800120c <HAL_UART_MspInit+0xfc>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b33      	ldr	r3, [pc, #204]	@ (800120c <HAL_UART_MspInit+0xfc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b30      	ldr	r3, [pc, #192]	@ (800120c <HAL_UART_MspInit+0xfc>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a2f      	ldr	r2, [pc, #188]	@ (800120c <HAL_UART_MspInit+0xfc>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b2d      	ldr	r3, [pc, #180]	@ (800120c <HAL_UART_MspInit+0xfc>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001160:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	4619      	mov	r1, r3
 8001174:	4826      	ldr	r0, [pc, #152]	@ (8001210 <HAL_UART_MspInit+0x100>)
 8001176:	f002 fd8b 	bl	8003c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800117a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 0318 	add.w	r3, r7, #24
 800118c:	4619      	mov	r1, r3
 800118e:	4820      	ldr	r0, [pc, #128]	@ (8001210 <HAL_UART_MspInit+0x100>)
 8001190:	f002 fd7e 	bl	8003c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001194:	e034      	b.n	8001200 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a1e      	ldr	r2, [pc, #120]	@ (8001214 <HAL_UART_MspInit+0x104>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d12f      	bne.n	8001200 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <HAL_UART_MspInit+0xfc>)
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	4a19      	ldr	r2, [pc, #100]	@ (800120c <HAL_UART_MspInit+0xfc>)
 80011a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011aa:	61d3      	str	r3, [r2, #28]
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_UART_MspInit+0xfc>)
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_UART_MspInit+0xfc>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a13      	ldr	r2, [pc, #76]	@ (800120c <HAL_UART_MspInit+0xfc>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_UART_MspInit+0xfc>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011d0:	2304      	movs	r3, #4
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	4619      	mov	r1, r3
 80011e2:	480b      	ldr	r0, [pc, #44]	@ (8001210 <HAL_UART_MspInit+0x100>)
 80011e4:	f002 fd54 	bl	8003c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011e8:	2308      	movs	r3, #8
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0318 	add.w	r3, r7, #24
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	@ (8001210 <HAL_UART_MspInit+0x100>)
 80011fc:	f002 fd48 	bl	8003c90 <HAL_GPIO_Init>
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	@ 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40013800 	.word	0x40013800
 800120c:	40021000 	.word	0x40021000
 8001210:	40010800 	.word	0x40010800
 8001214:	40004400 	.word	0x40004400

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <NMI_Handler+0x4>

08001220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <MemManage_Handler+0x4>

08001230 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <UsageFault_Handler+0x4>

08001240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f002 faf2 	bl	8003850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800127c:	f7ff fff8 	bl	8001270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480b      	ldr	r0, [pc, #44]	@ (80012b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001282:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001284:	4a0c      	ldr	r2, [pc, #48]	@ (80012b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a09      	ldr	r2, [pc, #36]	@ (80012bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001298:	4c09      	ldr	r4, [pc, #36]	@ (80012c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f004 fc53 	bl	8005b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7fe ff4f 	bl	800014c <main>
  bx lr
 80012ae:	4770      	bx	lr
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80012b8:	08006464 	.word	0x08006464
  ldr r2, =_sbss
 80012bc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80012c0:	200049dc 	.word	0x200049dc

080012c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_2_IRQHandler>
	...

080012c8 <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 80012c8:	b480      	push	{r7}
 80012ca:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 80012ce:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80012d6:	2301      	movs	r3, #1
 80012d8:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 80012dc:	e02f      	b.n	800133e <aes_gen_tables+0x76>
    {
        pow[i] = x;
 80012de:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80012e2:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80012e6:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 80012ea:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80012ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 80012f2:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80012f6:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80012fa:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80012fe:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8001302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = MBEDTLS_BYTE_0( x ^ XTIME( x ) );
 8001306:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800130a:	b25a      	sxtb	r2, r3
 800130c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	b25b      	sxtb	r3, r3
 8001314:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8001318:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800131c:	2900      	cmp	r1, #0
 800131e:	d001      	beq.n	8001324 <aes_gen_tables+0x5c>
 8001320:	211b      	movs	r1, #27
 8001322:	e000      	b.n	8001326 <aes_gen_tables+0x5e>
 8001324:	2100      	movs	r1, #0
 8001326:	404b      	eors	r3, r1
 8001328:	b25b      	sxtb	r3, r3
 800132a:	4053      	eors	r3, r2
 800132c:	b25b      	sxtb	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 256; i++ )
 8001334:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001338:	3301      	adds	r3, #1
 800133a:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 800133e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001342:	2bff      	cmp	r3, #255	@ 0xff
 8001344:	ddcb      	ble.n	80012de <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 800134c:	2301      	movs	r3, #1
 800134e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8001352:	e01d      	b.n	8001390 <aes_gen_tables+0xc8>
    {
        RCON[i] = (uint32_t) x;
 8001354:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8001358:	49d6      	ldr	r1, [pc, #856]	@ (80016b4 <aes_gen_tables+0x3ec>)
 800135a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = MBEDTLS_BYTE_0( XTIME( x ) );
 8001362:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	b25b      	sxtb	r3, r3
 800136a:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 800136e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001372:	2a00      	cmp	r2, #0
 8001374:	d001      	beq.n	800137a <aes_gen_tables+0xb2>
 8001376:	221b      	movs	r2, #27
 8001378:	e000      	b.n	800137c <aes_gen_tables+0xb4>
 800137a:	2200      	movs	r2, #0
 800137c:	4053      	eors	r3, r2
 800137e:	b25b      	sxtb	r3, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8001386:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800138a:	3301      	adds	r3, #1
 800138c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8001390:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001394:	2b09      	cmp	r3, #9
 8001396:	dddd      	ble.n	8001354 <aes_gen_tables+0x8c>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8001398:	4bc7      	ldr	r3, [pc, #796]	@ (80016b8 <aes_gen_tables+0x3f0>)
 800139a:	2263      	movs	r2, #99	@ 0x63
 800139c:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 800139e:	4bc7      	ldr	r3, [pc, #796]	@ (80016bc <aes_gen_tables+0x3f4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

    for( i = 1; i < 256; i++ )
 80013a6:	2301      	movs	r3, #1
 80013a8:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80013ac:	e07e      	b.n	80014ac <aes_gen_tables+0x1e4>
    {
        x = pow[255 - log[i]];
 80013ae:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80013b2:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80013b6:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 80013ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013be:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80013c2:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80013c6:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80013ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ce:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        y  = x; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 80013d2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80013d6:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 80013da:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	b25a      	sxtb	r2, r3
 80013e2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80013e6:	11db      	asrs	r3, r3, #7
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 80013f4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80013f8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80013fc:	4053      	eors	r3, r2
 80013fe:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8001402:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	b25a      	sxtb	r2, r3
 800140a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800140e:	11db      	asrs	r3, r3, #7
 8001410:	b25b      	sxtb	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b25b      	sxtb	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 800141c:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8001420:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001424:	4053      	eors	r3, r2
 8001426:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 800142a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	b25a      	sxtb	r2, r3
 8001432:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001436:	11db      	asrs	r3, r3, #7
 8001438:	b25b      	sxtb	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b25b      	sxtb	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8001444:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8001448:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800144c:	4053      	eors	r3, r2
 800144e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8001452:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	b25a      	sxtb	r2, r3
 800145a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800145e:	11db      	asrs	r3, r3, #7
 8001460:	b25b      	sxtb	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b25b      	sxtb	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y ^ 0x63;
 800146c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001470:	f083 0363 	eor.w	r3, r3, #99	@ 0x63
 8001474:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8001478:	4053      	eors	r3, r2
 800147a:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        FSb[i] = (unsigned char) x;
 800147e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001482:	b2d9      	uxtb	r1, r3
 8001484:	4a8c      	ldr	r2, [pc, #560]	@ (80016b8 <aes_gen_tables+0x3f0>)
 8001486:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800148a:	4413      	add	r3, r2
 800148c:	460a      	mov	r2, r1
 800148e:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8001490:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001494:	b2d9      	uxtb	r1, r3
 8001496:	4a89      	ldr	r2, [pc, #548]	@ (80016bc <aes_gen_tables+0x3f4>)
 8001498:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800149c:	4413      	add	r3, r2
 800149e:	460a      	mov	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 80014a2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80014a6:	3301      	adds	r3, #1
 80014a8:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80014ac:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80014b0:	2bff      	cmp	r3, #255	@ 0xff
 80014b2:	f77f af7c 	ble.w	80013ae <aes_gen_tables+0xe6>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80014bc:	e13b      	b.n	8001736 <aes_gen_tables+0x46e>
    {
        x = FSb[i];
 80014be:	4a7e      	ldr	r2, [pc, #504]	@ (80016b8 <aes_gen_tables+0x3f0>)
 80014c0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
        y = MBEDTLS_BYTE_0( XTIME( x ) );
 80014cc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80014d8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d001      	beq.n	80014e4 <aes_gen_tables+0x21c>
 80014e0:	221b      	movs	r2, #27
 80014e2:	e000      	b.n	80014e6 <aes_gen_tables+0x21e>
 80014e4:	2200      	movs	r2, #0
 80014e6:	4053      	eors	r3, r2
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        z = MBEDTLS_BYTE_0( y ^ x );
 80014f0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80014f4:	b25a      	sxtb	r2, r3
 80014f6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	4053      	eors	r3, r2
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8001506:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800150a:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 800150c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001510:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 8001512:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001516:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 8001518:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 800151a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	@ 0x800
 800151e:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 8001520:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 8001522:	4967      	ldr	r1, [pc, #412]	@ (80016c0 <aes_gen_tables+0x3f8>)
 8001524:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 800152c:	4a64      	ldr	r2, [pc, #400]	@ (80016c0 <aes_gen_tables+0x3f8>)
 800152e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	ea4f 6233 	mov.w	r2, r3, ror #24
 800153a:	4962      	ldr	r1, [pc, #392]	@ (80016c4 <aes_gen_tables+0x3fc>)
 800153c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 8001544:	4a5f      	ldr	r2, [pc, #380]	@ (80016c4 <aes_gen_tables+0x3fc>)
 8001546:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	ea4f 6233 	mov.w	r2, r3, ror #24
 8001552:	495d      	ldr	r1, [pc, #372]	@ (80016c8 <aes_gen_tables+0x400>)
 8001554:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 800155c:	4a5a      	ldr	r2, [pc, #360]	@ (80016c8 <aes_gen_tables+0x400>)
 800155e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	ea4f 6233 	mov.w	r2, r3, ror #24
 800156a:	4958      	ldr	r1, [pc, #352]	@ (80016cc <aes_gen_tables+0x404>)
 800156c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 8001574:	4a51      	ldr	r2, [pc, #324]	@ (80016bc <aes_gen_tables+0x3f4>)
 8001576:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800157a:	4413      	add	r3, r2
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001582:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001586:	2b00      	cmp	r3, #0
 8001588:	d020      	beq.n	80015cc <aes_gen_tables+0x304>
 800158a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800158e:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001592:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001594:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001598:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800159c:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80015a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015a4:	441a      	add	r2, r3
 80015a6:	4b4a      	ldr	r3, [pc, #296]	@ (80016d0 <aes_gen_tables+0x408>)
 80015a8:	fb83 1302 	smull	r1, r3, r3, r2
 80015ac:	4413      	add	r3, r2
 80015ae:	11d9      	asrs	r1, r3, #7
 80015b0:	17d3      	asrs	r3, r2, #31
 80015b2:	1ac9      	subs	r1, r1, r3
 80015b4:	460b      	mov	r3, r1
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	1a5b      	subs	r3, r3, r1
 80015ba:	1ad1      	subs	r1, r2, r3
 80015bc:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80015c0:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80015c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015c8:	4618      	mov	r0, r3
 80015ca:	e000      	b.n	80015ce <aes_gen_tables+0x306>
 80015cc:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80015ce:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d020      	beq.n	8001618 <aes_gen_tables+0x350>
 80015d6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80015da:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80015de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015e0:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80015e4:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80015e8:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80015ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015f0:	441a      	add	r2, r3
 80015f2:	4b37      	ldr	r3, [pc, #220]	@ (80016d0 <aes_gen_tables+0x408>)
 80015f4:	fb83 1302 	smull	r1, r3, r3, r2
 80015f8:	4413      	add	r3, r2
 80015fa:	11d9      	asrs	r1, r3, #7
 80015fc:	17d3      	asrs	r3, r2, #31
 80015fe:	1ac9      	subs	r1, r1, r3
 8001600:	460b      	mov	r3, r1
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	1a5b      	subs	r3, r3, r1
 8001606:	1ad1      	subs	r1, r2, r3
 8001608:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800160c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001610:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	e000      	b.n	800161a <aes_gen_tables+0x352>
 8001618:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800161a:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800161c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <aes_gen_tables+0x39e>
 8001624:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001628:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800162c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800162e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001632:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001636:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 800163a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800163e:	441a      	add	r2, r3
 8001640:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <aes_gen_tables+0x408>)
 8001642:	fb83 1302 	smull	r1, r3, r3, r2
 8001646:	4413      	add	r3, r2
 8001648:	11d9      	asrs	r1, r3, #7
 800164a:	17d3      	asrs	r3, r2, #31
 800164c:	1ac9      	subs	r1, r1, r3
 800164e:	460b      	mov	r3, r1
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	1a5b      	subs	r3, r3, r1
 8001654:	1ad1      	subs	r1, r2, r3
 8001656:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800165a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800165e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	e000      	b.n	8001668 <aes_gen_tables+0x3a0>
 8001666:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8001668:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 800166a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800166e:	2b00      	cmp	r3, #0
 8001670:	d030      	beq.n	80016d4 <aes_gen_tables+0x40c>
 8001672:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001676:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800167a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800167c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001680:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001684:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8001688:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800168c:	441a      	add	r2, r3
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <aes_gen_tables+0x408>)
 8001690:	fb83 1302 	smull	r1, r3, r3, r2
 8001694:	4413      	add	r3, r2
 8001696:	11d9      	asrs	r1, r3, #7
 8001698:	17d3      	asrs	r3, r2, #31
 800169a:	1ac9      	subs	r1, r1, r3
 800169c:	460b      	mov	r3, r1
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	1a5b      	subs	r3, r3, r1
 80016a2:	1ad1      	subs	r1, r2, r3
 80016a4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80016a8:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80016ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016b0:	061b      	lsls	r3, r3, #24
 80016b2:	e010      	b.n	80016d6 <aes_gen_tables+0x40e>
 80016b4:	20004414 	.word	0x20004414
 80016b8:	20002214 	.word	0x20002214
 80016bc:	20003314 	.word	0x20003314
 80016c0:	20002314 	.word	0x20002314
 80016c4:	20002714 	.word	0x20002714
 80016c8:	20002b14 	.word	0x20002b14
 80016cc:	20002f14 	.word	0x20002f14
 80016d0:	80808081 	.word	0x80808081
 80016d4:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80016d6:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80016da:	491d      	ldr	r1, [pc, #116]	@ (8001750 <aes_gen_tables+0x488>)
 80016dc:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 80016e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001750 <aes_gen_tables+0x488>)
 80016e6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80016ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ee:	ea4f 6233 	mov.w	r2, r3, ror #24
 80016f2:	4918      	ldr	r1, [pc, #96]	@ (8001754 <aes_gen_tables+0x48c>)
 80016f4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 80016fc:	4a15      	ldr	r2, [pc, #84]	@ (8001754 <aes_gen_tables+0x48c>)
 80016fe:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	ea4f 6233 	mov.w	r2, r3, ror #24
 800170a:	4913      	ldr	r1, [pc, #76]	@ (8001758 <aes_gen_tables+0x490>)
 800170c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 8001714:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <aes_gen_tables+0x490>)
 8001716:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	ea4f 6233 	mov.w	r2, r3, ror #24
 8001722:	490e      	ldr	r1, [pc, #56]	@ (800175c <aes_gen_tables+0x494>)
 8001724:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 800172c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001730:	3301      	adds	r3, #1
 8001732:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8001736:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800173a:	2bff      	cmp	r3, #255	@ 0xff
 800173c:	f77f aebf 	ble.w	80014be <aes_gen_tables+0x1f6>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	f607 0714 	addw	r7, r7, #2068	@ 0x814
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20003414 	.word	0x20003414
 8001754:	20003814 	.word	0x20003814
 8001758:	20003c14 	.word	0x20003c14
 800175c:	20004014 	.word	0x20004014

08001760 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8001768:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800176c:	2100      	movs	r1, #0
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f004 f9e6 	bl	8005b40 <memset>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 800178a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f001 fde0 	bl	8003354 <mbedtls_platform_zeroize>
 8001794:	e000      	b.n	8001798 <mbedtls_aes_free+0x1c>
        return;
 8001796:	bf00      	nop
}
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017b2:	d012      	beq.n	80017da <mbedtls_aes_setkey_enc+0x3a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017ba:	d812      	bhi.n	80017e2 <mbedtls_aes_setkey_enc+0x42>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b80      	cmp	r3, #128	@ 0x80
 80017c0:	d003      	beq.n	80017ca <mbedtls_aes_setkey_enc+0x2a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80017c6:	d004      	beq.n	80017d2 <mbedtls_aes_setkey_enc+0x32>
 80017c8:	e00b      	b.n	80017e2 <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	220a      	movs	r2, #10
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e00a      	b.n	80017e8 <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	220c      	movs	r2, #12
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e006      	b.n	80017e8 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	220e      	movs	r2, #14
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e002      	b.n	80017e8 <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80017e2:	f06f 031f 	mvn.w	r3, #31
 80017e6:	e1c7      	b.n	8001b78 <mbedtls_aes_setkey_enc+0x3d8>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80017e8:	4b8d      	ldr	r3, [pc, #564]	@ (8001a20 <mbedtls_aes_setkey_enc+0x280>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d104      	bne.n	80017fa <mbedtls_aes_setkey_enc+0x5a>
    {
        aes_gen_tables();
 80017f0:	f7ff fd6a 	bl	80012c8 <aes_gen_tables>
        aes_init_done = 1;
 80017f4:	4b8a      	ldr	r3, [pc, #552]	@ (8001a20 <mbedtls_aes_setkey_enc+0x280>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3308      	adds	r3, #8
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	e027      	b.n	800185c <mbedtls_aes_setkey_enc+0xbc>
    {
        RK[i] = MBEDTLS_GET_UINT32_LE( key, i << 2 );
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	3301      	adds	r3, #1
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	4413      	add	r3, r2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	ea41 0203 	orr.w	r2, r1, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	440b      	add	r3, r1
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	ea42 0103 	orr.w	r1, r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	3303      	adds	r3, #3
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	4413      	add	r3, r2
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	061a      	lsls	r2, r3, #24
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	6938      	ldr	r0, [r7, #16]
 8001850:	4403      	add	r3, r0
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	429a      	cmp	r2, r3
 8001864:	d3d2      	bcc.n	800180c <mbedtls_aes_setkey_enc+0x6c>
    }

    switch( ctx->nr )
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b0e      	cmp	r3, #14
 800186c:	f000 80d4 	beq.w	8001a18 <mbedtls_aes_setkey_enc+0x278>
 8001870:	2b0e      	cmp	r3, #14
 8001872:	f300 8180 	bgt.w	8001b76 <mbedtls_aes_setkey_enc+0x3d6>
 8001876:	2b0a      	cmp	r3, #10
 8001878:	d002      	beq.n	8001880 <mbedtls_aes_setkey_enc+0xe0>
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d05c      	beq.n	8001938 <mbedtls_aes_setkey_enc+0x198>
 800187e:	e17a      	b.n	8001b76 <mbedtls_aes_setkey_enc+0x3d6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e054      	b.n	8001930 <mbedtls_aes_setkey_enc+0x190>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4966      	ldr	r1, [pc, #408]	@ (8001a24 <mbedtls_aes_setkey_enc+0x284>)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001892:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	320c      	adds	r2, #12
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	0a12      	lsrs	r2, r2, #8
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	4611      	mov	r1, r2
 80018a0:	4a61      	ldr	r2, [pc, #388]	@ (8001a28 <mbedtls_aes_setkey_enc+0x288>)
 80018a2:	5c52      	ldrb	r2, [r2, r1]
                RK[4]  = RK[0] ^ RCON[i] ^
 80018a4:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	330c      	adds	r3, #12
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	4619      	mov	r1, r3
 80018b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a28 <mbedtls_aes_setkey_enc+0x288>)
 80018b4:	5c5b      	ldrb	r3, [r3, r1]
 80018b6:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 80018b8:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	330c      	adds	r3, #12
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0e1b      	lsrs	r3, r3, #24
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	4619      	mov	r1, r3
 80018c6:	4b58      	ldr	r3, [pc, #352]	@ (8001a28 <mbedtls_aes_setkey_enc+0x288>)
 80018c8:	5c5b      	ldrb	r3, [r3, r1]
 80018ca:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 80018cc:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[3] ) ] << 24 );
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	330c      	adds	r3, #12
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	4b53      	ldr	r3, [pc, #332]	@ (8001a28 <mbedtls_aes_setkey_enc+0x288>)
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 80018e4:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 80018e6:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	3304      	adds	r3, #4
 80018ec:	6819      	ldr	r1, [r3, #0]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	3310      	adds	r3, #16
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	3314      	adds	r3, #20
 80018f8:	404a      	eors	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	3308      	adds	r3, #8
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	3314      	adds	r3, #20
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	3318      	adds	r3, #24
 800190c:	404a      	eors	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	330c      	adds	r3, #12
 8001914:	6819      	ldr	r1, [r3, #0]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	3318      	adds	r3, #24
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	331c      	adds	r3, #28
 8001920:	404a      	eors	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	3310      	adds	r3, #16
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b09      	cmp	r3, #9
 8001934:	d9a7      	bls.n	8001886 <mbedtls_aes_setkey_enc+0xe6>
            }
            break;
 8001936:	e11e      	b.n	8001b76 <mbedtls_aes_setkey_enc+0x3d6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e068      	b.n	8001a10 <mbedtls_aes_setkey_enc+0x270>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4938      	ldr	r1, [pc, #224]	@ (8001a24 <mbedtls_aes_setkey_enc+0x284>)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800194a:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	3214      	adds	r2, #20
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	0a12      	lsrs	r2, r2, #8
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	4611      	mov	r1, r2
 8001958:	4a33      	ldr	r2, [pc, #204]	@ (8001a28 <mbedtls_aes_setkey_enc+0x288>)
 800195a:	5c52      	ldrb	r2, [r2, r1]
                RK[6]  = RK[0] ^ RCON[i] ^
 800195c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	3314      	adds	r3, #20
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4619      	mov	r1, r3
 800196a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a28 <mbedtls_aes_setkey_enc+0x288>)
 800196c:	5c5b      	ldrb	r3, [r3, r1]
 800196e:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 8001970:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	3314      	adds	r3, #20
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	0e1b      	lsrs	r3, r3, #24
 800197a:	b2db      	uxtb	r3, r3
 800197c:	4619      	mov	r1, r3
 800197e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a28 <mbedtls_aes_setkey_enc+0x288>)
 8001980:	5c5b      	ldrb	r3, [r3, r1]
 8001982:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 8001984:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[5] ) ] << 24 );
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	3314      	adds	r3, #20
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	4b25      	ldr	r3, [pc, #148]	@ (8001a28 <mbedtls_aes_setkey_enc+0x288>)
 8001994:	5c9b      	ldrb	r3, [r3, r2]
 8001996:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 800199c:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 800199e:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	3304      	adds	r3, #4
 80019a4:	6819      	ldr	r1, [r3, #0]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	3318      	adds	r3, #24
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	331c      	adds	r3, #28
 80019b0:	404a      	eors	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	3308      	adds	r3, #8
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	331c      	adds	r3, #28
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	3320      	adds	r3, #32
 80019c4:	404a      	eors	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	330c      	adds	r3, #12
 80019cc:	6819      	ldr	r1, [r3, #0]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	3320      	adds	r3, #32
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3324      	adds	r3, #36	@ 0x24
 80019d8:	404a      	eors	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	3310      	adds	r3, #16
 80019e0:	6819      	ldr	r1, [r3, #0]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	3324      	adds	r3, #36	@ 0x24
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	3328      	adds	r3, #40	@ 0x28
 80019ec:	404a      	eors	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	3314      	adds	r3, #20
 80019f4:	6819      	ldr	r1, [r3, #0]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	3328      	adds	r3, #40	@ 0x28
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	332c      	adds	r3, #44	@ 0x2c
 8001a00:	404a      	eors	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3301      	adds	r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	3318      	adds	r3, #24
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b07      	cmp	r3, #7
 8001a14:	d993      	bls.n	800193e <mbedtls_aes_setkey_enc+0x19e>
            }
            break;
 8001a16:	e0ae      	b.n	8001b76 <mbedtls_aes_setkey_enc+0x3d6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e0a6      	b.n	8001b6c <mbedtls_aes_setkey_enc+0x3cc>
 8001a1e:	bf00      	nop
 8001a20:	2000443c 	.word	0x2000443c
 8001a24:	20004414 	.word	0x20004414
 8001a28:	20002214 	.word	0x20002214
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4953      	ldr	r1, [pc, #332]	@ (8001b80 <mbedtls_aes_setkey_enc+0x3e0>)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a38:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	321c      	adds	r2, #28
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	0a12      	lsrs	r2, r2, #8
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	4611      	mov	r1, r2
 8001a46:	4a4f      	ldr	r2, [pc, #316]	@ (8001b84 <mbedtls_aes_setkey_enc+0x3e4>)
 8001a48:	5c52      	ldrb	r2, [r2, r1]
                RK[8]  = RK[0] ^ RCON[i] ^
 8001a4a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	331c      	adds	r3, #28
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	4b4a      	ldr	r3, [pc, #296]	@ (8001b84 <mbedtls_aes_setkey_enc+0x3e4>)
 8001a5a:	5c5b      	ldrb	r3, [r3, r1]
 8001a5c:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 8001a5e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	331c      	adds	r3, #28
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0e1b      	lsrs	r3, r3, #24
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4b45      	ldr	r3, [pc, #276]	@ (8001b84 <mbedtls_aes_setkey_enc+0x3e4>)
 8001a6e:	5c5b      	ldrb	r3, [r3, r1]
 8001a70:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 8001a72:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[7] ) ] << 24 );
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	331c      	adds	r3, #28
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b40      	ldr	r3, [pc, #256]	@ (8001b84 <mbedtls_aes_setkey_enc+0x3e4>)
 8001a82:	5c9b      	ldrb	r3, [r3, r2]
 8001a84:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8001a8a:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 8001a8c:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	3304      	adds	r3, #4
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	3320      	adds	r3, #32
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	3324      	adds	r3, #36	@ 0x24
 8001a9e:	404a      	eors	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	3308      	adds	r3, #8
 8001aa6:	6819      	ldr	r1, [r3, #0]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	3324      	adds	r3, #36	@ 0x24
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	3328      	adds	r3, #40	@ 0x28
 8001ab2:	404a      	eors	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	330c      	adds	r3, #12
 8001aba:	6819      	ldr	r1, [r3, #0]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	3328      	adds	r3, #40	@ 0x28
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	332c      	adds	r3, #44	@ 0x2c
 8001ac6:	404a      	eors	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	3310      	adds	r3, #16
 8001ace:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	322c      	adds	r2, #44	@ 0x2c
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4a2a      	ldr	r2, [pc, #168]	@ (8001b84 <mbedtls_aes_setkey_enc+0x3e4>)
 8001adc:	5c52      	ldrb	r2, [r2, r1]
                RK[12] = RK[4] ^
 8001ade:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	332c      	adds	r3, #44	@ 0x2c
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4619      	mov	r1, r3
 8001aec:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <mbedtls_aes_setkey_enc+0x3e4>)
 8001aee:	5c5b      	ldrb	r3, [r3, r1]
 8001af0:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 8001af2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	332c      	adds	r3, #44	@ 0x2c
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4619      	mov	r1, r3
 8001b00:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <mbedtls_aes_setkey_enc+0x3e4>)
 8001b02:	5c5b      	ldrb	r3, [r3, r1]
 8001b04:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 8001b06:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[11] ) ] << 24 );
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	332c      	adds	r3, #44	@ 0x2c
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	0e1b      	lsrs	r3, r3, #24
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <mbedtls_aes_setkey_enc+0x3e4>)
 8001b18:	5c9b      	ldrb	r3, [r3, r2]
 8001b1a:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 8001b20:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8001b22:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	3314      	adds	r3, #20
 8001b28:	6819      	ldr	r1, [r3, #0]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	3330      	adds	r3, #48	@ 0x30
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	3334      	adds	r3, #52	@ 0x34
 8001b34:	404a      	eors	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	3318      	adds	r3, #24
 8001b3c:	6819      	ldr	r1, [r3, #0]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	3334      	adds	r3, #52	@ 0x34
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	3338      	adds	r3, #56	@ 0x38
 8001b48:	404a      	eors	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	331c      	adds	r3, #28
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	3338      	adds	r3, #56	@ 0x38
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	333c      	adds	r3, #60	@ 0x3c
 8001b5c:	404a      	eors	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	3320      	adds	r3, #32
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	f67f af5c 	bls.w	8001a2c <mbedtls_aes_setkey_enc+0x28c>
            }
            break;
 8001b74:	bf00      	nop
    }

    return( 0 );
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20004414 	.word	0x20004414
 8001b84:	20002214 	.word	0x20002214

08001b88 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0d0      	sub	sp, #320	@ 0x140
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001b92:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b96:	6018      	str	r0, [r3, #0]
 8001b98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001b9c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ba0:	6019      	str	r1, [r3, #0]
 8001ba2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ba6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001baa:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fdd5 	bl	8001760 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8001bb6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001bba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001bc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001bca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001bd4:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8001bd6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001bda:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8001bde:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001be2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001be6:	f107 0014 	add.w	r0, r7, #20
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	f7ff fdd7 	bl	80017a0 <mbedtls_aes_setkey_enc>
 8001bf2:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 8001bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 80e2 	bne.w	8001dc4 <mbedtls_aes_setkey_dec+0x23c>
        goto exit;

    ctx->nr = cty.nr;
 8001c00:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001c04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001c0e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8001c16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001c1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001c24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 8001c32:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001c36:	1d13      	adds	r3, r2, #4
 8001c38:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001c3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001c40:	1d19      	adds	r1, r3, #4
 8001c42:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8001c4a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001c4e:	1d13      	adds	r3, r2, #4
 8001c50:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001c54:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001c58:	1d19      	adds	r1, r3, #4
 8001c5a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8001c62:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001c66:	1d13      	adds	r3, r2, #4
 8001c68:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001c6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001c70:	1d19      	adds	r1, r3, #4
 8001c72:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8001c7a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001c7e:	1d13      	adds	r3, r2, #4
 8001c80:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001c84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001c88:	1d19      	adds	r1, r3, #4
 8001c8a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8001c92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001c96:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001ca4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001ca8:	3b20      	subs	r3, #32
 8001caa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001cae:	e054      	b.n	8001d5a <mbedtls_aes_setkey_dec+0x1d2>
    {
        for( j = 0; j < 4; j++, SK++ )
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001cb6:	e042      	b.n	8001d3e <mbedtls_aes_setkey_dec+0x1b6>
        {
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8001cb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b47      	ldr	r3, [pc, #284]	@ (8001de0 <mbedtls_aes_setkey_dec+0x258>)
 8001cc4:	5c9b      	ldrb	r3, [r3, r2]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b46      	ldr	r3, [pc, #280]	@ (8001de4 <mbedtls_aes_setkey_dec+0x25c>)
 8001cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 8001cce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4b41      	ldr	r3, [pc, #260]	@ (8001de0 <mbedtls_aes_setkey_dec+0x258>)
 8001cdc:	5c5b      	ldrb	r3, [r3, r1]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4b41      	ldr	r3, [pc, #260]	@ (8001de8 <mbedtls_aes_setkey_dec+0x260>)
 8001ce2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8001ce6:	405a      	eors	r2, r3
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 8001ce8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	0c1b      	lsrs	r3, r3, #16
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8001de0 <mbedtls_aes_setkey_dec+0x258>)
 8001cf6:	5c5b      	ldrb	r3, [r3, r1]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8001dec <mbedtls_aes_setkey_dec+0x264>)
 8001cfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 8001d00:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ MBEDTLS_BYTE_3( *SK ) ] );
 8001d04:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	0e1b      	lsrs	r3, r3, #24
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b33      	ldr	r3, [pc, #204]	@ (8001de0 <mbedtls_aes_setkey_dec+0x258>)
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b36      	ldr	r3, [pc, #216]	@ (8001df0 <mbedtls_aes_setkey_dec+0x268>)
 8001d18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8001d1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001d20:	1d18      	adds	r0, r3, #4
 8001d22:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 8001d26:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8001d28:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 8001d2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001d34:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d38:	3304      	adds	r3, #4
 8001d3a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001d3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	ddb8      	ble.n	8001cb8 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8001d46:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001d50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d54:	3b20      	subs	r3, #32
 8001d56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001d5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	dca6      	bgt.n	8001cb0 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 8001d62:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001d66:	1d13      	adds	r3, r2, #4
 8001d68:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001d6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001d70:	1d19      	adds	r1, r3, #4
 8001d72:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8001d7a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001d7e:	1d13      	adds	r3, r2, #4
 8001d80:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001d84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001d88:	1d19      	adds	r1, r3, #4
 8001d8a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8001d92:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001d96:	1d13      	adds	r3, r2, #4
 8001d98:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001d9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001da0:	1d19      	adds	r1, r3, #4
 8001da2:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8001daa:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001dae:	1d13      	adds	r3, r2, #4
 8001db0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001db4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001db8:	1d19      	adds	r1, r3, #4
 8001dba:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e000      	b.n	8001dc6 <mbedtls_aes_setkey_dec+0x23e>
        goto exit;
 8001dc4:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fcd6 	bl	800177c <mbedtls_aes_free>

    return( ret );
 8001dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20002214 	.word	0x20002214
 8001de4:	20003414 	.word	0x20003414
 8001de8:	20003814 	.word	0x20003814
 8001dec:	20003c14 	.word	0x20003c14
 8001df0:	20004014 	.word	0x20004014

08001df4 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08e      	sub	sp, #56	@ 0x38
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	633b      	str	r3, [r7, #48]	@ 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	431a      	orrs	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	3302      	adds	r3, #2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	041b      	lsls	r3, r3, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3303      	adds	r3, #3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	061b      	lsls	r3, r3, #24
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2e:	1d1a      	adds	r2, r3, #4
 8001e30:	633a      	str	r2, [r7, #48]	@ 0x30
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4053      	eors	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3305      	adds	r3, #5
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	3306      	adds	r3, #6
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	041b      	lsls	r3, r3, #16
 8001e54:	431a      	orrs	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3307      	adds	r3, #7
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e64:	1d1a      	adds	r2, r3, #4
 8001e66:	633a      	str	r2, [r7, #48]	@ 0x30
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4053      	eors	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3308      	adds	r3, #8
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	3309      	adds	r3, #9
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	431a      	orrs	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	330a      	adds	r3, #10
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	330b      	adds	r3, #11
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	061b      	lsls	r3, r3, #24
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9a:	1d1a      	adds	r2, r3, #4
 8001e9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	4053      	eors	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	330d      	adds	r3, #13
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	330e      	adds	r3, #14
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	041b      	lsls	r3, r3, #16
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	330f      	adds	r3, #15
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed0:	1d1a      	adds	r2, r3, #4
 8001ed2:	633a      	str	r2, [r7, #48]	@ 0x30
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	4053      	eors	r3, r2
 8001eda:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	105b      	asrs	r3, r3, #1
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ee6:	e122      	b.n	800212e <mbedtls_internal_aes_encrypt+0x33a>
    {
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eea:	1d1a      	adds	r2, r3, #4
 8001eec:	633a      	str	r2, [r7, #48]	@ 0x30
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4bb0      	ldr	r3, [pc, #704]	@ (80021b8 <mbedtls_internal_aes_encrypt+0x3c4>)
 8001ef8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001efc:	405a      	eors	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4619      	mov	r1, r3
 8001f06:	4bad      	ldr	r3, [pc, #692]	@ (80021bc <mbedtls_internal_aes_encrypt+0x3c8>)
 8001f08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f0c:	405a      	eors	r2, r3
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	4baa      	ldr	r3, [pc, #680]	@ (80021c0 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001f18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f1c:	405a      	eors	r2, r3
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	0e1b      	lsrs	r3, r3, #24
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	4619      	mov	r1, r3
 8001f26:	4ba7      	ldr	r3, [pc, #668]	@ (80021c4 <mbedtls_internal_aes_encrypt+0x3d0>)
 8001f28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f2c:	4053      	eors	r3, r2
 8001f2e:	623b      	str	r3, [r7, #32]
 8001f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f32:	1d1a      	adds	r2, r3, #4
 8001f34:	633a      	str	r2, [r7, #48]	@ 0x30
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4b9e      	ldr	r3, [pc, #632]	@ (80021b8 <mbedtls_internal_aes_encrypt+0x3c4>)
 8001f40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f44:	405a      	eors	r2, r3
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4b9b      	ldr	r3, [pc, #620]	@ (80021bc <mbedtls_internal_aes_encrypt+0x3c8>)
 8001f50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f54:	405a      	eors	r2, r3
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4b98      	ldr	r3, [pc, #608]	@ (80021c0 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001f60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f64:	405a      	eors	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	0e1b      	lsrs	r3, r3, #24
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4b95      	ldr	r3, [pc, #596]	@ (80021c4 <mbedtls_internal_aes_encrypt+0x3d0>)
 8001f70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f74:	4053      	eors	r3, r2
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7a:	1d1a      	adds	r2, r3, #4
 8001f7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	4619      	mov	r1, r3
 8001f86:	4b8c      	ldr	r3, [pc, #560]	@ (80021b8 <mbedtls_internal_aes_encrypt+0x3c4>)
 8001f88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f8c:	405a      	eors	r2, r3
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4619      	mov	r1, r3
 8001f96:	4b89      	ldr	r3, [pc, #548]	@ (80021bc <mbedtls_internal_aes_encrypt+0x3c8>)
 8001f98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f9c:	405a      	eors	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4b86      	ldr	r3, [pc, #536]	@ (80021c0 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001fa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fac:	405a      	eors	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	0e1b      	lsrs	r3, r3, #24
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4b83      	ldr	r3, [pc, #524]	@ (80021c4 <mbedtls_internal_aes_encrypt+0x3d0>)
 8001fb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fbc:	4053      	eors	r3, r2
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc2:	1d1a      	adds	r2, r3, #4
 8001fc4:	633a      	str	r2, [r7, #48]	@ 0x30
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4b7a      	ldr	r3, [pc, #488]	@ (80021b8 <mbedtls_internal_aes_encrypt+0x3c4>)
 8001fd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fd4:	405a      	eors	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4b77      	ldr	r3, [pc, #476]	@ (80021bc <mbedtls_internal_aes_encrypt+0x3c8>)
 8001fe0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fe4:	405a      	eors	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	0c1b      	lsrs	r3, r3, #16
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	4619      	mov	r1, r3
 8001fee:	4b74      	ldr	r3, [pc, #464]	@ (80021c0 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001ff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ff4:	405a      	eors	r2, r3
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	0e1b      	lsrs	r3, r3, #24
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4b71      	ldr	r3, [pc, #452]	@ (80021c4 <mbedtls_internal_aes_encrypt+0x3d0>)
 8002000:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002004:	4053      	eors	r3, r2
 8002006:	62fb      	str	r3, [r7, #44]	@ 0x2c
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8002008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800200a:	1d1a      	adds	r2, r3, #4
 800200c:	633a      	str	r2, [r7, #48]	@ 0x30
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	4619      	mov	r1, r3
 8002016:	4b68      	ldr	r3, [pc, #416]	@ (80021b8 <mbedtls_internal_aes_encrypt+0x3c4>)
 8002018:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800201c:	405a      	eors	r2, r3
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4619      	mov	r1, r3
 8002026:	4b65      	ldr	r3, [pc, #404]	@ (80021bc <mbedtls_internal_aes_encrypt+0x3c8>)
 8002028:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800202c:	405a      	eors	r2, r3
 800202e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002030:	0c1b      	lsrs	r3, r3, #16
 8002032:	b2db      	uxtb	r3, r3
 8002034:	4619      	mov	r1, r3
 8002036:	4b62      	ldr	r3, [pc, #392]	@ (80021c0 <mbedtls_internal_aes_encrypt+0x3cc>)
 8002038:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800203c:	405a      	eors	r2, r3
 800203e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002040:	0e1b      	lsrs	r3, r3, #24
 8002042:	b2db      	uxtb	r3, r3
 8002044:	4619      	mov	r1, r3
 8002046:	4b5f      	ldr	r3, [pc, #380]	@ (80021c4 <mbedtls_internal_aes_encrypt+0x3d0>)
 8002048:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800204c:	4053      	eors	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002052:	1d1a      	adds	r2, r3, #4
 8002054:	633a      	str	r2, [r7, #48]	@ 0x30
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	b2db      	uxtb	r3, r3
 800205c:	4619      	mov	r1, r3
 800205e:	4b56      	ldr	r3, [pc, #344]	@ (80021b8 <mbedtls_internal_aes_encrypt+0x3c4>)
 8002060:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002064:	405a      	eors	r2, r3
 8002066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	b2db      	uxtb	r3, r3
 800206c:	4619      	mov	r1, r3
 800206e:	4b53      	ldr	r3, [pc, #332]	@ (80021bc <mbedtls_internal_aes_encrypt+0x3c8>)
 8002070:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002074:	405a      	eors	r2, r3
 8002076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002078:	0c1b      	lsrs	r3, r3, #16
 800207a:	b2db      	uxtb	r3, r3
 800207c:	4619      	mov	r1, r3
 800207e:	4b50      	ldr	r3, [pc, #320]	@ (80021c0 <mbedtls_internal_aes_encrypt+0x3cc>)
 8002080:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002084:	405a      	eors	r2, r3
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	0e1b      	lsrs	r3, r3, #24
 800208a:	b2db      	uxtb	r3, r3
 800208c:	4619      	mov	r1, r3
 800208e:	4b4d      	ldr	r3, [pc, #308]	@ (80021c4 <mbedtls_internal_aes_encrypt+0x3d0>)
 8002090:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002094:	4053      	eors	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800209a:	1d1a      	adds	r2, r3, #4
 800209c:	633a      	str	r2, [r7, #48]	@ 0x30
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	4619      	mov	r1, r3
 80020a6:	4b44      	ldr	r3, [pc, #272]	@ (80021b8 <mbedtls_internal_aes_encrypt+0x3c4>)
 80020a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020ac:	405a      	eors	r2, r3
 80020ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4619      	mov	r1, r3
 80020b6:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <mbedtls_internal_aes_encrypt+0x3c8>)
 80020b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020bc:	405a      	eors	r2, r3
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	4619      	mov	r1, r3
 80020c6:	4b3e      	ldr	r3, [pc, #248]	@ (80021c0 <mbedtls_internal_aes_encrypt+0x3cc>)
 80020c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020cc:	405a      	eors	r2, r3
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	0e1b      	lsrs	r3, r3, #24
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	4619      	mov	r1, r3
 80020d6:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <mbedtls_internal_aes_encrypt+0x3d0>)
 80020d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020dc:	4053      	eors	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e2:	1d1a      	adds	r2, r3, #4
 80020e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4619      	mov	r1, r3
 80020ee:	4b32      	ldr	r3, [pc, #200]	@ (80021b8 <mbedtls_internal_aes_encrypt+0x3c4>)
 80020f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020f4:	405a      	eors	r2, r3
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4619      	mov	r1, r3
 80020fe:	4b2f      	ldr	r3, [pc, #188]	@ (80021bc <mbedtls_internal_aes_encrypt+0x3c8>)
 8002100:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002104:	405a      	eors	r2, r3
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	b2db      	uxtb	r3, r3
 800210c:	4619      	mov	r1, r3
 800210e:	4b2c      	ldr	r3, [pc, #176]	@ (80021c0 <mbedtls_internal_aes_encrypt+0x3cc>)
 8002110:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002114:	405a      	eors	r2, r3
 8002116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002118:	0e1b      	lsrs	r3, r3, #24
 800211a:	b2db      	uxtb	r3, r3
 800211c:	4619      	mov	r1, r3
 800211e:	4b29      	ldr	r3, [pc, #164]	@ (80021c4 <mbedtls_internal_aes_encrypt+0x3d0>)
 8002120:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002124:	4053      	eors	r3, r2
 8002126:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8002128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800212a:	3b01      	subs	r3, #1
 800212c:	637b      	str	r3, [r7, #52]	@ 0x34
 800212e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002130:	2b00      	cmp	r3, #0
 8002132:	f73f aed9 	bgt.w	8001ee8 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002138:	1d1a      	adds	r2, r3, #4
 800213a:	633a      	str	r2, [r7, #48]	@ 0x30
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	4619      	mov	r1, r3
 8002144:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <mbedtls_internal_aes_encrypt+0x3c4>)
 8002146:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800214a:	405a      	eors	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4619      	mov	r1, r3
 8002154:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <mbedtls_internal_aes_encrypt+0x3c8>)
 8002156:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800215a:	405a      	eors	r2, r3
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	0c1b      	lsrs	r3, r3, #16
 8002160:	b2db      	uxtb	r3, r3
 8002162:	4619      	mov	r1, r3
 8002164:	4b16      	ldr	r3, [pc, #88]	@ (80021c0 <mbedtls_internal_aes_encrypt+0x3cc>)
 8002166:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800216a:	405a      	eors	r2, r3
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	0e1b      	lsrs	r3, r3, #24
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4619      	mov	r1, r3
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <mbedtls_internal_aes_encrypt+0x3d0>)
 8002176:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800217a:	4053      	eors	r3, r2
 800217c:	623b      	str	r3, [r7, #32]
 800217e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002180:	1d1a      	adds	r2, r3, #4
 8002182:	633a      	str	r2, [r7, #48]	@ 0x30
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <mbedtls_internal_aes_encrypt+0x3c4>)
 800218e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002192:	405a      	eors	r2, r3
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4619      	mov	r1, r3
 800219c:	4b07      	ldr	r3, [pc, #28]	@ (80021bc <mbedtls_internal_aes_encrypt+0x3c8>)
 800219e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021a2:	405a      	eors	r2, r3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	0c1b      	lsrs	r3, r3, #16
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4619      	mov	r1, r3
 80021ac:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <mbedtls_internal_aes_encrypt+0x3cc>)
 80021ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021b2:	405a      	eors	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	e007      	b.n	80021c8 <mbedtls_internal_aes_encrypt+0x3d4>
 80021b8:	20002314 	.word	0x20002314
 80021bc:	20002714 	.word	0x20002714
 80021c0:	20002b14 	.word	0x20002b14
 80021c4:	20002f14 	.word	0x20002f14
 80021c8:	0e1b      	lsrs	r3, r3, #24
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	4619      	mov	r1, r3
 80021ce:	4b9f      	ldr	r3, [pc, #636]	@ (800244c <mbedtls_internal_aes_encrypt+0x658>)
 80021d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021d4:	4053      	eors	r3, r2
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021da:	1d1a      	adds	r2, r3, #4
 80021dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	4b9a      	ldr	r3, [pc, #616]	@ (8002450 <mbedtls_internal_aes_encrypt+0x65c>)
 80021e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021ec:	405a      	eors	r2, r3
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4619      	mov	r1, r3
 80021f6:	4b97      	ldr	r3, [pc, #604]	@ (8002454 <mbedtls_internal_aes_encrypt+0x660>)
 80021f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021fc:	405a      	eors	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	b2db      	uxtb	r3, r3
 8002204:	4619      	mov	r1, r3
 8002206:	4b94      	ldr	r3, [pc, #592]	@ (8002458 <mbedtls_internal_aes_encrypt+0x664>)
 8002208:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800220c:	405a      	eors	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	0e1b      	lsrs	r3, r3, #24
 8002212:	b2db      	uxtb	r3, r3
 8002214:	4619      	mov	r1, r3
 8002216:	4b8d      	ldr	r3, [pc, #564]	@ (800244c <mbedtls_internal_aes_encrypt+0x658>)
 8002218:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800221c:	4053      	eors	r3, r2
 800221e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002222:	1d1a      	adds	r2, r3, #4
 8002224:	633a      	str	r2, [r7, #48]	@ 0x30
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	4b88      	ldr	r3, [pc, #544]	@ (8002450 <mbedtls_internal_aes_encrypt+0x65c>)
 8002230:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002234:	405a      	eors	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	b2db      	uxtb	r3, r3
 800223c:	4619      	mov	r1, r3
 800223e:	4b85      	ldr	r3, [pc, #532]	@ (8002454 <mbedtls_internal_aes_encrypt+0x660>)
 8002240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002244:	405a      	eors	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	0c1b      	lsrs	r3, r3, #16
 800224a:	b2db      	uxtb	r3, r3
 800224c:	4619      	mov	r1, r3
 800224e:	4b82      	ldr	r3, [pc, #520]	@ (8002458 <mbedtls_internal_aes_encrypt+0x664>)
 8002250:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002254:	405a      	eors	r2, r3
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	0e1b      	lsrs	r3, r3, #24
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4619      	mov	r1, r3
 800225e:	4b7b      	ldr	r3, [pc, #492]	@ (800244c <mbedtls_internal_aes_encrypt+0x658>)
 8002260:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002264:	4053      	eors	r3, r2
 8002266:	62fb      	str	r3, [r7, #44]	@ 0x2c

    t.X[0] = *RK++ ^ \
 8002268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226a:	1d1a      	adds	r2, r3, #4
 800226c:	633a      	str	r2, [r7, #48]	@ 0x30
 800226e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8002270:	6a3a      	ldr	r2, [r7, #32]
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4611      	mov	r1, r2
 8002276:	4a79      	ldr	r2, [pc, #484]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 8002278:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 800227a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	b2db      	uxtb	r3, r3
 8002282:	4619      	mov	r1, r3
 8002284:	4b75      	ldr	r3, [pc, #468]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 8002286:	5c5b      	ldrb	r3, [r3, r1]
 8002288:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 800228a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 800228c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4619      	mov	r1, r3
 8002294:	4b71      	ldr	r3, [pc, #452]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 8002296:	5c5b      	ldrb	r3, [r3, r1]
 8002298:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 800229a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 800229c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229e:	0e1b      	lsrs	r3, r3, #24
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	4619      	mov	r1, r3
 80022a4:	4b6d      	ldr	r3, [pc, #436]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 80022a6:	5c5b      	ldrb	r3, [r3, r1]
 80022a8:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 80022aa:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 80022ac:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 80022ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b0:	1d1a      	adds	r2, r3, #4
 80022b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80022b4:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 80022b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	4611      	mov	r1, r2
 80022bc:	4a67      	ldr	r2, [pc, #412]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 80022be:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 80022c0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 80022c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4619      	mov	r1, r3
 80022ca:	4b64      	ldr	r3, [pc, #400]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 80022cc:	5c5b      	ldrb	r3, [r3, r1]
 80022ce:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 80022d0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 80022d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	4b60      	ldr	r3, [pc, #384]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 80022dc:	5c5b      	ldrb	r3, [r3, r1]
 80022de:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 80022e0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	0e1b      	lsrs	r3, r3, #24
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	4619      	mov	r1, r3
 80022ea:	4b5c      	ldr	r3, [pc, #368]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 80022ec:	5c5b      	ldrb	r3, [r3, r1]
 80022ee:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 80022f0:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 80022f2:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 80022f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f6:	1d1a      	adds	r2, r3, #4
 80022f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80022fa:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 80022fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	4611      	mov	r1, r2
 8002302:	4a56      	ldr	r2, [pc, #344]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 8002304:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8002306:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8002308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	b2db      	uxtb	r3, r3
 800230e:	4619      	mov	r1, r3
 8002310:	4b52      	ldr	r3, [pc, #328]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 8002312:	5c5b      	ldrb	r3, [r3, r1]
 8002314:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8002316:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	0c1b      	lsrs	r3, r3, #16
 800231c:	b2db      	uxtb	r3, r3
 800231e:	4619      	mov	r1, r3
 8002320:	4b4e      	ldr	r3, [pc, #312]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 8002322:	5c5b      	ldrb	r3, [r3, r1]
 8002324:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8002326:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	0e1b      	lsrs	r3, r3, #24
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4619      	mov	r1, r3
 8002330:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 8002332:	5c5b      	ldrb	r3, [r3, r1]
 8002334:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8002336:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8002338:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 800233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233c:	1d1a      	adds	r2, r3, #4
 800233e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002340:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8002342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	4611      	mov	r1, r2
 8002348:	4a44      	ldr	r2, [pc, #272]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 800234a:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 800234c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4619      	mov	r1, r3
 8002356:	4b41      	ldr	r3, [pc, #260]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 8002358:	5c5b      	ldrb	r3, [r3, r1]
 800235a:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 800235c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	b2db      	uxtb	r3, r3
 8002364:	4619      	mov	r1, r3
 8002366:	4b3d      	ldr	r3, [pc, #244]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 8002368:	5c5b      	ldrb	r3, [r3, r1]
 800236a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 800236c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 800236e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002370:	0e1b      	lsrs	r3, r3, #24
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4619      	mov	r1, r3
 8002376:	4b39      	ldr	r3, [pc, #228]	@ (800245c <mbedtls_internal_aes_encrypt+0x668>)
 8002378:	5c5b      	ldrb	r3, [r3, r1]
 800237a:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 800237c:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 800237e:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	0a1a      	lsrs	r2, r3, #8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3301      	adds	r3, #1
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	0c1a      	lsrs	r2, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3302      	adds	r3, #2
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	0e1a      	lsrs	r2, r3, #24
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3303      	adds	r3, #3
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3304      	adds	r3, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	0a1a      	lsrs	r2, r3, #8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3305      	adds	r3, #5
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	0c1a      	lsrs	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3306      	adds	r3, #6
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	0e1a      	lsrs	r2, r3, #24
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3307      	adds	r3, #7
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3308      	adds	r3, #8
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	0a1a      	lsrs	r2, r3, #8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3309      	adds	r3, #9
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	0c1a      	lsrs	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	330a      	adds	r3, #10
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	0e1a      	lsrs	r2, r3, #24
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	330b      	adds	r3, #11
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	330c      	adds	r3, #12
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	0a1a      	lsrs	r2, r3, #8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	330d      	adds	r3, #13
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	0c1a      	lsrs	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	330e      	adds	r3, #14
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	0e1a      	lsrs	r2, r3, #24
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	330f      	adds	r3, #15
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8002436:	f107 0310 	add.w	r3, r7, #16
 800243a:	2120      	movs	r1, #32
 800243c:	4618      	mov	r0, r3
 800243e:	f000 ff89 	bl	8003354 <mbedtls_platform_zeroize>

    return( 0 );
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3738      	adds	r7, #56	@ 0x38
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20002f14 	.word	0x20002f14
 8002450:	20002314 	.word	0x20002314
 8002454:	20002714 	.word	0x20002714
 8002458:	20002b14 	.word	0x20002b14
 800245c:	20002214 	.word	0x20002214

08002460 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	@ 0x38
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	633b      	str	r3, [r7, #48]	@ 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	3301      	adds	r3, #1
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	431a      	orrs	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3302      	adds	r3, #2
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	041b      	lsls	r3, r3, #16
 800248a:	431a      	orrs	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	3303      	adds	r3, #3
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	061b      	lsls	r3, r3, #24
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249a:	1d1a      	adds	r2, r3, #4
 800249c:	633a      	str	r2, [r7, #48]	@ 0x30
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4053      	eors	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	3304      	adds	r3, #4
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	3305      	adds	r3, #5
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	431a      	orrs	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	3306      	adds	r3, #6
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	041b      	lsls	r3, r3, #16
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3307      	adds	r3, #7
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d0:	1d1a      	adds	r2, r3, #4
 80024d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	4053      	eors	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	3308      	adds	r3, #8
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	3309      	adds	r3, #9
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	330a      	adds	r3, #10
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	041b      	lsls	r3, r3, #16
 80024f6:	431a      	orrs	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	330b      	adds	r3, #11
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	061b      	lsls	r3, r3, #24
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002506:	1d1a      	adds	r2, r3, #4
 8002508:	633a      	str	r2, [r7, #48]	@ 0x30
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	4053      	eors	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	330c      	adds	r3, #12
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	330d      	adds	r3, #13
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	431a      	orrs	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	330e      	adds	r3, #14
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	431a      	orrs	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	330f      	adds	r3, #15
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	4313      	orrs	r3, r2
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253c:	1d1a      	adds	r2, r3, #4
 800253e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4053      	eors	r3, r2
 8002546:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	105b      	asrs	r3, r3, #1
 800254e:	3b01      	subs	r3, #1
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
 8002552:	e122      	b.n	800279a <mbedtls_internal_aes_decrypt+0x33a>
    {
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002556:	1d1a      	adds	r2, r3, #4
 8002558:	633a      	str	r2, [r7, #48]	@ 0x30
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	4619      	mov	r1, r3
 8002562:	4bb0      	ldr	r3, [pc, #704]	@ (8002824 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002564:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002568:	405a      	eors	r2, r3
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	b2db      	uxtb	r3, r3
 8002570:	4619      	mov	r1, r3
 8002572:	4bad      	ldr	r3, [pc, #692]	@ (8002828 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002574:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002578:	405a      	eors	r2, r3
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	0c1b      	lsrs	r3, r3, #16
 800257e:	b2db      	uxtb	r3, r3
 8002580:	4619      	mov	r1, r3
 8002582:	4baa      	ldr	r3, [pc, #680]	@ (800282c <mbedtls_internal_aes_decrypt+0x3cc>)
 8002584:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002588:	405a      	eors	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	0e1b      	lsrs	r3, r3, #24
 800258e:	b2db      	uxtb	r3, r3
 8002590:	4619      	mov	r1, r3
 8002592:	4ba7      	ldr	r3, [pc, #668]	@ (8002830 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002594:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002598:	4053      	eors	r3, r2
 800259a:	623b      	str	r3, [r7, #32]
 800259c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	4619      	mov	r1, r3
 80025aa:	4b9e      	ldr	r3, [pc, #632]	@ (8002824 <mbedtls_internal_aes_decrypt+0x3c4>)
 80025ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025b0:	405a      	eors	r2, r3
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	4619      	mov	r1, r3
 80025ba:	4b9b      	ldr	r3, [pc, #620]	@ (8002828 <mbedtls_internal_aes_decrypt+0x3c8>)
 80025bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025c0:	405a      	eors	r2, r3
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4619      	mov	r1, r3
 80025ca:	4b98      	ldr	r3, [pc, #608]	@ (800282c <mbedtls_internal_aes_decrypt+0x3cc>)
 80025cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025d0:	405a      	eors	r2, r3
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	0e1b      	lsrs	r3, r3, #24
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	4619      	mov	r1, r3
 80025da:	4b95      	ldr	r3, [pc, #596]	@ (8002830 <mbedtls_internal_aes_decrypt+0x3d0>)
 80025dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025e0:	4053      	eors	r3, r2
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e6:	1d1a      	adds	r2, r3, #4
 80025e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4619      	mov	r1, r3
 80025f2:	4b8c      	ldr	r3, [pc, #560]	@ (8002824 <mbedtls_internal_aes_decrypt+0x3c4>)
 80025f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025f8:	405a      	eors	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	4b89      	ldr	r3, [pc, #548]	@ (8002828 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002604:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002608:	405a      	eors	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	b2db      	uxtb	r3, r3
 8002610:	4619      	mov	r1, r3
 8002612:	4b86      	ldr	r3, [pc, #536]	@ (800282c <mbedtls_internal_aes_decrypt+0x3cc>)
 8002614:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002618:	405a      	eors	r2, r3
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	0e1b      	lsrs	r3, r3, #24
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4619      	mov	r1, r3
 8002622:	4b83      	ldr	r3, [pc, #524]	@ (8002830 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002624:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002628:	4053      	eors	r3, r2
 800262a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	1d1a      	adds	r2, r3, #4
 8002630:	633a      	str	r2, [r7, #48]	@ 0x30
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4619      	mov	r1, r3
 800263a:	4b7a      	ldr	r3, [pc, #488]	@ (8002824 <mbedtls_internal_aes_decrypt+0x3c4>)
 800263c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002640:	405a      	eors	r2, r3
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	4b77      	ldr	r3, [pc, #476]	@ (8002828 <mbedtls_internal_aes_decrypt+0x3c8>)
 800264c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002650:	405a      	eors	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	b2db      	uxtb	r3, r3
 8002658:	4619      	mov	r1, r3
 800265a:	4b74      	ldr	r3, [pc, #464]	@ (800282c <mbedtls_internal_aes_decrypt+0x3cc>)
 800265c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002660:	405a      	eors	r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	0e1b      	lsrs	r3, r3, #24
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4619      	mov	r1, r3
 800266a:	4b71      	ldr	r3, [pc, #452]	@ (8002830 <mbedtls_internal_aes_decrypt+0x3d0>)
 800266c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002670:	4053      	eors	r3, r2
 8002672:	62fb      	str	r3, [r7, #44]	@ 0x2c
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8002674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002676:	1d1a      	adds	r2, r3, #4
 8002678:	633a      	str	r2, [r7, #48]	@ 0x30
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	4619      	mov	r1, r3
 8002682:	4b68      	ldr	r3, [pc, #416]	@ (8002824 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002684:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002688:	405a      	eors	r2, r3
 800268a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	b2db      	uxtb	r3, r3
 8002690:	4619      	mov	r1, r3
 8002692:	4b65      	ldr	r3, [pc, #404]	@ (8002828 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002694:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002698:	405a      	eors	r2, r3
 800269a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	4619      	mov	r1, r3
 80026a2:	4b62      	ldr	r3, [pc, #392]	@ (800282c <mbedtls_internal_aes_decrypt+0x3cc>)
 80026a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026a8:	405a      	eors	r2, r3
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	0e1b      	lsrs	r3, r3, #24
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	4619      	mov	r1, r3
 80026b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002830 <mbedtls_internal_aes_decrypt+0x3d0>)
 80026b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026b8:	4053      	eors	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026be:	1d1a      	adds	r2, r3, #4
 80026c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	4619      	mov	r1, r3
 80026ca:	4b56      	ldr	r3, [pc, #344]	@ (8002824 <mbedtls_internal_aes_decrypt+0x3c4>)
 80026cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026d0:	405a      	eors	r2, r3
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	4619      	mov	r1, r3
 80026da:	4b53      	ldr	r3, [pc, #332]	@ (8002828 <mbedtls_internal_aes_decrypt+0x3c8>)
 80026dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026e0:	405a      	eors	r2, r3
 80026e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	4619      	mov	r1, r3
 80026ea:	4b50      	ldr	r3, [pc, #320]	@ (800282c <mbedtls_internal_aes_decrypt+0x3cc>)
 80026ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026f0:	405a      	eors	r2, r3
 80026f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f4:	0e1b      	lsrs	r3, r3, #24
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4619      	mov	r1, r3
 80026fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002830 <mbedtls_internal_aes_decrypt+0x3d0>)
 80026fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002700:	4053      	eors	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002706:	1d1a      	adds	r2, r3, #4
 8002708:	633a      	str	r2, [r7, #48]	@ 0x30
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	4b44      	ldr	r3, [pc, #272]	@ (8002824 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002714:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002718:	405a      	eors	r2, r3
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4619      	mov	r1, r3
 8002722:	4b41      	ldr	r3, [pc, #260]	@ (8002828 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002724:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002728:	405a      	eors	r2, r3
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	b2db      	uxtb	r3, r3
 8002730:	4619      	mov	r1, r3
 8002732:	4b3e      	ldr	r3, [pc, #248]	@ (800282c <mbedtls_internal_aes_decrypt+0x3cc>)
 8002734:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002738:	405a      	eors	r2, r3
 800273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273c:	0e1b      	lsrs	r3, r3, #24
 800273e:	b2db      	uxtb	r3, r3
 8002740:	4619      	mov	r1, r3
 8002742:	4b3b      	ldr	r3, [pc, #236]	@ (8002830 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002744:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002748:	4053      	eors	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	1d1a      	adds	r2, r3, #4
 8002750:	633a      	str	r2, [r7, #48]	@ 0x30
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002756:	b2db      	uxtb	r3, r3
 8002758:	4619      	mov	r1, r3
 800275a:	4b32      	ldr	r3, [pc, #200]	@ (8002824 <mbedtls_internal_aes_decrypt+0x3c4>)
 800275c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002760:	405a      	eors	r2, r3
 8002762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4619      	mov	r1, r3
 800276a:	4b2f      	ldr	r3, [pc, #188]	@ (8002828 <mbedtls_internal_aes_decrypt+0x3c8>)
 800276c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002770:	405a      	eors	r2, r3
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	0c1b      	lsrs	r3, r3, #16
 8002776:	b2db      	uxtb	r3, r3
 8002778:	4619      	mov	r1, r3
 800277a:	4b2c      	ldr	r3, [pc, #176]	@ (800282c <mbedtls_internal_aes_decrypt+0x3cc>)
 800277c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002780:	405a      	eors	r2, r3
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	0e1b      	lsrs	r3, r3, #24
 8002786:	b2db      	uxtb	r3, r3
 8002788:	4619      	mov	r1, r3
 800278a:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <mbedtls_internal_aes_decrypt+0x3d0>)
 800278c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002790:	4053      	eors	r3, r2
 8002792:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8002794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002796:	3b01      	subs	r3, #1
 8002798:	637b      	str	r3, [r7, #52]	@ 0x34
 800279a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800279c:	2b00      	cmp	r3, #0
 800279e:	f73f aed9 	bgt.w	8002554 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 80027a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a4:	1d1a      	adds	r2, r3, #4
 80027a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	4619      	mov	r1, r3
 80027b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <mbedtls_internal_aes_decrypt+0x3c4>)
 80027b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027b6:	405a      	eors	r2, r3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4619      	mov	r1, r3
 80027c0:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <mbedtls_internal_aes_decrypt+0x3c8>)
 80027c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027c6:	405a      	eors	r2, r3
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	0c1b      	lsrs	r3, r3, #16
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	4619      	mov	r1, r3
 80027d0:	4b16      	ldr	r3, [pc, #88]	@ (800282c <mbedtls_internal_aes_decrypt+0x3cc>)
 80027d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027d6:	405a      	eors	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	0e1b      	lsrs	r3, r3, #24
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4619      	mov	r1, r3
 80027e0:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <mbedtls_internal_aes_decrypt+0x3d0>)
 80027e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027e6:	4053      	eors	r3, r2
 80027e8:	623b      	str	r3, [r7, #32]
 80027ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ec:	1d1a      	adds	r2, r3, #4
 80027ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4619      	mov	r1, r3
 80027f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <mbedtls_internal_aes_decrypt+0x3c4>)
 80027fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027fe:	405a      	eors	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	b2db      	uxtb	r3, r3
 8002806:	4619      	mov	r1, r3
 8002808:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <mbedtls_internal_aes_decrypt+0x3c8>)
 800280a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800280e:	405a      	eors	r2, r3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	0c1b      	lsrs	r3, r3, #16
 8002814:	b2db      	uxtb	r3, r3
 8002816:	4619      	mov	r1, r3
 8002818:	4b04      	ldr	r3, [pc, #16]	@ (800282c <mbedtls_internal_aes_decrypt+0x3cc>)
 800281a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800281e:	405a      	eors	r2, r3
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	e007      	b.n	8002834 <mbedtls_internal_aes_decrypt+0x3d4>
 8002824:	20003414 	.word	0x20003414
 8002828:	20003814 	.word	0x20003814
 800282c:	20003c14 	.word	0x20003c14
 8002830:	20004014 	.word	0x20004014
 8002834:	0e1b      	lsrs	r3, r3, #24
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4619      	mov	r1, r3
 800283a:	4b9f      	ldr	r3, [pc, #636]	@ (8002ab8 <mbedtls_internal_aes_decrypt+0x658>)
 800283c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002840:	4053      	eors	r3, r2
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
 8002844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002846:	1d1a      	adds	r2, r3, #4
 8002848:	633a      	str	r2, [r7, #48]	@ 0x30
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	4b9a      	ldr	r3, [pc, #616]	@ (8002abc <mbedtls_internal_aes_decrypt+0x65c>)
 8002854:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002858:	405a      	eors	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	b2db      	uxtb	r3, r3
 8002860:	4619      	mov	r1, r3
 8002862:	4b97      	ldr	r3, [pc, #604]	@ (8002ac0 <mbedtls_internal_aes_decrypt+0x660>)
 8002864:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002868:	405a      	eors	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	b2db      	uxtb	r3, r3
 8002870:	4619      	mov	r1, r3
 8002872:	4b94      	ldr	r3, [pc, #592]	@ (8002ac4 <mbedtls_internal_aes_decrypt+0x664>)
 8002874:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002878:	405a      	eors	r2, r3
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	0e1b      	lsrs	r3, r3, #24
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4619      	mov	r1, r3
 8002882:	4b8d      	ldr	r3, [pc, #564]	@ (8002ab8 <mbedtls_internal_aes_decrypt+0x658>)
 8002884:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002888:	4053      	eors	r3, r2
 800288a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800288c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288e:	1d1a      	adds	r2, r3, #4
 8002890:	633a      	str	r2, [r7, #48]	@ 0x30
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	4619      	mov	r1, r3
 800289a:	4b88      	ldr	r3, [pc, #544]	@ (8002abc <mbedtls_internal_aes_decrypt+0x65c>)
 800289c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80028a0:	405a      	eors	r2, r3
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4619      	mov	r1, r3
 80028aa:	4b85      	ldr	r3, [pc, #532]	@ (8002ac0 <mbedtls_internal_aes_decrypt+0x660>)
 80028ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80028b0:	405a      	eors	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	0c1b      	lsrs	r3, r3, #16
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	4b82      	ldr	r3, [pc, #520]	@ (8002ac4 <mbedtls_internal_aes_decrypt+0x664>)
 80028bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80028c0:	405a      	eors	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	0e1b      	lsrs	r3, r3, #24
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	4619      	mov	r1, r3
 80028ca:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab8 <mbedtls_internal_aes_decrypt+0x658>)
 80028cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80028d0:	4053      	eors	r3, r2
 80028d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    t.X[0] = *RK++ ^ \
 80028d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d6:	1d1a      	adds	r2, r3, #4
 80028d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80028da:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	4611      	mov	r1, r2
 80028e2:	4a79      	ldr	r2, [pc, #484]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 80028e4:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 80028e6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 80028e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4619      	mov	r1, r3
 80028f0:	4b75      	ldr	r3, [pc, #468]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 80028f2:	5c5b      	ldrb	r3, [r3, r1]
 80028f4:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 80028f6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 80028f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fa:	0c1b      	lsrs	r3, r3, #16
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4619      	mov	r1, r3
 8002900:	4b71      	ldr	r3, [pc, #452]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 8002902:	5c5b      	ldrb	r3, [r3, r1]
 8002904:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8002906:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	0e1b      	lsrs	r3, r3, #24
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4619      	mov	r1, r3
 8002910:	4b6d      	ldr	r3, [pc, #436]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 8002912:	5c5b      	ldrb	r3, [r3, r1]
 8002914:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8002916:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8002918:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 800291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291c:	1d1a      	adds	r2, r3, #4
 800291e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002920:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8002922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	4611      	mov	r1, r2
 8002928:	4a67      	ldr	r2, [pc, #412]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 800292a:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 800292c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4619      	mov	r1, r3
 8002936:	4b64      	ldr	r3, [pc, #400]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 8002938:	5c5b      	ldrb	r3, [r3, r1]
 800293a:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 800293c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 800293e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	b2db      	uxtb	r3, r3
 8002944:	4619      	mov	r1, r3
 8002946:	4b60      	ldr	r3, [pc, #384]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 8002948:	5c5b      	ldrb	r3, [r3, r1]
 800294a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 800294c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 800294e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002950:	0e1b      	lsrs	r3, r3, #24
 8002952:	b2db      	uxtb	r3, r3
 8002954:	4619      	mov	r1, r3
 8002956:	4b5c      	ldr	r3, [pc, #368]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 8002958:	5c5b      	ldrb	r3, [r3, r1]
 800295a:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 800295c:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 800295e:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 8002960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002962:	1d1a      	adds	r2, r3, #4
 8002964:	633a      	str	r2, [r7, #48]	@ 0x30
 8002966:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8002968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	4611      	mov	r1, r2
 800296e:	4a56      	ldr	r2, [pc, #344]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 8002970:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8002972:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	b2db      	uxtb	r3, r3
 800297a:	4619      	mov	r1, r3
 800297c:	4b52      	ldr	r3, [pc, #328]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 800297e:	5c5b      	ldrb	r3, [r3, r1]
 8002980:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8002982:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	0c1b      	lsrs	r3, r3, #16
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4619      	mov	r1, r3
 800298c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 800298e:	5c5b      	ldrb	r3, [r3, r1]
 8002990:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8002992:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 8002994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002996:	0e1b      	lsrs	r3, r3, #24
 8002998:	b2db      	uxtb	r3, r3
 800299a:	4619      	mov	r1, r3
 800299c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 800299e:	5c5b      	ldrb	r3, [r3, r1]
 80029a0:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 80029a2:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 80029a4:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 80029a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a8:	1d1a      	adds	r2, r3, #4
 80029aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80029ac:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 80029ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	4611      	mov	r1, r2
 80029b4:	4a44      	ldr	r2, [pc, #272]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 80029b6:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 80029b8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	4619      	mov	r1, r3
 80029c2:	4b41      	ldr	r3, [pc, #260]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 80029c4:	5c5b      	ldrb	r3, [r3, r1]
 80029c6:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 80029c8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4619      	mov	r1, r3
 80029d2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 80029d4:	5c5b      	ldrb	r3, [r3, r1]
 80029d6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 80029d8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	0e1b      	lsrs	r3, r3, #24
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	4619      	mov	r1, r3
 80029e2:	4b39      	ldr	r3, [pc, #228]	@ (8002ac8 <mbedtls_internal_aes_decrypt+0x668>)
 80029e4:	5c5b      	ldrb	r3, [r3, r1]
 80029e6:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 80029e8:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 80029ea:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	0a1a      	lsrs	r2, r3, #8
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3301      	adds	r3, #1
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	0c1a      	lsrs	r2, r3, #16
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3302      	adds	r3, #2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	0e1a      	lsrs	r2, r3, #24
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3303      	adds	r3, #3
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	0a1a      	lsrs	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3305      	adds	r3, #5
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	0c1a      	lsrs	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3306      	adds	r3, #6
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	0e1a      	lsrs	r2, r3, #24
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3307      	adds	r3, #7
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3308      	adds	r3, #8
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	0a1a      	lsrs	r2, r3, #8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3309      	adds	r3, #9
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	0c1a      	lsrs	r2, r3, #16
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	330a      	adds	r3, #10
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	0e1a      	lsrs	r2, r3, #24
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	330b      	adds	r3, #11
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	0a1a      	lsrs	r2, r3, #8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	330d      	adds	r3, #13
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	0c1a      	lsrs	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	330e      	adds	r3, #14
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	0e1a      	lsrs	r2, r3, #24
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	330f      	adds	r3, #15
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8002aa2:	f107 0310 	add.w	r3, r7, #16
 8002aa6:	2120      	movs	r1, #32
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fc53 	bl	8003354 <mbedtls_platform_zeroize>

    return( 0 );
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3738      	adds	r7, #56	@ 0x38
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20004014 	.word	0x20004014
 8002abc:	20003414 	.word	0x20003414
 8002ac0:	20003814 	.word	0x20003814
 8002ac4:	20003c14 	.word	0x20003c14
 8002ac8:	20003314 	.word	0x20003314

08002acc <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d106      	bne.n	8002aee <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f7ff f985 	bl	8001df4 <mbedtls_internal_aes_encrypt>
 8002aea:	4603      	mov	r3, r0
 8002aec:	e005      	b.n	8002afa <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7ff fcb4 	bl	8002460 <mbedtls_internal_aes_decrypt>
 8002af8:	4603      	mov	r3, r0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <mbedtls_des_init>:
    {                                                   \
        uint32_t t = (a); (a) = (b); (b) = t; t = 0;    \
    } while( 0 )

void mbedtls_des_init( mbedtls_des_context *ctx )
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_des_context ) );
 8002b0a:	2280      	movs	r2, #128	@ 0x80
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f003 f816 	bl	8005b40 <memset>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <mbedtls_des_setkey>:
    return( 0 );
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey( uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t X, Y, T;

    X = MBEDTLS_GET_UINT32_BE( key, 0 );
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	061a      	lsls	r2, r3, #24
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	041b      	lsls	r3, r3, #16
 8002b34:	431a      	orrs	r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	3302      	adds	r3, #2
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	3203      	adds	r2, #3
 8002b44:	7812      	ldrb	r2, [r2, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
    Y = MBEDTLS_GET_UINT32_BE( key, 4 );
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	061a      	lsls	r2, r3, #24
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	3305      	adds	r3, #5
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	3306      	adds	r3, #6
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	4313      	orrs	r3, r2
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	3207      	adds	r2, #7
 8002b6a:	7812      	ldrb	r2, [r2, #0]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

    /*
     * Permuted Choice 1
     */
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	091a      	lsrs	r2, r3, #4
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4053      	eors	r3, r2
 8002b78:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4053      	eors	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4053      	eors	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
    T =  ((Y      ) ^ X) & 0x10101010;  X ^= T; Y ^= (T      );
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4053      	eors	r3, r2
 8002b96:	f003 3310 	and.w	r3, r3, #269488144	@ 0x10101010
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	4053      	eors	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4053      	eors	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	4a55      	ldr	r2, [pc, #340]	@ (8002d08 <mbedtls_des_setkey+0x1ec>)
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	00da      	lsls	r2, r3, #3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	4951      	ldr	r1, [pc, #324]	@ (8002d08 <mbedtls_des_setkey+0x1ec>)
 8002bc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	431a      	orrs	r2, r3
        | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	0c1b      	lsrs	r3, r3, #16
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	494c      	ldr	r1, [pc, #304]	@ (8002d08 <mbedtls_des_setkey+0x1ec>)
 8002bd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	0e1b      	lsrs	r3, r3, #24
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	4948      	ldr	r1, [pc, #288]	@ (8002d08 <mbedtls_des_setkey+0x1ec>)
 8002be8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bec:	431a      	orrs	r2, r3
        | (LHs[ (X >>  5) & 0xF] << 7) | (LHs[ (X >> 13) & 0xF ] << 6)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	4944      	ldr	r1, [pc, #272]	@ (8002d08 <mbedtls_des_setkey+0x1ec>)
 8002bf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bfc:	01db      	lsls	r3, r3, #7
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	0b5b      	lsrs	r3, r3, #13
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	493f      	ldr	r1, [pc, #252]	@ (8002d08 <mbedtls_des_setkey+0x1ec>)
 8002c0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c0e:	019b      	lsls	r3, r3, #6
 8002c10:	431a      	orrs	r2, r3
        | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	0d5b      	lsrs	r3, r3, #21
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	493b      	ldr	r1, [pc, #236]	@ (8002d08 <mbedtls_des_setkey+0x1ec>)
 8002c1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c20:	015b      	lsls	r3, r3, #5
 8002c22:	431a      	orrs	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	0f5b      	lsrs	r3, r3, #29
 8002c28:	4937      	ldr	r1, [pc, #220]	@ (8002d08 <mbedtls_des_setkey+0x1ec>)
 8002c2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c2e:	011b      	lsls	r3, r3, #4
    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	4a33      	ldr	r2, [pc, #204]	@ (8002d0c <mbedtls_des_setkey+0x1f0>)
 8002c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c42:	00da      	lsls	r2, r3, #3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	0a5b      	lsrs	r3, r3, #9
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	492f      	ldr	r1, [pc, #188]	@ (8002d0c <mbedtls_des_setkey+0x1f0>)
 8002c4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	0c5b      	lsrs	r3, r3, #17
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	492b      	ldr	r1, [pc, #172]	@ (8002d0c <mbedtls_des_setkey+0x1f0>)
 8002c60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	0e5b      	lsrs	r3, r3, #25
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	4926      	ldr	r1, [pc, #152]	@ (8002d0c <mbedtls_des_setkey+0x1f0>)
 8002c72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c76:	431a      	orrs	r2, r3
        | (RHs[ (Y >>  4) & 0xF] << 7) | (RHs[ (Y >> 12) & 0xF ] << 6)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	4922      	ldr	r1, [pc, #136]	@ (8002d0c <mbedtls_des_setkey+0x1f0>)
 8002c82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c86:	01db      	lsls	r3, r3, #7
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	0b1b      	lsrs	r3, r3, #12
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	491e      	ldr	r1, [pc, #120]	@ (8002d0c <mbedtls_des_setkey+0x1f0>)
 8002c94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c98:	019b      	lsls	r3, r3, #6
 8002c9a:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	0d1b      	lsrs	r3, r3, #20
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	4919      	ldr	r1, [pc, #100]	@ (8002d0c <mbedtls_des_setkey+0x1f0>)
 8002ca6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002caa:	015b      	lsls	r3, r3, #5
 8002cac:	431a      	orrs	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	0f1b      	lsrs	r3, r3, #28
 8002cb2:	4916      	ldr	r1, [pc, #88]	@ (8002d0c <mbedtls_des_setkey+0x1f0>)
 8002cb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cb8:	011b      	lsls	r3, r3, #4
    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

    X &= 0x0FFFFFFF;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002cc4:	613b      	str	r3, [r7, #16]
    Y &= 0x0FFFFFFF;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002ccc:	60fb      	str	r3, [r7, #12]

    /*
     * calculate subkeys
     */
    for( i = 0; i < 16; i++ )
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e113      	b.n	8002efc <mbedtls_des_setkey+0x3e0>
    {
        if( i < 2 || i == 8 || i == 15 )
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	dd05      	ble.n	8002ce6 <mbedtls_des_setkey+0x1ca>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d002      	beq.n	8002ce6 <mbedtls_des_setkey+0x1ca>
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b0f      	cmp	r3, #15
 8002ce4:	d114      	bne.n	8002d10 <mbedtls_des_setkey+0x1f4>
        {
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	005a      	lsls	r2, r3, #1
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	0edb      	lsrs	r3, r3, #27
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002cf4:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	005a      	lsls	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	0edb      	lsrs	r3, r3, #27
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e013      	b.n	8002d30 <mbedtls_des_setkey+0x214>
 8002d08:	080063c8 	.word	0x080063c8
 8002d0c:	08006408 	.word	0x08006408
        }
        else
        {
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	009a      	lsls	r2, r3, #2
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	0e9b      	lsrs	r3, r3, #26
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002d1e:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	009a      	lsls	r2, r3, #2
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	0e9b      	lsrs	r3, r3, #26
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002d2e:	60fb      	str	r3, [r7, #12]
        }

        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	f003 5210 	and.w	r2, r3, #603979776	@ 0x24000000
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	071b      	lsls	r3, r3, #28
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d40:	431a      	orrs	r2, r3
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	039b      	lsls	r3, r3, #14
 8002d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	049b      	lsls	r3, r3, #18
 8002d50:	f003 7302 	and.w	r3, r3, #34078720	@ 0x2080000
 8002d54:	431a      	orrs	r2, r3
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	019b      	lsls	r3, r3, #6
 8002d5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	025b      	lsls	r3, r3, #9
 8002d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d68:	431a      	orrs	r2, r3
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d72:	431a      	orrs	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	029b      	lsls	r3, r3, #10
 8002d78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d7c:	431a      	orrs	r2, r3
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	431a      	orrs	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	0a9b      	lsrs	r3, r3, #10
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d90:	431a      	orrs	r2, r3
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	0b5b      	lsrs	r3, r3, #13
 8002d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002da4:	431a      	orrs	r2, r3
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dae:	431a      	orrs	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db8:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	0b9b      	lsrs	r3, r3, #14
 8002dbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dca:	431a      	orrs	r2, r3
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	0a9b      	lsrs	r3, r3, #10
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	431a      	orrs	r2, r3
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	08db      	lsrs	r3, r3, #3
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	431a      	orrs	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0c9b      	lsrs	r3, r3, #18
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	431a      	orrs	r2, r3
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	0e9b      	lsrs	r3, r3, #26
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	ea42 0103 	orr.w	r1, r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	0e1b      	lsrs	r3, r3, #24
 8002e04:	f003 0201 	and.w	r2, r3, #1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	1d18      	adds	r0, r3, #4
 8002e0c:	6078      	str	r0, [r7, #4]
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 8002e0e:	430a      	orrs	r2, r1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 8002e10:	601a      	str	r2, [r3, #0]

        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	03db      	lsls	r3, r3, #15
 8002e16:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	045b      	lsls	r3, r3, #17
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	431a      	orrs	r2, r3
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	029b      	lsls	r3, r3, #10
 8002e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	059b      	lsls	r3, r3, #22
 8002e32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e36:	431a      	orrs	r2, r3
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e40:	431a      	orrs	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e4a:	431a      	orrs	r2, r3
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e54:	431a      	orrs	r2, r3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	02db      	lsls	r3, r3, #11
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5e:	431a      	orrs	r2, r3
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	099b      	lsrs	r3, r3, #6
 8002e6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e72:	431a      	orrs	r2, r3
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	03db      	lsls	r3, r3, #15
 8002e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e86:	431a      	orrs	r2, r3
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e9a:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	0b99      	lsrs	r1, r3, #14
 8002ea0:	f640 0308 	movw	r3, #2056	@ 0x808
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	0a5b      	lsrs	r3, r3, #9
 8002eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb0:	431a      	orrs	r2, r3
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	01db      	lsls	r3, r3, #7
 8002ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec2:	431a      	orrs	r2, r3
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	09db      	lsrs	r3, r3, #7
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	08db      	lsrs	r3, r3, #3
 8002ed2:	f003 0311 	and.w	r3, r3, #17
 8002ed6:	431a      	orrs	r2, r3
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	ea42 0103 	orr.w	r1, r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	0d5b      	lsrs	r3, r3, #21
 8002ee8:	f003 0202 	and.w	r2, r3, #2
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1d18      	adds	r0, r3, #4
 8002ef0:	6078      	str	r0, [r7, #4]
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 8002ef2:	430a      	orrs	r2, r1
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8002ef4:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i++ )
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2b0f      	cmp	r3, #15
 8002f00:	f77f aee8 	ble.w	8002cd4 <mbedtls_des_setkey+0x1b8>
    }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <mbedtls_des_setkey_enc>:

/*
 * DES key schedule (56-bit, encryption)
 */
int mbedtls_des_setkey_enc( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
    mbedtls_des_setkey( ctx->sk, key );
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6839      	ldr	r1, [r7, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fdfc 	bl	8002b1c <mbedtls_des_setkey>

    return( 0 );
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <mbedtls_des_setkey_dec>:

/*
 * DES key schedule (56-bit, decryption)
 */
int mbedtls_des_setkey_dec( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b086      	sub	sp, #24
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
    int i;

    mbedtls_des_setkey( ctx->sk, key );
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6839      	ldr	r1, [r7, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fded 	bl	8002b1c <mbedtls_des_setkey>

    for( i = 0; i < 16; i += 2 )
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	e034      	b.n	8002fb2 <mbedtls_des_setkey_dec+0x84>
    {
        SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f1c3 021e 	rsb	r2, r3, #30
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f1c3 021e 	rsb	r2, r3, #30
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6939      	ldr	r1, [r7, #16]
 8002f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
        SWAP( ctx->sk[i + 1], ctx->sk[31 - i] );
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f1c3 011f 	rsb	r1, r3, #31
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f1c3 021f 	rsb	r2, r3, #31
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
    for( i = 0; i < 16; i += 2 )
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	3302      	adds	r3, #2
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b0f      	cmp	r3, #15
 8002fb6:	ddc7      	ble.n	8002f48 <mbedtls_des_setkey_dec+0x1a>
    }

    return( 0 );
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <mbedtls_des_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)
int mbedtls_des_crypt_ecb( mbedtls_des_context *ctx,
                    const unsigned char input[8],
                    unsigned char output[8] )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b08b      	sub	sp, #44	@ 0x2c
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	61bb      	str	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE( input, 0 );
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	061a      	lsls	r2, r3, #24
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	4313      	orrs	r3, r2
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	3203      	adds	r2, #3
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	623b      	str	r3, [r7, #32]
    Y = MBEDTLS_GET_UINT32_BE( input, 4 );
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	061a      	lsls	r2, r3, #24
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	3305      	adds	r3, #5
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	431a      	orrs	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3306      	adds	r3, #6
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	4313      	orrs	r3, r2
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	3207      	adds	r2, #7
 8003018:	7812      	ldrb	r2, [r2, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	61fb      	str	r3, [r7, #28]

    DES_IP( X, Y );
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	091a      	lsrs	r2, r3, #4
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4053      	eors	r3, r2
 8003026:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	4053      	eors	r3, r2
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	6a3a      	ldr	r2, [r7, #32]
 800303a:	4053      	eors	r3, r2
 800303c:	623b      	str	r3, [r7, #32]
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	0c1a      	lsrs	r2, r3, #16
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4053      	eors	r3, r2
 8003046:	b29b      	uxth	r3, r3
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	4053      	eors	r3, r2
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	6a3a      	ldr	r2, [r7, #32]
 8003058:	4053      	eors	r3, r2
 800305a:	623b      	str	r3, [r7, #32]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	089a      	lsrs	r2, r3, #2
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	4053      	eors	r3, r2
 8003064:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	6a3a      	ldr	r2, [r7, #32]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	4053      	eors	r3, r2
 8003070:	623b      	str	r3, [r7, #32]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	4053      	eors	r3, r2
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	0a1a      	lsrs	r2, r3, #8
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	4053      	eors	r3, r2
 8003084:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	6a3a      	ldr	r2, [r7, #32]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4053      	eors	r3, r2
 8003090:	623b      	str	r3, [r7, #32]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	4053      	eors	r3, r2
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	6a3a      	ldr	r2, [r7, #32]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4053      	eors	r3, r2
 80030aa:	f003 33aa 	and.w	r3, r3, #2863311530	@ 0xaaaaaaaa
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	4053      	eors	r3, r2
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	6a3a      	ldr	r2, [r7, #32]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	4053      	eors	r3, r2
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80030c6:	623b      	str	r3, [r7, #32]

    for( i = 0; i < 8; i++ )
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80030cc:	e0a6      	b.n	800321c <mbedtls_des_crypt_ecb+0x258>
    {
        DES_ROUND( Y, X );
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	1d1a      	adds	r2, r3, #4
 80030d2:	61ba      	str	r2, [r7, #24]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	4053      	eors	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030e2:	4a94      	ldr	r2, [pc, #592]	@ (8003334 <mbedtls_des_crypt_ecb+0x370>)
 80030e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030f0:	4991      	ldr	r1, [pc, #580]	@ (8003338 <mbedtls_des_crypt_ecb+0x374>)
 80030f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030f6:	405a      	eors	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	0c1b      	lsrs	r3, r3, #16
 80030fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003100:	498e      	ldr	r1, [pc, #568]	@ (800333c <mbedtls_des_crypt_ecb+0x378>)
 8003102:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003106:	405a      	eors	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	0e1b      	lsrs	r3, r3, #24
 800310c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003110:	498b      	ldr	r1, [pc, #556]	@ (8003340 <mbedtls_des_crypt_ecb+0x37c>)
 8003112:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003116:	4053      	eors	r3, r2
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	4053      	eors	r3, r2
 800311c:	623b      	str	r3, [r7, #32]
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	1d1a      	adds	r2, r3, #4
 8003122:	61ba      	str	r2, [r7, #24]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	ea4f 1333 	mov.w	r3, r3, ror #4
 800312c:	4053      	eors	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003136:	4a83      	ldr	r2, [pc, #524]	@ (8003344 <mbedtls_des_crypt_ecb+0x380>)
 8003138:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003144:	4980      	ldr	r1, [pc, #512]	@ (8003348 <mbedtls_des_crypt_ecb+0x384>)
 8003146:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800314a:	405a      	eors	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003154:	497d      	ldr	r1, [pc, #500]	@ (800334c <mbedtls_des_crypt_ecb+0x388>)
 8003156:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800315a:	405a      	eors	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	0e1b      	lsrs	r3, r3, #24
 8003160:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003164:	497a      	ldr	r1, [pc, #488]	@ (8003350 <mbedtls_des_crypt_ecb+0x38c>)
 8003166:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800316a:	4053      	eors	r3, r2
 800316c:	6a3a      	ldr	r2, [r7, #32]
 800316e:	4053      	eors	r3, r2
 8003170:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	1d1a      	adds	r2, r3, #4
 8003176:	61ba      	str	r2, [r7, #24]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a3a      	ldr	r2, [r7, #32]
 800317c:	4053      	eors	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003186:	4a6b      	ldr	r2, [pc, #428]	@ (8003334 <mbedtls_des_crypt_ecb+0x370>)
 8003188:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003194:	4968      	ldr	r1, [pc, #416]	@ (8003338 <mbedtls_des_crypt_ecb+0x374>)
 8003196:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800319a:	405a      	eors	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	0c1b      	lsrs	r3, r3, #16
 80031a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031a4:	4965      	ldr	r1, [pc, #404]	@ (800333c <mbedtls_des_crypt_ecb+0x378>)
 80031a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031aa:	405a      	eors	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	0e1b      	lsrs	r3, r3, #24
 80031b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031b4:	4962      	ldr	r1, [pc, #392]	@ (8003340 <mbedtls_des_crypt_ecb+0x37c>)
 80031b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031ba:	4053      	eors	r3, r2
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	4053      	eors	r3, r2
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	1d1a      	adds	r2, r3, #4
 80031c6:	61ba      	str	r2, [r7, #24]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	ea4f 1333 	mov.w	r3, r3, ror #4
 80031d0:	4053      	eors	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031da:	4a5a      	ldr	r2, [pc, #360]	@ (8003344 <mbedtls_des_crypt_ecb+0x380>)
 80031dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031e8:	4957      	ldr	r1, [pc, #348]	@ (8003348 <mbedtls_des_crypt_ecb+0x384>)
 80031ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031ee:	405a      	eors	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	0c1b      	lsrs	r3, r3, #16
 80031f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031f8:	4954      	ldr	r1, [pc, #336]	@ (800334c <mbedtls_des_crypt_ecb+0x388>)
 80031fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031fe:	405a      	eors	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	0e1b      	lsrs	r3, r3, #24
 8003204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003208:	4951      	ldr	r1, [pc, #324]	@ (8003350 <mbedtls_des_crypt_ecb+0x38c>)
 800320a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800320e:	4053      	eors	r3, r2
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	4053      	eors	r3, r2
 8003214:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	3301      	adds	r3, #1
 800321a:	627b      	str	r3, [r7, #36]	@ 0x24
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	2b07      	cmp	r3, #7
 8003220:	f77f af55 	ble.w	80030ce <mbedtls_des_crypt_ecb+0x10a>
    }

    DES_FP( Y, X );
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	ea4f 0373 	mov.w	r3, r3, ror #1
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	4053      	eors	r3, r2
 8003232:	f003 33aa 	and.w	r3, r3, #2863311530	@ 0xaaaaaaaa
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	4053      	eors	r3, r2
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	6a3a      	ldr	r2, [r7, #32]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	4053      	eors	r3, r2
 8003246:	623b      	str	r3, [r7, #32]
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	ea4f 0373 	mov.w	r3, r3, ror #1
 800324e:	623b      	str	r3, [r7, #32]
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	0a1a      	lsrs	r2, r3, #8
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	4053      	eors	r3, r2
 8003258:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	4053      	eors	r3, r2
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	6a3a      	ldr	r2, [r7, #32]
 800326c:	4053      	eors	r3, r2
 800326e:	623b      	str	r3, [r7, #32]
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	089a      	lsrs	r2, r3, #2
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	4053      	eors	r3, r2
 8003278:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	4053      	eors	r3, r2
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	4053      	eors	r3, r2
 800328e:	623b      	str	r3, [r7, #32]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	0c1a      	lsrs	r2, r3, #16
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	4053      	eors	r3, r2
 8003298:	b29b      	uxth	r3, r3
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	6a3a      	ldr	r2, [r7, #32]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	4053      	eors	r3, r2
 80032a2:	623b      	str	r3, [r7, #32]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	4053      	eors	r3, r2
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	091a      	lsrs	r2, r3, #4
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	4053      	eors	r3, r2
 80032b6:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	6a3a      	ldr	r2, [r7, #32]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	4053      	eors	r3, r2
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	4053      	eors	r3, r2
 80032cc:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_BE( Y, output, 0 );
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	0e1b      	lsrs	r3, r3, #24
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	0c1a      	lsrs	r2, r3, #16
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3301      	adds	r3, #1
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	0a1a      	lsrs	r2, r3, #8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3302      	adds	r3, #2
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3303      	adds	r3, #3
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_BE( X, output, 4 );
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	0e1a      	lsrs	r2, r3, #24
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	0c1a      	lsrs	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3305      	adds	r3, #5
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	0a1a      	lsrs	r2, r3, #8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3306      	adds	r3, #6
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3307      	adds	r3, #7
 8003322:	6a3a      	ldr	r2, [r7, #32]
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	372c      	adds	r7, #44	@ 0x2c
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	080062c8 	.word	0x080062c8
 8003338:	080060c8 	.word	0x080060c8
 800333c:	08005ec8 	.word	0x08005ec8
 8003340:	08005cc8 	.word	0x08005cc8
 8003344:	080061c8 	.word	0x080061c8
 8003348:	08005fc8 	.word	0x08005fc8
 800334c:	08005dc8 	.word	0x08005dc8
 8003350:	08005bc8 	.word	0x08005bc8

08003354 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <mbedtls_platform_zeroize+0x1c>
        memset_func( buf, 0, len );
 8003364:	4b04      	ldr	r3, [pc, #16]	@ (8003378 <mbedtls_platform_zeroize+0x24>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	2100      	movs	r1, #0
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000014 	.word	0x20000014

0800337c <User_Init>:

mbedtls_aes_context aes_ctx;
mbedtls_des_context des_ctx;
int key_length = 128;

void User_Init() {
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
	mbedtls_aes_init(&aes_ctx);
 8003380:	4803      	ldr	r0, [pc, #12]	@ (8003390 <User_Init+0x14>)
 8003382:	f7fe f9ed 	bl	8001760 <mbedtls_aes_init>
	mbedtls_des_init(&des_ctx);
 8003386:	4803      	ldr	r0, [pc, #12]	@ (8003394 <User_Init+0x18>)
 8003388:	f7ff fbbb 	bl	8002b02 <mbedtls_des_init>
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20004440 	.word	0x20004440
 8003394:	20004558 	.word	0x20004558

08003398 <Echo>:
 }

 */

NutStatus_e Echo(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
	uint32_t i;
	uint8_t tempu8;
	*result_length = received_data_length;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < received_data_length; i++) {
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e00c      	b.n	80033cc <Echo+0x34>
		tempu8 = received_data_ptr[i];
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	4413      	add	r3, r2
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	74fb      	strb	r3, [r7, #19]
		result_buffer_ptr[i] = tempu8;
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	4413      	add	r3, r2
 80033c2:	7cfa      	ldrb	r2, [r7, #19]
 80033c4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < received_data_length; i++) {
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	3301      	adds	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d3ee      	bcc.n	80033b2 <Echo+0x1a>
	}
	return NUT_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <AES_SetEncryptionKey>:

NutStatus_e AES_SetEncryptionKey(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
	*result_length = 0;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
	if (mbedtls_aes_setkey_enc(&aes_ctx, received_data_ptr, key_length))
 80033f4:	4b08      	ldr	r3, [pc, #32]	@ (8003418 <AES_SetEncryptionKey+0x38>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	68f9      	ldr	r1, [r7, #12]
 80033fc:	4807      	ldr	r0, [pc, #28]	@ (800341c <AES_SetEncryptionKey+0x3c>)
 80033fe:	f7fe f9cf 	bl	80017a0 <mbedtls_aes_setkey_enc>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <AES_SetEncryptionKey+0x2c>
		return NUT_ERROR;
 8003408:	2302      	movs	r3, #2
 800340a:	e000      	b.n	800340e <AES_SetEncryptionKey+0x2e>
	return NUT_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000018 	.word	0x20000018
 800341c:	20004440 	.word	0x20004440

08003420 <AES_SetDecryptionKey>:

NutStatus_e AES_SetDecryptionKey(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
	*result_length = 0;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
	if (mbedtls_aes_setkey_dec(&aes_ctx, received_data_ptr, key_length))
 8003434:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <AES_SetDecryptionKey+0x38>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	68f9      	ldr	r1, [r7, #12]
 800343c:	4807      	ldr	r0, [pc, #28]	@ (800345c <AES_SetDecryptionKey+0x3c>)
 800343e:	f7fe fba3 	bl	8001b88 <mbedtls_aes_setkey_dec>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <AES_SetDecryptionKey+0x2c>
		return NUT_ERROR;
 8003448:	2302      	movs	r3, #2
 800344a:	e000      	b.n	800344e <AES_SetDecryptionKey+0x2e>
	return NUT_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000018 	.word	0x20000018
 800345c:	20004440 	.word	0x20004440

08003460 <AES_Encrypt>:

NutStatus_e AES_Encrypt(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
	*result_length = 16;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2210      	movs	r2, #16
 8003472:	601a      	str	r2, [r3, #0]
	Nut_Quiet();
 8003474:	f7fd fc56 	bl	8000d24 <Nut_Quiet>
	Nut_LED(1);
 8003478:	2001      	movs	r0, #1
 800347a:	f7fd fc6f 	bl	8000d5c <Nut_LED>
	Nut_IO_USER(1);
 800347e:	2001      	movs	r0, #1
 8003480:	f7fd fc9a 	bl	8000db8 <Nut_IO_USER>
	Nut_IO_1(1);
 8003484:	2001      	movs	r0, #1
 8003486:	f7fd fc81 	bl	8000d8c <Nut_IO_1>
	if (mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_ENCRYPT, received_data_ptr, result_buffer_ptr))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	2101      	movs	r1, #1
 8003490:	480b      	ldr	r0, [pc, #44]	@ (80034c0 <AES_Encrypt+0x60>)
 8003492:	f7ff fb1b 	bl	8002acc <mbedtls_aes_crypt_ecb>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <AES_Encrypt+0x40>
		return NUT_ERROR;
 800349c:	2302      	movs	r3, #2
 800349e:	e00b      	b.n	80034b8 <AES_Encrypt+0x58>
	Nut_IO_1(0);
 80034a0:	2000      	movs	r0, #0
 80034a2:	f7fd fc73 	bl	8000d8c <Nut_IO_1>
	Nut_IO_USER(0);
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7fd fc86 	bl	8000db8 <Nut_IO_USER>
	Nut_LED(0);
 80034ac:	2000      	movs	r0, #0
 80034ae:	f7fd fc55 	bl	8000d5c <Nut_LED>
	Nut_unQuiet();
 80034b2:	f7fd fc45 	bl	8000d40 <Nut_unQuiet>
	return NUT_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20004440 	.word	0x20004440

080034c4 <AES_Decrypt>:

NutStatus_e AES_Decrypt(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
	*result_length = 16;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2210      	movs	r2, #16
 80034d6:	601a      	str	r2, [r3, #0]
	Nut_Quiet();
 80034d8:	f7fd fc24 	bl	8000d24 <Nut_Quiet>
	Nut_LED(1);
 80034dc:	2001      	movs	r0, #1
 80034de:	f7fd fc3d 	bl	8000d5c <Nut_LED>
	Nut_IO_USER(1);
 80034e2:	2001      	movs	r0, #1
 80034e4:	f7fd fc68 	bl	8000db8 <Nut_IO_USER>
	Nut_IO_1(1);
 80034e8:	2001      	movs	r0, #1
 80034ea:	f7fd fc4f 	bl	8000d8c <Nut_IO_1>
	if (mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_DECRYPT, received_data_ptr, result_buffer_ptr))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	2100      	movs	r1, #0
 80034f4:	480b      	ldr	r0, [pc, #44]	@ (8003524 <AES_Decrypt+0x60>)
 80034f6:	f7ff fae9 	bl	8002acc <mbedtls_aes_crypt_ecb>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <AES_Decrypt+0x40>
		return NUT_ERROR;
 8003500:	2302      	movs	r3, #2
 8003502:	e00b      	b.n	800351c <AES_Decrypt+0x58>
	Nut_IO_1(0);
 8003504:	2000      	movs	r0, #0
 8003506:	f7fd fc41 	bl	8000d8c <Nut_IO_1>
	Nut_IO_USER(0);
 800350a:	2000      	movs	r0, #0
 800350c:	f7fd fc54 	bl	8000db8 <Nut_IO_USER>
	Nut_LED(0);
 8003510:	2000      	movs	r0, #0
 8003512:	f7fd fc23 	bl	8000d5c <Nut_LED>
	Nut_unQuiet();
 8003516:	f7fd fc13 	bl	8000d40 <Nut_unQuiet>
	return NUT_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20004440 	.word	0x20004440

08003528 <DES_SetEncryptionKey>:

NutStatus_e DES_SetEncryptionKey(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
	*result_length = 0;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
	if (mbedtls_des_setkey_enc(&des_ctx, received_data_ptr))
 800353c:	68f9      	ldr	r1, [r7, #12]
 800353e:	4806      	ldr	r0, [pc, #24]	@ (8003558 <DES_SetEncryptionKey+0x30>)
 8003540:	f7ff fce6 	bl	8002f10 <mbedtls_des_setkey_enc>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <DES_SetEncryptionKey+0x26>
		return NUT_ERROR;
 800354a:	2302      	movs	r3, #2
 800354c:	e000      	b.n	8003550 <DES_SetEncryptionKey+0x28>
	return NUT_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20004558 	.word	0x20004558

0800355c <DES_SetDecryptionKey>:

NutStatus_e DES_SetDecryptionKey(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
	*result_length = 0;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
	if (mbedtls_des_setkey_dec(&des_ctx, received_data_ptr))
 8003570:	68f9      	ldr	r1, [r7, #12]
 8003572:	4806      	ldr	r0, [pc, #24]	@ (800358c <DES_SetDecryptionKey+0x30>)
 8003574:	f7ff fcdb 	bl	8002f2e <mbedtls_des_setkey_dec>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <DES_SetDecryptionKey+0x26>
		return NUT_ERROR;
 800357e:	2302      	movs	r3, #2
 8003580:	e000      	b.n	8003584 <DES_SetDecryptionKey+0x28>
	return NUT_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20004558 	.word	0x20004558

08003590 <DES_Encrypt>:

NutStatus_e DES_Encrypt(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
	*result_length = 8;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2208      	movs	r2, #8
 80035a2:	601a      	str	r2, [r3, #0]
	if (mbedtls_des_crypt_ecb(&des_ctx, received_data_ptr, result_buffer_ptr))
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68f9      	ldr	r1, [r7, #12]
 80035a8:	4806      	ldr	r0, [pc, #24]	@ (80035c4 <DES_Encrypt+0x34>)
 80035aa:	f7ff fd0b 	bl	8002fc4 <mbedtls_des_crypt_ecb>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <DES_Encrypt+0x28>
		return NUT_ERROR;
 80035b4:	2302      	movs	r3, #2
 80035b6:	e000      	b.n	80035ba <DES_Encrypt+0x2a>
	return NUT_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20004558 	.word	0x20004558

080035c8 <SPA_UpdateData>:

uint32_t rambuff_u32[256];
uint16_t *rambuff_u16 = (uint16_t*) rambuff_u32;
uint8_t *rambuff_u8 = (uint8_t*) rambuff_u32;
NutStatus_e SPA_UpdateData(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	f2ad 4d24 	subw	sp, sp, #1060	@ 0x424
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	f507 6484 	add.w	r4, r7, #1056	@ 0x420
 80035d4:	f2a4 4414 	subw	r4, r4, #1044	@ 0x414
 80035d8:	6020      	str	r0, [r4, #0]
 80035da:	f507 6084 	add.w	r0, r7, #1056	@ 0x420
 80035de:	f5a0 6083 	sub.w	r0, r0, #1048	@ 0x418
 80035e2:	6001      	str	r1, [r0, #0]
 80035e4:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 80035e8:	f2a1 411c 	subw	r1, r1, #1052	@ 0x41c
 80035ec:	600a      	str	r2, [r1, #0]
 80035ee:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80035f2:	f5a2 6284 	sub.w	r2, r2, #1056	@ 0x420
 80035f6:	6013      	str	r3, [r2, #0]
	*result_length = 0;		// length of responding payload
 80035f8:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80035fc:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

	uint32_t aligned_data_u32[256];
	uint16_t *aligned_data_u16 = (uint16_t*) aligned_data_u32;
 8003606:	f107 0310 	add.w	r3, r7, #16
 800360a:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
	uint8_t *aligned_data_u8 = (uint8_t*) aligned_data_u32;
 800360e:	f107 0310 	add.w	r3, r7, #16
 8003612:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
	uint32_t i;
	uint8_t data_size, data_length;

	// decode package
	data_size = received_data_ptr[0];
 8003616:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800361a:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	f887 3413 	strb.w	r3, [r7, #1043]	@ 0x413
	data_length = received_data_ptr[1];
 8003626:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800362a:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	785b      	ldrb	r3, [r3, #1]
 8003632:	f887 3412 	strb.w	r3, [r7, #1042]	@ 0x412

	// align data
	for (i = 0; i < received_data_length - 2; i++) {
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 800363c:	e014      	b.n	8003668 <SPA_UpdateData+0xa0>
		aligned_data_u8[i] = received_data_ptr[i + 2];
 800363e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8003642:	3302      	adds	r3, #2
 8003644:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8003648:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	441a      	add	r2, r3
 8003650:	f8d7 1414 	ldr.w	r1, [r7, #1044]	@ 0x414
 8003654:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8003658:	440b      	add	r3, r1
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < received_data_length - 2; i++) {
 800365e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8003662:	3301      	adds	r3, #1
 8003664:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8003668:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800366c:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3b02      	subs	r3, #2
 8003674:	f8d7 241c 	ldr.w	r2, [r7, #1052]	@ 0x41c
 8003678:	429a      	cmp	r2, r3
 800367a:	d3e0      	bcc.n	800363e <SPA_UpdateData+0x76>
	}

	// trigger
	Nut_Quiet();
 800367c:	f7fd fb52 	bl	8000d24 <Nut_Quiet>
	Nut_LED(1);
 8003680:	2001      	movs	r0, #1
 8003682:	f7fd fb6b 	bl	8000d5c <Nut_LED>
	Nut_IO_USER(1);
 8003686:	2001      	movs	r0, #1
 8003688:	f7fd fb96 	bl	8000db8 <Nut_IO_USER>
	Nut_IO_1(1);
 800368c:	2001      	movs	r0, #1
 800368e:	f7fd fb7d 	bl	8000d8c <Nut_IO_1>
	if (data_size == 8) {
 8003692:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 8003696:	2b08      	cmp	r3, #8
 8003698:	d11b      	bne.n	80036d2 <SPA_UpdateData+0x10a>
		// spa_update_data_u8
		for (i = 0; i < data_length; i++) {
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 80036a0:	e010      	b.n	80036c4 <SPA_UpdateData+0xfc>
			rambuff_u8[i] = aligned_data_u8[i];
 80036a2:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 80036a6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80036aa:	441a      	add	r2, r3
 80036ac:	4b32      	ldr	r3, [pc, #200]	@ (8003778 <SPA_UpdateData+0x1b0>)
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80036b4:	440b      	add	r3, r1
 80036b6:	7812      	ldrb	r2, [r2, #0]
 80036b8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < data_length; i++) {
 80036ba:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80036be:	3301      	adds	r3, #1
 80036c0:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 80036c4:	f897 3412 	ldrb.w	r3, [r7, #1042]	@ 0x412
 80036c8:	f8d7 241c 	ldr.w	r2, [r7, #1052]	@ 0x41c
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d3e8      	bcc.n	80036a2 <SPA_UpdateData+0xda>
 80036d0:	e041      	b.n	8003756 <SPA_UpdateData+0x18e>
		}
	} else if (data_size == 16) {
 80036d2:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d11d      	bne.n	8003716 <SPA_UpdateData+0x14e>
		// spa_update_data_u16
		for (i = 0; i < data_length; i++) {
 80036da:	2300      	movs	r3, #0
 80036dc:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 80036e0:	e012      	b.n	8003708 <SPA_UpdateData+0x140>
			rambuff_u16[i] = aligned_data_u16[i];
 80036e2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 80036ec:	441a      	add	r2, r3
 80036ee:	4b23      	ldr	r3, [pc, #140]	@ (800377c <SPA_UpdateData+0x1b4>)
 80036f0:	6819      	ldr	r1, [r3, #0]
 80036f2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	440b      	add	r3, r1
 80036fa:	8812      	ldrh	r2, [r2, #0]
 80036fc:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < data_length; i++) {
 80036fe:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8003702:	3301      	adds	r3, #1
 8003704:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8003708:	f897 3412 	ldrb.w	r3, [r7, #1042]	@ 0x412
 800370c:	f8d7 241c 	ldr.w	r2, [r7, #1052]	@ 0x41c
 8003710:	429a      	cmp	r2, r3
 8003712:	d3e6      	bcc.n	80036e2 <SPA_UpdateData+0x11a>
 8003714:	e01f      	b.n	8003756 <SPA_UpdateData+0x18e>
		}
	} else if (data_size == 32) {
 8003716:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 800371a:	2b20      	cmp	r3, #32
 800371c:	d11b      	bne.n	8003756 <SPA_UpdateData+0x18e>
		// spa_update_data_u32
		for (i = 0; i < data_length; i++) {
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8003724:	e011      	b.n	800374a <SPA_UpdateData+0x182>
			rambuff_u32[i] = aligned_data_u32[i];
 8003726:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800372a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800372e:	f8d7 241c 	ldr.w	r2, [r7, #1052]	@ 0x41c
 8003732:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003736:	4912      	ldr	r1, [pc, #72]	@ (8003780 <SPA_UpdateData+0x1b8>)
 8003738:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800373c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < data_length; i++) {
 8003740:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8003744:	3301      	adds	r3, #1
 8003746:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 800374a:	f897 3412 	ldrb.w	r3, [r7, #1042]	@ 0x412
 800374e:	f8d7 241c 	ldr.w	r2, [r7, #1052]	@ 0x41c
 8003752:	429a      	cmp	r2, r3
 8003754:	d3e7      	bcc.n	8003726 <SPA_UpdateData+0x15e>
		}
	} else {
		// error
	}
	// clear trigger
	Nut_IO_1(0);
 8003756:	2000      	movs	r0, #0
 8003758:	f7fd fb18 	bl	8000d8c <Nut_IO_1>
	Nut_IO_USER(0);
 800375c:	2000      	movs	r0, #0
 800375e:	f7fd fb2b 	bl	8000db8 <Nut_IO_USER>
	Nut_LED(0);
 8003762:	2000      	movs	r0, #0
 8003764:	f7fd fafa 	bl	8000d5c <Nut_LED>
	Nut_unQuiet();
 8003768:	f7fd faea 	bl	8000d40 <Nut_unQuiet>

	// return run result: NUT_OK, NUT_WARNING, NUT_ERROR
	return NUT_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	f207 4724 	addw	r7, r7, #1060	@ 0x424
 8003774:	46bd      	mov	sp, r7
 8003776:	bd90      	pop	{r4, r7, pc}
 8003778:	20000020 	.word	0x20000020
 800377c:	2000001c 	.word	0x2000001c
 8003780:	200045d8 	.word	0x200045d8

08003784 <SPA_ArithmeticCompute>:

NutStatus_e SPA_ArithmeticCompute(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
	*result_length = 0;		// length of responding payload
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

	// return run result: NUT_OK, NUT_WARNING, NUT_ERROR
	return NUT_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <SPA_ConditionJump>:

NutStatus_e SPA_ConditionJump(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
	*result_length = 0;		// length of responding payload
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

	// return run result: NUT_OK, NUT_WARNING, NUT_ERROR
	return NUT_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c8:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <HAL_Init+0x28>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a07      	ldr	r2, [pc, #28]	@ (80037ec <HAL_Init+0x28>)
 80037ce:	f043 0310 	orr.w	r3, r3, #16
 80037d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d4:	2003      	movs	r0, #3
 80037d6:	f000 fa27 	bl	8003c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037da:	200f      	movs	r0, #15
 80037dc:	f000 f808 	bl	80037f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037e0:	f7fd fb90 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40022000 	.word	0x40022000

080037f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f8:	4b12      	ldr	r3, [pc, #72]	@ (8003844 <HAL_InitTick+0x54>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b12      	ldr	r3, [pc, #72]	@ (8003848 <HAL_InitTick+0x58>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	4619      	mov	r1, r3
 8003802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003806:	fbb3 f3f1 	udiv	r3, r3, r1
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fa31 	bl	8003c76 <HAL_SYSTICK_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e00e      	b.n	800383c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b0f      	cmp	r3, #15
 8003822:	d80a      	bhi.n	800383a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003824:	2200      	movs	r2, #0
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	f04f 30ff 	mov.w	r0, #4294967295
 800382c:	f000 fa07 	bl	8003c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003830:	4a06      	ldr	r2, [pc, #24]	@ (800384c <HAL_InitTick+0x5c>)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000010 	.word	0x20000010
 8003848:	20000074 	.word	0x20000074
 800384c:	20000070 	.word	0x20000070

08003850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003854:	4b05      	ldr	r3, [pc, #20]	@ (800386c <HAL_IncTick+0x1c>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <HAL_IncTick+0x20>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4413      	add	r3, r2
 8003860:	4a03      	ldr	r2, [pc, #12]	@ (8003870 <HAL_IncTick+0x20>)
 8003862:	6013      	str	r3, [r2, #0]
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	20000074 	.word	0x20000074
 8003870:	200049d8 	.word	0x200049d8

08003874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return uwTick;
 8003878:	4b02      	ldr	r3, [pc, #8]	@ (8003884 <HAL_GetTick+0x10>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	200049d8 	.word	0x200049d8

08003888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003890:	f7ff fff0 	bl	8003874 <HAL_GetTick>
 8003894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d005      	beq.n	80038ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038a2:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <HAL_Delay+0x44>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038ae:	bf00      	nop
 80038b0:	f7ff ffe0 	bl	8003874 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d8f7      	bhi.n	80038b0 <HAL_Delay+0x28>
  {
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000074 	.word	0x20000074

080038d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0ed      	b.n	8003abe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fb3a 	bl	8000f68 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003904:	f7ff ffb6 	bl	8003874 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800390a:	e012      	b.n	8003932 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800390c:	f7ff ffb2 	bl	8003874 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b0a      	cmp	r3, #10
 8003918:	d90b      	bls.n	8003932 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2205      	movs	r2, #5
 800392a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e0c5      	b.n	8003abe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0e5      	beq.n	800390c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0202 	bic.w	r2, r2, #2
 800394e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003950:	f7ff ff90 	bl	8003874 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003956:	e012      	b.n	800397e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003958:	f7ff ff8c 	bl	8003874 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b0a      	cmp	r3, #10
 8003964:	d90b      	bls.n	800397e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2205      	movs	r2, #5
 8003976:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e09f      	b.n	8003abe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e5      	bne.n	8003958 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	7e1b      	ldrb	r3, [r3, #24]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d108      	bne.n	80039a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	e007      	b.n	80039b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	7e5b      	ldrb	r3, [r3, #25]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d108      	bne.n	80039d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e007      	b.n	80039e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7e9b      	ldrb	r3, [r3, #26]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d108      	bne.n	80039fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0220 	orr.w	r2, r2, #32
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e007      	b.n	8003a0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0220 	bic.w	r2, r2, #32
 8003a08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	7edb      	ldrb	r3, [r3, #27]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d108      	bne.n	8003a24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0210 	bic.w	r2, r2, #16
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e007      	b.n	8003a34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0210 	orr.w	r2, r2, #16
 8003a32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7f1b      	ldrb	r3, [r3, #28]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d108      	bne.n	8003a4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0208 	orr.w	r2, r2, #8
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e007      	b.n	8003a5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0208 	bic.w	r2, r2, #8
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	7f5b      	ldrb	r3, [r3, #29]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d108      	bne.n	8003a78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0204 	orr.w	r2, r2, #4
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e007      	b.n	8003a88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0204 	bic.w	r2, r2, #4
 8003a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	ea42 0103 	orr.w	r1, r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	1e5a      	subs	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afa:	4a04      	ldr	r2, [pc, #16]	@ (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	60d3      	str	r3, [r2, #12]
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b14:	4b04      	ldr	r3, [pc, #16]	@ (8003b28 <__NVIC_GetPriorityGrouping+0x18>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	f003 0307 	and.w	r3, r3, #7
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	6039      	str	r1, [r7, #0]
 8003b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	db0a      	blt.n	8003b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	490c      	ldr	r1, [pc, #48]	@ (8003b78 <__NVIC_SetPriority+0x4c>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	0112      	lsls	r2, r2, #4
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	440b      	add	r3, r1
 8003b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b54:	e00a      	b.n	8003b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4908      	ldr	r1, [pc, #32]	@ (8003b7c <__NVIC_SetPriority+0x50>)
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	3b04      	subs	r3, #4
 8003b64:	0112      	lsls	r2, r2, #4
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	440b      	add	r3, r1
 8003b6a:	761a      	strb	r2, [r3, #24]
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	e000e100 	.word	0xe000e100
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	@ 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f1c3 0307 	rsb	r3, r3, #7
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	bf28      	it	cs
 8003b9e:	2304      	movcs	r3, #4
 8003ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d902      	bls.n	8003bb0 <NVIC_EncodePriority+0x30>
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3b03      	subs	r3, #3
 8003bae:	e000      	b.n	8003bb2 <NVIC_EncodePriority+0x32>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	43d9      	mvns	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd8:	4313      	orrs	r3, r2
         );
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3724      	adds	r7, #36	@ 0x24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bf4:	d301      	bcc.n	8003bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e00f      	b.n	8003c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <SysTick_Config+0x40>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c02:	210f      	movs	r1, #15
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	f7ff ff90 	bl	8003b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c0c:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <SysTick_Config+0x40>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c12:	4b04      	ldr	r3, [pc, #16]	@ (8003c24 <SysTick_Config+0x40>)
 8003c14:	2207      	movs	r2, #7
 8003c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	e000e010 	.word	0xe000e010

08003c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff49 	bl	8003ac8 <__NVIC_SetPriorityGrouping>
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c50:	f7ff ff5e 	bl	8003b10 <__NVIC_GetPriorityGrouping>
 8003c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	6978      	ldr	r0, [r7, #20]
 8003c5c:	f7ff ff90 	bl	8003b80 <NVIC_EncodePriority>
 8003c60:	4602      	mov	r2, r0
 8003c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff5f 	bl	8003b2c <__NVIC_SetPriority>
}
 8003c6e:	bf00      	nop
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff ffb0 	bl	8003be4 <SysTick_Config>
 8003c84:	4603      	mov	r3, r0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b08b      	sub	sp, #44	@ 0x2c
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca2:	e169      	b.n	8003f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	f040 8158 	bne.w	8003f72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4a9a      	ldr	r2, [pc, #616]	@ (8003f30 <HAL_GPIO_Init+0x2a0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d05e      	beq.n	8003d8a <HAL_GPIO_Init+0xfa>
 8003ccc:	4a98      	ldr	r2, [pc, #608]	@ (8003f30 <HAL_GPIO_Init+0x2a0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d875      	bhi.n	8003dbe <HAL_GPIO_Init+0x12e>
 8003cd2:	4a98      	ldr	r2, [pc, #608]	@ (8003f34 <HAL_GPIO_Init+0x2a4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d058      	beq.n	8003d8a <HAL_GPIO_Init+0xfa>
 8003cd8:	4a96      	ldr	r2, [pc, #600]	@ (8003f34 <HAL_GPIO_Init+0x2a4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d86f      	bhi.n	8003dbe <HAL_GPIO_Init+0x12e>
 8003cde:	4a96      	ldr	r2, [pc, #600]	@ (8003f38 <HAL_GPIO_Init+0x2a8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d052      	beq.n	8003d8a <HAL_GPIO_Init+0xfa>
 8003ce4:	4a94      	ldr	r2, [pc, #592]	@ (8003f38 <HAL_GPIO_Init+0x2a8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d869      	bhi.n	8003dbe <HAL_GPIO_Init+0x12e>
 8003cea:	4a94      	ldr	r2, [pc, #592]	@ (8003f3c <HAL_GPIO_Init+0x2ac>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d04c      	beq.n	8003d8a <HAL_GPIO_Init+0xfa>
 8003cf0:	4a92      	ldr	r2, [pc, #584]	@ (8003f3c <HAL_GPIO_Init+0x2ac>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d863      	bhi.n	8003dbe <HAL_GPIO_Init+0x12e>
 8003cf6:	4a92      	ldr	r2, [pc, #584]	@ (8003f40 <HAL_GPIO_Init+0x2b0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d046      	beq.n	8003d8a <HAL_GPIO_Init+0xfa>
 8003cfc:	4a90      	ldr	r2, [pc, #576]	@ (8003f40 <HAL_GPIO_Init+0x2b0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d85d      	bhi.n	8003dbe <HAL_GPIO_Init+0x12e>
 8003d02:	2b12      	cmp	r3, #18
 8003d04:	d82a      	bhi.n	8003d5c <HAL_GPIO_Init+0xcc>
 8003d06:	2b12      	cmp	r3, #18
 8003d08:	d859      	bhi.n	8003dbe <HAL_GPIO_Init+0x12e>
 8003d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d10 <HAL_GPIO_Init+0x80>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d8b 	.word	0x08003d8b
 8003d14:	08003d65 	.word	0x08003d65
 8003d18:	08003d77 	.word	0x08003d77
 8003d1c:	08003db9 	.word	0x08003db9
 8003d20:	08003dbf 	.word	0x08003dbf
 8003d24:	08003dbf 	.word	0x08003dbf
 8003d28:	08003dbf 	.word	0x08003dbf
 8003d2c:	08003dbf 	.word	0x08003dbf
 8003d30:	08003dbf 	.word	0x08003dbf
 8003d34:	08003dbf 	.word	0x08003dbf
 8003d38:	08003dbf 	.word	0x08003dbf
 8003d3c:	08003dbf 	.word	0x08003dbf
 8003d40:	08003dbf 	.word	0x08003dbf
 8003d44:	08003dbf 	.word	0x08003dbf
 8003d48:	08003dbf 	.word	0x08003dbf
 8003d4c:	08003dbf 	.word	0x08003dbf
 8003d50:	08003dbf 	.word	0x08003dbf
 8003d54:	08003d6d 	.word	0x08003d6d
 8003d58:	08003d81 	.word	0x08003d81
 8003d5c:	4a79      	ldr	r2, [pc, #484]	@ (8003f44 <HAL_GPIO_Init+0x2b4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d62:	e02c      	b.n	8003dbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	623b      	str	r3, [r7, #32]
          break;
 8003d6a:	e029      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	3304      	adds	r3, #4
 8003d72:	623b      	str	r3, [r7, #32]
          break;
 8003d74:	e024      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	623b      	str	r3, [r7, #32]
          break;
 8003d7e:	e01f      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	330c      	adds	r3, #12
 8003d86:	623b      	str	r3, [r7, #32]
          break;
 8003d88:	e01a      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d92:	2304      	movs	r3, #4
 8003d94:	623b      	str	r3, [r7, #32]
          break;
 8003d96:	e013      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d105      	bne.n	8003dac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003da0:	2308      	movs	r3, #8
 8003da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	611a      	str	r2, [r3, #16]
          break;
 8003daa:	e009      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dac:	2308      	movs	r3, #8
 8003dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	615a      	str	r2, [r3, #20]
          break;
 8003db6:	e003      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003db8:	2300      	movs	r3, #0
 8003dba:	623b      	str	r3, [r7, #32]
          break;
 8003dbc:	e000      	b.n	8003dc0 <HAL_GPIO_Init+0x130>
          break;
 8003dbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2bff      	cmp	r3, #255	@ 0xff
 8003dc4:	d801      	bhi.n	8003dca <HAL_GPIO_Init+0x13a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	e001      	b.n	8003dce <HAL_GPIO_Init+0x13e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2bff      	cmp	r3, #255	@ 0xff
 8003dd4:	d802      	bhi.n	8003ddc <HAL_GPIO_Init+0x14c>
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	e002      	b.n	8003de2 <HAL_GPIO_Init+0x152>
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	3b08      	subs	r3, #8
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	210f      	movs	r1, #15
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	fa01 f303 	lsl.w	r3, r1, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	401a      	ands	r2, r3
 8003df4:	6a39      	ldr	r1, [r7, #32]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80b1 	beq.w	8003f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e10:	4b4d      	ldr	r3, [pc, #308]	@ (8003f48 <HAL_GPIO_Init+0x2b8>)
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	4a4c      	ldr	r2, [pc, #304]	@ (8003f48 <HAL_GPIO_Init+0x2b8>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6193      	str	r3, [r2, #24]
 8003e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8003f48 <HAL_GPIO_Init+0x2b8>)
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e28:	4a48      	ldr	r2, [pc, #288]	@ (8003f4c <HAL_GPIO_Init+0x2bc>)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	3302      	adds	r3, #2
 8003e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	220f      	movs	r2, #15
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a40      	ldr	r2, [pc, #256]	@ (8003f50 <HAL_GPIO_Init+0x2c0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d013      	beq.n	8003e7c <HAL_GPIO_Init+0x1ec>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3f      	ldr	r2, [pc, #252]	@ (8003f54 <HAL_GPIO_Init+0x2c4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00d      	beq.n	8003e78 <HAL_GPIO_Init+0x1e8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8003f58 <HAL_GPIO_Init+0x2c8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d007      	beq.n	8003e74 <HAL_GPIO_Init+0x1e4>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3d      	ldr	r2, [pc, #244]	@ (8003f5c <HAL_GPIO_Init+0x2cc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d101      	bne.n	8003e70 <HAL_GPIO_Init+0x1e0>
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e006      	b.n	8003e7e <HAL_GPIO_Init+0x1ee>
 8003e70:	2304      	movs	r3, #4
 8003e72:	e004      	b.n	8003e7e <HAL_GPIO_Init+0x1ee>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e002      	b.n	8003e7e <HAL_GPIO_Init+0x1ee>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_GPIO_Init+0x1ee>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e80:	f002 0203 	and.w	r2, r2, #3
 8003e84:	0092      	lsls	r2, r2, #2
 8003e86:	4093      	lsls	r3, r2
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e8e:	492f      	ldr	r1, [pc, #188]	@ (8003f4c <HAL_GPIO_Init+0x2bc>)
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	3302      	adds	r3, #2
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d006      	beq.n	8003eb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	492c      	ldr	r1, [pc, #176]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	608b      	str	r3, [r1, #8]
 8003eb4:	e006      	b.n	8003ec4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	4928      	ldr	r1, [pc, #160]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d006      	beq.n	8003ede <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ed0:	4b23      	ldr	r3, [pc, #140]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	4922      	ldr	r1, [pc, #136]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60cb      	str	r3, [r1, #12]
 8003edc:	e006      	b.n	8003eec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ede:	4b20      	ldr	r3, [pc, #128]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	491e      	ldr	r1, [pc, #120]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d006      	beq.n	8003f06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ef8:	4b19      	ldr	r3, [pc, #100]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	4918      	ldr	r1, [pc, #96]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
 8003f04:	e006      	b.n	8003f14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f06:	4b16      	ldr	r3, [pc, #88]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	4914      	ldr	r1, [pc, #80]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d021      	beq.n	8003f64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f20:	4b0f      	ldr	r3, [pc, #60]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	490e      	ldr	r1, [pc, #56]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]
 8003f2c:	e021      	b.n	8003f72 <HAL_GPIO_Init+0x2e2>
 8003f2e:	bf00      	nop
 8003f30:	10320000 	.word	0x10320000
 8003f34:	10310000 	.word	0x10310000
 8003f38:	10220000 	.word	0x10220000
 8003f3c:	10210000 	.word	0x10210000
 8003f40:	10120000 	.word	0x10120000
 8003f44:	10110000 	.word	0x10110000
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40010000 	.word	0x40010000
 8003f50:	40010800 	.word	0x40010800
 8003f54:	40010c00 	.word	0x40010c00
 8003f58:	40011000 	.word	0x40011000
 8003f5c:	40011400 	.word	0x40011400
 8003f60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f64:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <HAL_GPIO_Init+0x304>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	4909      	ldr	r1, [pc, #36]	@ (8003f94 <HAL_GPIO_Init+0x304>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	3301      	adds	r3, #1
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f47f ae8e 	bne.w	8003ca4 <HAL_GPIO_Init+0x14>
  }
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	372c      	adds	r7, #44	@ 0x2c
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	40010400 	.word	0x40010400

08003f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	887b      	ldrh	r3, [r7, #2]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
 8003fb4:	e001      	b.n	8003fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	807b      	strh	r3, [r7, #2]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fd6:	787b      	ldrb	r3, [r7, #1]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fdc:	887a      	ldrh	r2, [r7, #2]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fe2:	e003      	b.n	8003fec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fe4:	887b      	ldrh	r3, [r7, #2]
 8003fe6:	041a      	lsls	r2, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	611a      	str	r2, [r3, #16]
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e12b      	b.n	8004262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc ffee 	bl	8001000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2224      	movs	r2, #36	@ 0x24
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800404a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800405a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800405c:	f000 fcda 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 8004060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4a81      	ldr	r2, [pc, #516]	@ (800426c <HAL_I2C_Init+0x274>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d807      	bhi.n	800407c <HAL_I2C_Init+0x84>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a80      	ldr	r2, [pc, #512]	@ (8004270 <HAL_I2C_Init+0x278>)
 8004070:	4293      	cmp	r3, r2
 8004072:	bf94      	ite	ls
 8004074:	2301      	movls	r3, #1
 8004076:	2300      	movhi	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e006      	b.n	800408a <HAL_I2C_Init+0x92>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a7d      	ldr	r2, [pc, #500]	@ (8004274 <HAL_I2C_Init+0x27c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	bf94      	ite	ls
 8004084:	2301      	movls	r3, #1
 8004086:	2300      	movhi	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0e7      	b.n	8004262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4a78      	ldr	r2, [pc, #480]	@ (8004278 <HAL_I2C_Init+0x280>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	0c9b      	lsrs	r3, r3, #18
 800409c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a6a      	ldr	r2, [pc, #424]	@ (800426c <HAL_I2C_Init+0x274>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d802      	bhi.n	80040cc <HAL_I2C_Init+0xd4>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	3301      	adds	r3, #1
 80040ca:	e009      	b.n	80040e0 <HAL_I2C_Init+0xe8>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	4a69      	ldr	r2, [pc, #420]	@ (800427c <HAL_I2C_Init+0x284>)
 80040d8:	fba2 2303 	umull	r2, r3, r2, r3
 80040dc:	099b      	lsrs	r3, r3, #6
 80040de:	3301      	adds	r3, #1
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	495c      	ldr	r1, [pc, #368]	@ (800426c <HAL_I2C_Init+0x274>)
 80040fc:	428b      	cmp	r3, r1
 80040fe:	d819      	bhi.n	8004134 <HAL_I2C_Init+0x13c>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e59      	subs	r1, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	fbb1 f3f3 	udiv	r3, r1, r3
 800410e:	1c59      	adds	r1, r3, #1
 8004110:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004114:	400b      	ands	r3, r1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_I2C_Init+0x138>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1e59      	subs	r1, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fbb1 f3f3 	udiv	r3, r1, r3
 8004128:	3301      	adds	r3, #1
 800412a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412e:	e051      	b.n	80041d4 <HAL_I2C_Init+0x1dc>
 8004130:	2304      	movs	r3, #4
 8004132:	e04f      	b.n	80041d4 <HAL_I2C_Init+0x1dc>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d111      	bne.n	8004160 <HAL_I2C_Init+0x168>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1e58      	subs	r0, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	440b      	add	r3, r1
 800414a:	fbb0 f3f3 	udiv	r3, r0, r3
 800414e:	3301      	adds	r3, #1
 8004150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e012      	b.n	8004186 <HAL_I2C_Init+0x18e>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1e58      	subs	r0, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	0099      	lsls	r1, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	fbb0 f3f3 	udiv	r3, r0, r3
 8004176:	3301      	adds	r3, #1
 8004178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Init+0x196>
 800418a:	2301      	movs	r3, #1
 800418c:	e022      	b.n	80041d4 <HAL_I2C_Init+0x1dc>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10e      	bne.n	80041b4 <HAL_I2C_Init+0x1bc>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1e58      	subs	r0, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6859      	ldr	r1, [r3, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	440b      	add	r3, r1
 80041a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a8:	3301      	adds	r3, #1
 80041aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041b2:	e00f      	b.n	80041d4 <HAL_I2C_Init+0x1dc>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	1e58      	subs	r0, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	0099      	lsls	r1, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ca:	3301      	adds	r3, #1
 80041cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	6809      	ldr	r1, [r1, #0]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004202:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6911      	ldr	r1, [r2, #16]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68d2      	ldr	r2, [r2, #12]
 800420e:	4311      	orrs	r1, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	430b      	orrs	r3, r1
 8004216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	000186a0 	.word	0x000186a0
 8004270:	001e847f 	.word	0x001e847f
 8004274:	003d08ff 	.word	0x003d08ff
 8004278:	431bde83 	.word	0x431bde83
 800427c:	10624dd3 	.word	0x10624dd3

08004280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e272      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8087 	beq.w	80043ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a0:	4b92      	ldr	r3, [pc, #584]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d00c      	beq.n	80042c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042ac:	4b8f      	ldr	r3, [pc, #572]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d112      	bne.n	80042de <HAL_RCC_OscConfig+0x5e>
 80042b8:	4b8c      	ldr	r3, [pc, #560]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c4:	d10b      	bne.n	80042de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c6:	4b89      	ldr	r3, [pc, #548]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d06c      	beq.n	80043ac <HAL_RCC_OscConfig+0x12c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d168      	bne.n	80043ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e24c      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042e6:	d106      	bne.n	80042f6 <HAL_RCC_OscConfig+0x76>
 80042e8:	4b80      	ldr	r3, [pc, #512]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a7f      	ldr	r2, [pc, #508]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	e02e      	b.n	8004354 <HAL_RCC_OscConfig+0xd4>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10c      	bne.n	8004318 <HAL_RCC_OscConfig+0x98>
 80042fe:	4b7b      	ldr	r3, [pc, #492]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a7a      	ldr	r2, [pc, #488]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b78      	ldr	r3, [pc, #480]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a77      	ldr	r2, [pc, #476]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004310:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e01d      	b.n	8004354 <HAL_RCC_OscConfig+0xd4>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004320:	d10c      	bne.n	800433c <HAL_RCC_OscConfig+0xbc>
 8004322:	4b72      	ldr	r3, [pc, #456]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a71      	ldr	r2, [pc, #452]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4b6f      	ldr	r3, [pc, #444]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a6e      	ldr	r2, [pc, #440]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e00b      	b.n	8004354 <HAL_RCC_OscConfig+0xd4>
 800433c:	4b6b      	ldr	r3, [pc, #428]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a6a      	ldr	r2, [pc, #424]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	4b68      	ldr	r3, [pc, #416]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a67      	ldr	r2, [pc, #412]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 800434e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004352:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d013      	beq.n	8004384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7ff fa8a 	bl	8003874 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004364:	f7ff fa86 	bl	8003874 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	@ 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e200      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	4b5d      	ldr	r3, [pc, #372]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0xe4>
 8004382:	e014      	b.n	80043ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7ff fa76 	bl	8003874 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800438c:	f7ff fa72 	bl	8003874 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	@ 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e1ec      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439e:	4b53      	ldr	r3, [pc, #332]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x10c>
 80043aa:	e000      	b.n	80043ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d063      	beq.n	8004482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ba:	4b4c      	ldr	r3, [pc, #304]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043c6:	4b49      	ldr	r3, [pc, #292]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d11c      	bne.n	800440c <HAL_RCC_OscConfig+0x18c>
 80043d2:	4b46      	ldr	r3, [pc, #280]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d116      	bne.n	800440c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043de:	4b43      	ldr	r3, [pc, #268]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_RCC_OscConfig+0x176>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d001      	beq.n	80043f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e1c0      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f6:	4b3d      	ldr	r3, [pc, #244]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4939      	ldr	r1, [pc, #228]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440a:	e03a      	b.n	8004482 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004414:	4b36      	ldr	r3, [pc, #216]	@ (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441a:	f7ff fa2b 	bl	8003874 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004422:	f7ff fa27 	bl	8003874 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e1a1      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004434:	4b2d      	ldr	r3, [pc, #180]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	4b2a      	ldr	r3, [pc, #168]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4927      	ldr	r1, [pc, #156]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	600b      	str	r3, [r1, #0]
 8004454:	e015      	b.n	8004482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004456:	4b26      	ldr	r3, [pc, #152]	@ (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7ff fa0a 	bl	8003874 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004464:	f7ff fa06 	bl	8003874 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e180      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004476:	4b1d      	ldr	r3, [pc, #116]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d03a      	beq.n	8004504 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d019      	beq.n	80044ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004496:	4b17      	ldr	r3, [pc, #92]	@ (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449c:	f7ff f9ea 	bl	8003874 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a4:	f7ff f9e6 	bl	8003874 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e160      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b6:	4b0d      	ldr	r3, [pc, #52]	@ (80044ec <HAL_RCC_OscConfig+0x26c>)
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044c2:	2001      	movs	r0, #1
 80044c4:	f000 face 	bl	8004a64 <RCC_Delay>
 80044c8:	e01c      	b.n	8004504 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ca:	4b0a      	ldr	r3, [pc, #40]	@ (80044f4 <HAL_RCC_OscConfig+0x274>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d0:	f7ff f9d0 	bl	8003874 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d6:	e00f      	b.n	80044f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d8:	f7ff f9cc 	bl	8003874 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d908      	bls.n	80044f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e146      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	42420000 	.word	0x42420000
 80044f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f8:	4b92      	ldr	r3, [pc, #584]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e9      	bne.n	80044d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80a6 	beq.w	800465e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004512:	2300      	movs	r3, #0
 8004514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004516:	4b8b      	ldr	r3, [pc, #556]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10d      	bne.n	800453e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004522:	4b88      	ldr	r3, [pc, #544]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	4a87      	ldr	r2, [pc, #540]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800452c:	61d3      	str	r3, [r2, #28]
 800452e:	4b85      	ldr	r3, [pc, #532]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453a:	2301      	movs	r3, #1
 800453c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b82      	ldr	r3, [pc, #520]	@ (8004748 <HAL_RCC_OscConfig+0x4c8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d118      	bne.n	800457c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454a:	4b7f      	ldr	r3, [pc, #508]	@ (8004748 <HAL_RCC_OscConfig+0x4c8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7e      	ldr	r2, [pc, #504]	@ (8004748 <HAL_RCC_OscConfig+0x4c8>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004556:	f7ff f98d 	bl	8003874 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455e:	f7ff f989 	bl	8003874 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b64      	cmp	r3, #100	@ 0x64
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e103      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	4b75      	ldr	r3, [pc, #468]	@ (8004748 <HAL_RCC_OscConfig+0x4c8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <HAL_RCC_OscConfig+0x312>
 8004584:	4b6f      	ldr	r3, [pc, #444]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4a6e      	ldr	r2, [pc, #440]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6213      	str	r3, [r2, #32]
 8004590:	e02d      	b.n	80045ee <HAL_RCC_OscConfig+0x36e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x334>
 800459a:	4b6a      	ldr	r3, [pc, #424]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	4a69      	ldr	r2, [pc, #420]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	6213      	str	r3, [r2, #32]
 80045a6:	4b67      	ldr	r3, [pc, #412]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	4a66      	ldr	r2, [pc, #408]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	f023 0304 	bic.w	r3, r3, #4
 80045b0:	6213      	str	r3, [r2, #32]
 80045b2:	e01c      	b.n	80045ee <HAL_RCC_OscConfig+0x36e>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	d10c      	bne.n	80045d6 <HAL_RCC_OscConfig+0x356>
 80045bc:	4b61      	ldr	r3, [pc, #388]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4a60      	ldr	r2, [pc, #384]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	f043 0304 	orr.w	r3, r3, #4
 80045c6:	6213      	str	r3, [r2, #32]
 80045c8:	4b5e      	ldr	r3, [pc, #376]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	6213      	str	r3, [r2, #32]
 80045d4:	e00b      	b.n	80045ee <HAL_RCC_OscConfig+0x36e>
 80045d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	4a5a      	ldr	r2, [pc, #360]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	6213      	str	r3, [r2, #32]
 80045e2:	4b58      	ldr	r3, [pc, #352]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	4a57      	ldr	r2, [pc, #348]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	f023 0304 	bic.w	r3, r3, #4
 80045ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d015      	beq.n	8004622 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f6:	f7ff f93d 	bl	8003874 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7ff f939 	bl	8003874 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0b1      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	4b4b      	ldr	r3, [pc, #300]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0ee      	beq.n	80045fe <HAL_RCC_OscConfig+0x37e>
 8004620:	e014      	b.n	800464c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004622:	f7ff f927 	bl	8003874 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004628:	e00a      	b.n	8004640 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462a:	f7ff f923 	bl	8003874 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004638:	4293      	cmp	r3, r2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e09b      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004640:	4b40      	ldr	r3, [pc, #256]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ee      	bne.n	800462a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004652:	4b3c      	ldr	r3, [pc, #240]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	4a3b      	ldr	r2, [pc, #236]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800465c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8087 	beq.w	8004776 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004668:	4b36      	ldr	r3, [pc, #216]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b08      	cmp	r3, #8
 8004672:	d061      	beq.n	8004738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d146      	bne.n	800470a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467c:	4b33      	ldr	r3, [pc, #204]	@ (800474c <HAL_RCC_OscConfig+0x4cc>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7ff f8f7 	bl	8003874 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468a:	f7ff f8f3 	bl	8003874 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e06d      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800469c:	4b29      	ldr	r3, [pc, #164]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b0:	d108      	bne.n	80046c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046b2:	4b24      	ldr	r3, [pc, #144]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	4921      	ldr	r1, [pc, #132]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a19      	ldr	r1, [r3, #32]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	430b      	orrs	r3, r1
 80046d6:	491b      	ldr	r1, [pc, #108]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046dc:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <HAL_RCC_OscConfig+0x4cc>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e2:	f7ff f8c7 	bl	8003874 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ea:	f7ff f8c3 	bl	8003874 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e03d      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046fc:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x46a>
 8004708:	e035      	b.n	8004776 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470a:	4b10      	ldr	r3, [pc, #64]	@ (800474c <HAL_RCC_OscConfig+0x4cc>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7ff f8b0 	bl	8003874 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004718:	f7ff f8ac 	bl	8003874 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e026      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472a:	4b06      	ldr	r3, [pc, #24]	@ (8004744 <HAL_RCC_OscConfig+0x4c4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x498>
 8004736:	e01e      	b.n	8004776 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d107      	bne.n	8004750 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e019      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
 8004744:	40021000 	.word	0x40021000
 8004748:	40007000 	.word	0x40007000
 800474c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004750:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <HAL_RCC_OscConfig+0x500>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	429a      	cmp	r2, r3
 8004762:	d106      	bne.n	8004772 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d001      	beq.n	8004776 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40021000 	.word	0x40021000

08004784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0d0      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004798:	4b6a      	ldr	r3, [pc, #424]	@ (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d910      	bls.n	80047c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a6:	4b67      	ldr	r3, [pc, #412]	@ (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 0207 	bic.w	r2, r3, #7
 80047ae:	4965      	ldr	r1, [pc, #404]	@ (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b6:	4b63      	ldr	r3, [pc, #396]	@ (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0b8      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e0:	4b59      	ldr	r3, [pc, #356]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4a58      	ldr	r2, [pc, #352]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f8:	4b53      	ldr	r3, [pc, #332]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4a52      	ldr	r2, [pc, #328]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004802:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004804:	4b50      	ldr	r3, [pc, #320]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	494d      	ldr	r1, [pc, #308]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d040      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482a:	4b47      	ldr	r3, [pc, #284]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d115      	bne.n	8004862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e07f      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004842:	4b41      	ldr	r3, [pc, #260]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e073      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004852:	4b3d      	ldr	r3, [pc, #244]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e06b      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004862:	4b39      	ldr	r3, [pc, #228]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f023 0203 	bic.w	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4936      	ldr	r1, [pc, #216]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004874:	f7fe fffe 	bl	8003874 <HAL_GetTick>
 8004878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	e00a      	b.n	8004892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487c:	f7fe fffa 	bl	8003874 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e053      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004892:	4b2d      	ldr	r3, [pc, #180]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f003 020c 	and.w	r2, r3, #12
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d1eb      	bne.n	800487c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048a4:	4b27      	ldr	r3, [pc, #156]	@ (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d210      	bcs.n	80048d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	4b24      	ldr	r3, [pc, #144]	@ (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 0207 	bic.w	r2, r3, #7
 80048ba:	4922      	ldr	r1, [pc, #136]	@ (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	4313      	orrs	r3, r2
 80048c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b20      	ldr	r3, [pc, #128]	@ (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e032      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e0:	4b19      	ldr	r3, [pc, #100]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	4916      	ldr	r1, [pc, #88]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048fe:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	490e      	ldr	r1, [pc, #56]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	4313      	orrs	r3, r2
 8004910:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004912:	f000 f821 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 8004916:	4602      	mov	r2, r0
 8004918:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	490a      	ldr	r1, [pc, #40]	@ (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004924:	5ccb      	ldrb	r3, [r1, r3]
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	4a09      	ldr	r2, [pc, #36]	@ (8004950 <HAL_RCC_ClockConfig+0x1cc>)
 800492c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800492e:	4b09      	ldr	r3, [pc, #36]	@ (8004954 <HAL_RCC_ClockConfig+0x1d0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe ff5c 	bl	80037f0 <HAL_InitTick>

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40022000 	.word	0x40022000
 8004948:	40021000 	.word	0x40021000
 800494c:	08005bb0 	.word	0x08005bb0
 8004950:	20000010 	.word	0x20000010
 8004954:	20000070 	.word	0x20000070

08004958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	2300      	movs	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	2300      	movs	r3, #0
 800496c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004972:	4b1e      	ldr	r3, [pc, #120]	@ (80049ec <HAL_RCC_GetSysClockFreq+0x94>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 030c 	and.w	r3, r3, #12
 800497e:	2b04      	cmp	r3, #4
 8004980:	d002      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x30>
 8004982:	2b08      	cmp	r3, #8
 8004984:	d003      	beq.n	800498e <HAL_RCC_GetSysClockFreq+0x36>
 8004986:	e027      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004988:	4b19      	ldr	r3, [pc, #100]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800498a:	613b      	str	r3, [r7, #16]
      break;
 800498c:	e027      	b.n	80049de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	0c9b      	lsrs	r3, r3, #18
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	4a17      	ldr	r2, [pc, #92]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004998:	5cd3      	ldrb	r3, [r2, r3]
 800499a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d010      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049a6:	4b11      	ldr	r3, [pc, #68]	@ (80049ec <HAL_RCC_GetSysClockFreq+0x94>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	0c5b      	lsrs	r3, r3, #17
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	4a11      	ldr	r2, [pc, #68]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049b2:	5cd3      	ldrb	r3, [r2, r3]
 80049b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a0d      	ldr	r2, [pc, #52]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ba:	fb03 f202 	mul.w	r2, r3, r2
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	e004      	b.n	80049d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a0c      	ldr	r2, [pc, #48]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80049cc:	fb02 f303 	mul.w	r3, r2, r3
 80049d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	613b      	str	r3, [r7, #16]
      break;
 80049d6:	e002      	b.n	80049de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049d8:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80049da:	613b      	str	r3, [r7, #16]
      break;
 80049dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049de:	693b      	ldr	r3, [r7, #16]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000
 80049f0:	007a1200 	.word	0x007a1200
 80049f4:	08006448 	.word	0x08006448
 80049f8:	08006458 	.word	0x08006458
 80049fc:	003d0900 	.word	0x003d0900

08004a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a04:	4b02      	ldr	r3, [pc, #8]	@ (8004a10 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a06:	681b      	ldr	r3, [r3, #0]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr
 8004a10:	20000010 	.word	0x20000010

08004a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a18:	f7ff fff2 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b05      	ldr	r3, [pc, #20]	@ (8004a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	0a1b      	lsrs	r3, r3, #8
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	4903      	ldr	r1, [pc, #12]	@ (8004a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	08005bc0 	.word	0x08005bc0

08004a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a40:	f7ff ffde 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	0adb      	lsrs	r3, r3, #11
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	4903      	ldr	r1, [pc, #12]	@ (8004a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	08005bc0 	.word	0x08005bc0

08004a64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a98 <RCC_Delay+0x34>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a0a      	ldr	r2, [pc, #40]	@ (8004a9c <RCC_Delay+0x38>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0a5b      	lsrs	r3, r3, #9
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a80:	bf00      	nop
  }
  while (Delay --);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1e5a      	subs	r2, r3, #1
 8004a86:	60fa      	str	r2, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f9      	bne.n	8004a80 <RCC_Delay+0x1c>
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	20000010 	.word	0x20000010
 8004a9c:	10624dd3 	.word	0x10624dd3

08004aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e076      	b.n	8004ba0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d108      	bne.n	8004acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ac2:	d009      	beq.n	8004ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	61da      	str	r2, [r3, #28]
 8004aca:	e005      	b.n	8004ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fc fac2 	bl	800107c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5c:	ea42 0103 	orr.w	r1, r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	0c1a      	lsrs	r2, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f002 0204 	and.w	r2, r2, #4
 8004b7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bb8:	f7fe fe5c 	bl	8003874 <HAL_GetTick>
 8004bbc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d001      	beq.n	8004bd2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e12a      	b.n	8004e28 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_SPI_Transmit+0x36>
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e122      	b.n	8004e28 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_SPI_Transmit+0x48>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e11b      	b.n	8004e28 <HAL_SPI_Transmit+0x280>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	88fa      	ldrh	r2, [r7, #6]
 8004c10:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	88fa      	ldrh	r2, [r7, #6]
 8004c16:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c3e:	d10f      	bne.n	8004c60 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6a:	2b40      	cmp	r3, #64	@ 0x40
 8004c6c:	d007      	beq.n	8004c7e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c86:	d152      	bne.n	8004d2e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_SPI_Transmit+0xee>
 8004c90:	8b7b      	ldrh	r3, [r7, #26]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d145      	bne.n	8004d22 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	881a      	ldrh	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca6:	1c9a      	adds	r2, r3, #2
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cba:	e032      	b.n	8004d22 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d112      	bne.n	8004cf0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cce:	881a      	ldrh	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	1c9a      	adds	r2, r3, #2
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004cee:	e018      	b.n	8004d22 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cf0:	f7fe fdc0 	bl	8003874 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d803      	bhi.n	8004d08 <HAL_SPI_Transmit+0x160>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d102      	bne.n	8004d0e <HAL_SPI_Transmit+0x166>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e082      	b.n	8004e28 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1c7      	bne.n	8004cbc <HAL_SPI_Transmit+0x114>
 8004d2c:	e053      	b.n	8004dd6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_SPI_Transmit+0x194>
 8004d36:	8b7b      	ldrh	r3, [r7, #26]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d147      	bne.n	8004dcc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	330c      	adds	r3, #12
 8004d46:	7812      	ldrb	r2, [r2, #0]
 8004d48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d62:	e033      	b.n	8004dcc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d113      	bne.n	8004d9a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d98:	e018      	b.n	8004dcc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d9a:	f7fe fd6b 	bl	8003874 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d803      	bhi.n	8004db2 <HAL_SPI_Transmit+0x20a>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d102      	bne.n	8004db8 <HAL_SPI_Transmit+0x210>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e02d      	b.n	8004e28 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1c6      	bne.n	8004d64 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fbc4 	bl	8005568 <SPI_EndRxTxTransaction>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2220      	movs	r2, #32
 8004dea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004e26:	2300      	movs	r3, #0
  }
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d001      	beq.n	8004e50 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e104      	b.n	800505a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e58:	d112      	bne.n	8004e80 <HAL_SPI_Receive+0x50>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10e      	bne.n	8004e80 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2204      	movs	r2, #4
 8004e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f8f3 	bl	8005062 <HAL_SPI_TransmitReceive>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	e0ec      	b.n	800505a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e80:	f7fe fcf8 	bl	8003874 <HAL_GetTick>
 8004e84:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_SPI_Receive+0x62>
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e0e1      	b.n	800505a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_SPI_Receive+0x74>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e0da      	b.n	800505a <HAL_SPI_Receive+0x22a>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2204      	movs	r2, #4
 8004eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	88fa      	ldrh	r2, [r7, #6]
 8004eca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ef2:	d10f      	bne.n	8004f14 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f1e:	2b40      	cmp	r3, #64	@ 0x40
 8004f20:	d007      	beq.n	8004f32 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d170      	bne.n	800501c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f3a:	e035      	b.n	8004fa8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d115      	bne.n	8004f76 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f103 020c 	add.w	r2, r3, #12
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f56:	7812      	ldrb	r2, [r2, #0]
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f74:	e018      	b.n	8004fa8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f76:	f7fe fc7d 	bl	8003874 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d803      	bhi.n	8004f8e <HAL_SPI_Receive+0x15e>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8c:	d102      	bne.n	8004f94 <HAL_SPI_Receive+0x164>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e058      	b.n	800505a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1c4      	bne.n	8004f3c <HAL_SPI_Receive+0x10c>
 8004fb2:	e038      	b.n	8005026 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d113      	bne.n	8004fea <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	b292      	uxth	r2, r2
 8004fce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd4:	1c9a      	adds	r2, r3, #2
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fe8:	e018      	b.n	800501c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fea:	f7fe fc43 	bl	8003874 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d803      	bhi.n	8005002 <HAL_SPI_Receive+0x1d2>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d102      	bne.n	8005008 <HAL_SPI_Receive+0x1d8>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d109      	bne.n	800501c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e01e      	b.n	800505a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1c6      	bne.n	8004fb4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	6839      	ldr	r1, [r7, #0]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fa4a 	bl	80054c4 <SPI_EndRxTransaction>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005058:	2300      	movs	r3, #0
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b08a      	sub	sp, #40	@ 0x28
 8005066:	af00      	add	r7, sp, #0
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005070:	2301      	movs	r3, #1
 8005072:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005074:	f7fe fbfe 	bl	8003874 <HAL_GetTick>
 8005078:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005080:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005088:	887b      	ldrh	r3, [r7, #2]
 800508a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800508c:	7ffb      	ldrb	r3, [r7, #31]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d00c      	beq.n	80050ac <HAL_SPI_TransmitReceive+0x4a>
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005098:	d106      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x46>
 80050a2:	7ffb      	ldrb	r3, [r7, #31]
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d001      	beq.n	80050ac <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80050a8:	2302      	movs	r3, #2
 80050aa:	e17f      	b.n	80053ac <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_SPI_TransmitReceive+0x5c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <HAL_SPI_TransmitReceive+0x5c>
 80050b8:	887b      	ldrh	r3, [r7, #2]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e174      	b.n	80053ac <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x6e>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e16d      	b.n	80053ac <HAL_SPI_TransmitReceive+0x34a>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d003      	beq.n	80050ec <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2205      	movs	r2, #5
 80050e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	887a      	ldrh	r2, [r7, #2]
 80050fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	887a      	ldrh	r2, [r7, #2]
 8005102:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	887a      	ldrh	r2, [r7, #2]
 800510e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	887a      	ldrh	r2, [r7, #2]
 8005114:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512c:	2b40      	cmp	r3, #64	@ 0x40
 800512e:	d007      	beq.n	8005140 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800513e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005148:	d17e      	bne.n	8005248 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_SPI_TransmitReceive+0xf6>
 8005152:	8afb      	ldrh	r3, [r7, #22]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d16c      	bne.n	8005232 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	881a      	ldrh	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005168:	1c9a      	adds	r2, r3, #2
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800517c:	e059      	b.n	8005232 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b02      	cmp	r3, #2
 800518a:	d11b      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x162>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d016      	beq.n	80051c4 <HAL_SPI_TransmitReceive+0x162>
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	2b01      	cmp	r3, #1
 800519a:	d113      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a0:	881a      	ldrh	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ac:	1c9a      	adds	r2, r3, #2
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d119      	bne.n	8005206 <HAL_SPI_TransmitReceive+0x1a4>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d014      	beq.n	8005206 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e6:	b292      	uxth	r2, r2
 80051e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ee:	1c9a      	adds	r2, r3, #2
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005202:	2301      	movs	r3, #1
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005206:	f7fe fb35 	bl	8003874 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005212:	429a      	cmp	r2, r3
 8005214:	d80d      	bhi.n	8005232 <HAL_SPI_TransmitReceive+0x1d0>
 8005216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d009      	beq.n	8005232 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e0bc      	b.n	80053ac <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1a0      	bne.n	800517e <HAL_SPI_TransmitReceive+0x11c>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d19b      	bne.n	800517e <HAL_SPI_TransmitReceive+0x11c>
 8005246:	e082      	b.n	800534e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <HAL_SPI_TransmitReceive+0x1f4>
 8005250:	8afb      	ldrh	r3, [r7, #22]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d171      	bne.n	800533a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	330c      	adds	r3, #12
 8005260:	7812      	ldrb	r2, [r2, #0]
 8005262:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800527c:	e05d      	b.n	800533a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b02      	cmp	r3, #2
 800528a:	d11c      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x264>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d017      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x264>
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	2b01      	cmp	r3, #1
 800529a:	d114      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	330c      	adds	r3, #12
 80052a6:	7812      	ldrb	r2, [r2, #0]
 80052a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d119      	bne.n	8005308 <HAL_SPI_TransmitReceive+0x2a6>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d014      	beq.n	8005308 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005304:	2301      	movs	r3, #1
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005308:	f7fe fab4 	bl	8003874 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005314:	429a      	cmp	r2, r3
 8005316:	d803      	bhi.n	8005320 <HAL_SPI_TransmitReceive+0x2be>
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531e:	d102      	bne.n	8005326 <HAL_SPI_TransmitReceive+0x2c4>
 8005320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e038      	b.n	80053ac <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d19c      	bne.n	800527e <HAL_SPI_TransmitReceive+0x21c>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d197      	bne.n	800527e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800534e:	6a3a      	ldr	r2, [r7, #32]
 8005350:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f908 	bl	8005568 <SPI_EndRxTxTransaction>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e01d      	b.n	80053ac <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005378:	2300      	movs	r3, #0
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80053aa:	2300      	movs	r3, #0
  }
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3728      	adds	r7, #40	@ 0x28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4613      	mov	r3, r2
 80053c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053c4:	f7fe fa56 	bl	8003874 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	4413      	add	r3, r2
 80053d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053d4:	f7fe fa4e 	bl	8003874 <HAL_GetTick>
 80053d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053da:	4b39      	ldr	r3, [pc, #228]	@ (80054c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	015b      	lsls	r3, r3, #5
 80053e0:	0d1b      	lsrs	r3, r3, #20
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	fb02 f303 	mul.w	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ea:	e054      	b.n	8005496 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f2:	d050      	beq.n	8005496 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053f4:	f7fe fa3e 	bl	8003874 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	429a      	cmp	r2, r3
 8005402:	d902      	bls.n	800540a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d13d      	bne.n	8005486 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005418:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005422:	d111      	bne.n	8005448 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800542c:	d004      	beq.n	8005438 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005436:	d107      	bne.n	8005448 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005446:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005450:	d10f      	bne.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005470:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e017      	b.n	80054b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	3b01      	subs	r3, #1
 8005494:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4013      	ands	r3, r2
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	bf0c      	ite	eq
 80054a6:	2301      	moveq	r3, #1
 80054a8:	2300      	movne	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d19b      	bne.n	80053ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000010 	.word	0x20000010

080054c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054d8:	d111      	bne.n	80054fe <SPI_EndRxTransaction+0x3a>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e2:	d004      	beq.n	80054ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ec:	d107      	bne.n	80054fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054fc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005506:	d117      	bne.n	8005538 <SPI_EndRxTransaction+0x74>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005510:	d112      	bne.n	8005538 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2200      	movs	r2, #0
 800551a:	2101      	movs	r1, #1
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff ff49 	bl	80053b4 <SPI_WaitFlagStateUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01a      	beq.n	800555e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552c:	f043 0220 	orr.w	r2, r3, #32
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e013      	b.n	8005560 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2200      	movs	r2, #0
 8005540:	2180      	movs	r1, #128	@ 0x80
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7ff ff36 	bl	80053b4 <SPI_WaitFlagStateUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e000      	b.n	8005560 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2201      	movs	r2, #1
 800557c:	2102      	movs	r1, #2
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7ff ff18 	bl	80053b4 <SPI_WaitFlagStateUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558e:	f043 0220 	orr.w	r2, r3, #32
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e013      	b.n	80055c2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2200      	movs	r2, #0
 80055a2:	2180      	movs	r1, #128	@ 0x80
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff ff05 	bl	80053b4 <SPI_WaitFlagStateUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d007      	beq.n	80055c0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e000      	b.n	80055c2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e042      	b.n	8005662 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7fb fd8d 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2224      	movs	r2, #36	@ 0x24
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800560c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa08 	bl	8005a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005622:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005632:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005642:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b08a      	sub	sp, #40	@ 0x28
 800566e:	af02      	add	r7, sp, #8
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4613      	mov	r3, r2
 8005678:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b20      	cmp	r3, #32
 8005688:	d175      	bne.n	8005776 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_UART_Transmit+0x2c>
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e06e      	b.n	8005778 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2221      	movs	r2, #33	@ 0x21
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056a8:	f7fe f8e4 	bl	8003874 <HAL_GetTick>
 80056ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	88fa      	ldrh	r2, [r7, #6]
 80056b2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c2:	d108      	bne.n	80056d6 <HAL_UART_Transmit+0x6c>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056cc:	2300      	movs	r3, #0
 80056ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	e003      	b.n	80056de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056de:	e02e      	b.n	800573e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2200      	movs	r2, #0
 80056e8:	2180      	movs	r1, #128	@ 0x80
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f8df 	bl	80058ae <UART_WaitOnFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e03a      	b.n	8005778 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10b      	bne.n	8005720 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005716:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	3302      	adds	r3, #2
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e007      	b.n	8005730 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	3301      	adds	r3, #1
 800572e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1cb      	bne.n	80056e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2200      	movs	r2, #0
 8005750:	2140      	movs	r1, #64	@ 0x40
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f8ab 	bl	80058ae <UART_WaitOnFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e006      	b.n	8005778 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	e000      	b.n	8005778 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005776:	2302      	movs	r3, #2
  }
}
 8005778:	4618      	mov	r0, r3
 800577a:	3720      	adds	r7, #32
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	@ 0x28
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	4613      	mov	r3, r2
 800578e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b20      	cmp	r3, #32
 800579e:	f040 8081 	bne.w	80058a4 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_UART_Receive+0x2e>
 80057a8:	88fb      	ldrh	r3, [r7, #6]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e079      	b.n	80058a6 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2222      	movs	r2, #34	@ 0x22
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057c6:	f7fe f855 	bl	8003874 <HAL_GetTick>
 80057ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	88fa      	ldrh	r2, [r7, #6]
 80057d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e0:	d108      	bne.n	80057f4 <HAL_UART_Receive+0x74>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	e003      	b.n	80057fc <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80057fc:	e047      	b.n	800588e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2200      	movs	r2, #0
 8005806:	2120      	movs	r1, #32
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f850 	bl	80058ae <UART_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e042      	b.n	80058a6 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10c      	bne.n	8005840 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	b29b      	uxth	r3, r3
 800582e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005832:	b29a      	uxth	r2, r3
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	3302      	adds	r3, #2
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	e01f      	b.n	8005880 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005848:	d007      	beq.n	800585a <HAL_UART_Receive+0xda>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <HAL_UART_Receive+0xe8>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	e008      	b.n	800587a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005874:	b2da      	uxtb	r2, r3
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	3301      	adds	r3, #1
 800587e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1b2      	bne.n	80057fe <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	4613      	mov	r3, r2
 80058bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058be:	e03b      	b.n	8005938 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c6:	d037      	beq.n	8005938 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c8:	f7fd ffd4 	bl	8003874 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	6a3a      	ldr	r2, [r7, #32]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d302      	bcc.n	80058de <UART_WaitOnFlagUntilTimeout+0x30>
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e03a      	b.n	8005958 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d023      	beq.n	8005938 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b80      	cmp	r3, #128	@ 0x80
 80058f4:	d020      	beq.n	8005938 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b40      	cmp	r3, #64	@ 0x40
 80058fa:	d01d      	beq.n	8005938 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b08      	cmp	r3, #8
 8005908:	d116      	bne.n	8005938 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f81d 	bl	8005960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2208      	movs	r2, #8
 800592a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e00f      	b.n	8005958 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4013      	ands	r3, r2
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
 800594a:	2300      	movne	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	429a      	cmp	r2, r3
 8005954:	d0b4      	beq.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005960:	b480      	push	{r7}
 8005962:	b095      	sub	sp, #84	@ 0x54
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800597e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005988:	643a      	str	r2, [r7, #64]	@ 0x40
 800598a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800598e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005990:	e841 2300 	strex	r3, r2, [r1]
 8005994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e5      	bne.n	8005968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e5      	bne.n	800599c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d119      	bne.n	8005a0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	330c      	adds	r3, #12
 80059de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f023 0310 	bic.w	r3, r3, #16
 80059ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	330c      	adds	r3, #12
 80059f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059f8:	61ba      	str	r2, [r7, #24]
 80059fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6979      	ldr	r1, [r7, #20]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	613b      	str	r3, [r7, #16]
   return(result);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e5      	bne.n	80059d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a1a:	bf00      	nop
 8005a1c:	3754      	adds	r7, #84	@ 0x54
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005a5e:	f023 030c 	bic.w	r3, r3, #12
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2c      	ldr	r2, [pc, #176]	@ (8005b38 <UART_SetConfig+0x114>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d103      	bne.n	8005a94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a8c:	f7fe ffd6 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	e002      	b.n	8005a9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a94:	f7fe ffbe 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 8005a98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009a      	lsls	r2, r3, #2
 8005aa4:	441a      	add	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	4a22      	ldr	r2, [pc, #136]	@ (8005b3c <UART_SetConfig+0x118>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	0119      	lsls	r1, r3, #4
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009a      	lsls	r2, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b3c <UART_SetConfig+0x118>)
 8005ad2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	2064      	movs	r0, #100	@ 0x64
 8005ada:	fb00 f303 	mul.w	r3, r0, r3
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	3332      	adds	r3, #50	@ 0x32
 8005ae4:	4a15      	ldr	r2, [pc, #84]	@ (8005b3c <UART_SetConfig+0x118>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005af0:	4419      	add	r1, r3
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009a      	lsls	r2, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b08:	4b0c      	ldr	r3, [pc, #48]	@ (8005b3c <UART_SetConfig+0x118>)
 8005b0a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	2064      	movs	r0, #100	@ 0x64
 8005b12:	fb00 f303 	mul.w	r3, r0, r3
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	3332      	adds	r3, #50	@ 0x32
 8005b1c:	4a07      	ldr	r2, [pc, #28]	@ (8005b3c <UART_SetConfig+0x118>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	f003 020f 	and.w	r2, r3, #15
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40013800 	.word	0x40013800
 8005b3c:	51eb851f 	.word	0x51eb851f

08005b40 <memset>:
 8005b40:	4603      	mov	r3, r0
 8005b42:	4402      	add	r2, r0
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d100      	bne.n	8005b4a <memset+0xa>
 8005b48:	4770      	bx	lr
 8005b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4e:	e7f9      	b.n	8005b44 <memset+0x4>

08005b50 <__libc_init_array>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	2600      	movs	r6, #0
 8005b54:	4d0c      	ldr	r5, [pc, #48]	@ (8005b88 <__libc_init_array+0x38>)
 8005b56:	4c0d      	ldr	r4, [pc, #52]	@ (8005b8c <__libc_init_array+0x3c>)
 8005b58:	1b64      	subs	r4, r4, r5
 8005b5a:	10a4      	asrs	r4, r4, #2
 8005b5c:	42a6      	cmp	r6, r4
 8005b5e:	d109      	bne.n	8005b74 <__libc_init_array+0x24>
 8005b60:	f000 f81a 	bl	8005b98 <_init>
 8005b64:	2600      	movs	r6, #0
 8005b66:	4d0a      	ldr	r5, [pc, #40]	@ (8005b90 <__libc_init_array+0x40>)
 8005b68:	4c0a      	ldr	r4, [pc, #40]	@ (8005b94 <__libc_init_array+0x44>)
 8005b6a:	1b64      	subs	r4, r4, r5
 8005b6c:	10a4      	asrs	r4, r4, #2
 8005b6e:	42a6      	cmp	r6, r4
 8005b70:	d105      	bne.n	8005b7e <__libc_init_array+0x2e>
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b78:	4798      	blx	r3
 8005b7a:	3601      	adds	r6, #1
 8005b7c:	e7ee      	b.n	8005b5c <__libc_init_array+0xc>
 8005b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b82:	4798      	blx	r3
 8005b84:	3601      	adds	r6, #1
 8005b86:	e7f2      	b.n	8005b6e <__libc_init_array+0x1e>
 8005b88:	0800645c 	.word	0x0800645c
 8005b8c:	0800645c 	.word	0x0800645c
 8005b90:	0800645c 	.word	0x0800645c
 8005b94:	08006460 	.word	0x08006460

08005b98 <_init>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	bf00      	nop
 8005b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9e:	bc08      	pop	{r3}
 8005ba0:	469e      	mov	lr, r3
 8005ba2:	4770      	bx	lr

08005ba4 <_fini>:
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	bf00      	nop
 8005ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005baa:	bc08      	pop	{r3}
 8005bac:	469e      	mov	lr, r3
 8005bae:	4770      	bx	lr
