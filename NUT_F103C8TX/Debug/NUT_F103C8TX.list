
NUT_F103C8TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000498c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  08004a98  08004a98  00005a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005344  08005344  00007064  2**0
                  CONTENTS
  4 .ARM          00000000  08005344  08005344  00007064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005344  08005344  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005344  08005344  00006344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005348  08005348  00006348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800534c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000451c  20000064  080053b0  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004580  080053b0  00007580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9ae  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002494  00000000  00000000  00016a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00018ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbe  00000000  00000000  00019db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018701  00000000  00000000  0001a96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001374d  00000000  00000000  0003306f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d727  00000000  00000000  000467bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3ee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e0c  00000000  00000000  000d3f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d7d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a80 	.word	0x08004a80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08004a80 	.word	0x08004a80

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f002 ffe0 	bl	8003114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80f 	bl	8000176 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f90e 	bl	8000378 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f8e2 	bl	8000324 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000160:	f000 f84a 	bl	80001f8 <MX_CAN_Init>
  MX_I2C1_Init();
 8000164:	f000 f87e 	bl	8000264 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000168:	f000 f8aa 	bl	80002c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	vNut_Init();
 800016c:	f000 fbc8 	bl	8000900 <vNut_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		vNut_loop();
 8000170:	f000 fa32 	bl	80005d8 <vNut_loop>
 8000174:	e7fc      	b.n	8000170 <main+0x24>

08000176 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	b090      	sub	sp, #64	@ 0x40
 800017a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017c:	f107 0318 	add.w	r3, r7, #24
 8000180:	2228      	movs	r2, #40	@ 0x28
 8000182:	2100      	movs	r1, #0
 8000184:	4618      	mov	r0, r3
 8000186:	f004 fc4f 	bl	8004a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]
 8000196:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000198:	2302      	movs	r3, #2
 800019a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019c:	2301      	movs	r3, #1
 800019e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a0:	2310      	movs	r3, #16
 80001a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a4:	2302      	movs	r3, #2
 80001a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001a8:	2300      	movs	r3, #0
 80001aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ac:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	4618      	mov	r0, r3
 80001b8:	f003 fce6 	bl	8003b88 <HAL_RCC_OscConfig>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d001      	beq.n	80001c6 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001c2:	f000 f93b 	bl	800043c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c6:	230f      	movs	r3, #15
 80001c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ca:	2302      	movs	r3, #2
 80001cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2102      	movs	r1, #2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f003 ff53 	bl	800408c <HAL_RCC_ClockConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001ec:	f000 f926 	bl	800043c <Error_Handler>
  }
}
 80001f0:	bf00      	nop
 80001f2:	3740      	adds	r7, #64	@ 0x40
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80001fc:	4b17      	ldr	r3, [pc, #92]	@ (800025c <MX_CAN_Init+0x64>)
 80001fe:	4a18      	ldr	r2, [pc, #96]	@ (8000260 <MX_CAN_Init+0x68>)
 8000200:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 75;
 8000202:	4b16      	ldr	r3, [pc, #88]	@ (800025c <MX_CAN_Init+0x64>)
 8000204:	224b      	movs	r2, #75	@ 0x4b
 8000206:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000208:	4b14      	ldr	r3, [pc, #80]	@ (800025c <MX_CAN_Init+0x64>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800020e:	4b13      	ldr	r3, [pc, #76]	@ (800025c <MX_CAN_Init+0x64>)
 8000210:	2200      	movs	r2, #0
 8000212:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000214:	4b11      	ldr	r3, [pc, #68]	@ (800025c <MX_CAN_Init+0x64>)
 8000216:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800021a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800021c:	4b0f      	ldr	r3, [pc, #60]	@ (800025c <MX_CAN_Init+0x64>)
 800021e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000222:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	@ (800025c <MX_CAN_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800022a:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <MX_CAN_Init+0x64>)
 800022c:	2200      	movs	r2, #0
 800022e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <MX_CAN_Init+0x64>)
 8000232:	2200      	movs	r2, #0
 8000234:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000236:	4b09      	ldr	r3, [pc, #36]	@ (800025c <MX_CAN_Init+0x64>)
 8000238:	2200      	movs	r2, #0
 800023a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	@ (800025c <MX_CAN_Init+0x64>)
 800023e:	2200      	movs	r2, #0
 8000240:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	@ (800025c <MX_CAN_Init+0x64>)
 8000244:	2200      	movs	r2, #0
 8000246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	@ (800025c <MX_CAN_Init+0x64>)
 800024a:	f002 ffc5 	bl	80031d8 <HAL_CAN_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000254:	f000 f8f2 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000080 	.word	0x20000080
 8000260:	40006400 	.word	0x40006400

08000264 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000268:	4b12      	ldr	r3, [pc, #72]	@ (80002b4 <MX_I2C1_Init+0x50>)
 800026a:	4a13      	ldr	r2, [pc, #76]	@ (80002b8 <MX_I2C1_Init+0x54>)
 800026c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800026e:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <MX_I2C1_Init+0x50>)
 8000270:	4a12      	ldr	r2, [pc, #72]	@ (80002bc <MX_I2C1_Init+0x58>)
 8000272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000274:	4b0f      	ldr	r3, [pc, #60]	@ (80002b4 <MX_I2C1_Init+0x50>)
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 12;
 800027a:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <MX_I2C1_Init+0x50>)
 800027c:	220c      	movs	r2, #12
 800027e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000280:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <MX_I2C1_Init+0x50>)
 8000282:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000288:	4b0a      	ldr	r3, [pc, #40]	@ (80002b4 <MX_I2C1_Init+0x50>)
 800028a:	2200      	movs	r2, #0
 800028c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800028e:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <MX_I2C1_Init+0x50>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000294:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <MX_I2C1_Init+0x50>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800029a:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <MX_I2C1_Init+0x50>)
 800029c:	2280      	movs	r2, #128	@ 0x80
 800029e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002a0:	4804      	ldr	r0, [pc, #16]	@ (80002b4 <MX_I2C1_Init+0x50>)
 80002a2:	f003 fb2d 	bl	8003900 <HAL_I2C_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002ac:	f000 f8c6 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	200000a8 	.word	0x200000a8
 80002b8:	40005400 	.word	0x40005400
 80002bc:	000186a0 	.word	0x000186a0

080002c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002c4:	4b15      	ldr	r3, [pc, #84]	@ (800031c <MX_SPI1_Init+0x5c>)
 80002c6:	4a16      	ldr	r2, [pc, #88]	@ (8000320 <MX_SPI1_Init+0x60>)
 80002c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80002ca:	4b14      	ldr	r3, [pc, #80]	@ (800031c <MX_SPI1_Init+0x5c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002d0:	4b12      	ldr	r3, [pc, #72]	@ (800031c <MX_SPI1_Init+0x5c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002d6:	4b11      	ldr	r3, [pc, #68]	@ (800031c <MX_SPI1_Init+0x5c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <MX_SPI1_Init+0x5c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <MX_SPI1_Init+0x5c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <MX_SPI1_Init+0x5c>)
 80002ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f0:	4b0a      	ldr	r3, [pc, #40]	@ (800031c <MX_SPI1_Init+0x5c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002f6:	4b09      	ldr	r3, [pc, #36]	@ (800031c <MX_SPI1_Init+0x5c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002fc:	4b07      	ldr	r3, [pc, #28]	@ (800031c <MX_SPI1_Init+0x5c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <MX_SPI1_Init+0x5c>)
 8000304:	220a      	movs	r2, #10
 8000306:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000308:	4804      	ldr	r0, [pc, #16]	@ (800031c <MX_SPI1_Init+0x5c>)
 800030a:	f004 f84d 	bl	80043a8 <HAL_SPI_Init>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000314:	f000 f892 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	200000fc 	.word	0x200000fc
 8000320:	40013000 	.word	0x40013000

08000324 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000328:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 800032a:	4a12      	ldr	r2, [pc, #72]	@ (8000374 <MX_USART1_UART_Init+0x50>)
 800032c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800032e:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 8000330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000336:	4b0e      	ldr	r3, [pc, #56]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800033c:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000342:	4b0b      	ldr	r3, [pc, #44]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000348:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 800034a:	220c      	movs	r2, #12
 800034c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034e:	4b08      	ldr	r3, [pc, #32]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000354:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800035a:	4805      	ldr	r0, [pc, #20]	@ (8000370 <MX_USART1_UART_Init+0x4c>)
 800035c:	f004 f8a8 	bl	80044b0 <HAL_UART_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000366:	f000 f869 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000154 	.word	0x20000154
 8000374:	40013800 	.word	0x40013800

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	f107 0308 	add.w	r3, r7, #8
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038c:	4b27      	ldr	r3, [pc, #156]	@ (800042c <MX_GPIO_Init+0xb4>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a26      	ldr	r2, [pc, #152]	@ (800042c <MX_GPIO_Init+0xb4>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b24      	ldr	r3, [pc, #144]	@ (800042c <MX_GPIO_Init+0xb4>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0304 	and.w	r3, r3, #4
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a4:	4b21      	ldr	r3, [pc, #132]	@ (800042c <MX_GPIO_Init+0xb4>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a20      	ldr	r2, [pc, #128]	@ (800042c <MX_GPIO_Init+0xb4>)
 80003aa:	f043 0308 	orr.w	r3, r3, #8
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b1e      	ldr	r3, [pc, #120]	@ (800042c <MX_GPIO_Init+0xb4>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0308 	and.w	r3, r3, #8
 80003b8:	603b      	str	r3, [r7, #0]
 80003ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2104      	movs	r1, #4
 80003c0:	481b      	ldr	r0, [pc, #108]	@ (8000430 <MX_GPIO_Init+0xb8>)
 80003c2:	f003 fa84 	bl	80038ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9, GPIO_PIN_RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	f240 2107 	movw	r1, #519	@ 0x207
 80003cc:	4819      	ldr	r0, [pc, #100]	@ (8000434 <MX_GPIO_Init+0xbc>)
 80003ce:	f003 fa7e 	bl	80038ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003d2:	2304      	movs	r3, #4
 80003d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d6:	2301      	movs	r3, #1
 80003d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	2300      	movs	r3, #0
 80003dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003de:	2302      	movs	r3, #2
 80003e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e2:	f107 0308 	add.w	r3, r7, #8
 80003e6:	4619      	mov	r1, r3
 80003e8:	4811      	ldr	r0, [pc, #68]	@ (8000430 <MX_GPIO_Init+0xb8>)
 80003ea:	f003 f8d5 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003ee:	2308      	movs	r3, #8
 80003f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80003f2:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <MX_GPIO_Init+0xc0>)
 80003f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	4619      	mov	r1, r3
 8000400:	480b      	ldr	r0, [pc, #44]	@ (8000430 <MX_GPIO_Init+0xb8>)
 8000402:	f003 f8c9 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9;
 8000406:	f240 2307 	movw	r3, #519	@ 0x207
 800040a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000414:	2302      	movs	r3, #2
 8000416:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000418:	f107 0308 	add.w	r3, r7, #8
 800041c:	4619      	mov	r1, r3
 800041e:	4805      	ldr	r0, [pc, #20]	@ (8000434 <MX_GPIO_Init+0xbc>)
 8000420:	f003 f8ba 	bl	8003598 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000424:	bf00      	nop
 8000426:	3718      	adds	r7, #24
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40021000 	.word	0x40021000
 8000430:	40010800 	.word	0x40010800
 8000434:	40010c00 	.word	0x40010c00
 8000438:	10310000 	.word	0x10310000

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <Error_Handler+0x8>

08000448 <_uNutComm_DecodeHeader>:
void _vNutComm_UART_Enable(void);
void _vNutComm_SPI_Enable(void);
void _vNutComm_I2C_Enable(void);
void _vNutComm_CAN_Enable(void);
/* Decode header */
uint32_t _uNutComm_DecodeHeader() {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
	uint32_t length;
	uint8_t i;
	uint16_t command;
	/* Decode the header */
	command = rx_header[0];
 800044e:	4b43      	ldr	r3, [pc, #268]	@ (800055c <_uNutComm_DecodeHeader+0x114>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	80bb      	strh	r3, [r7, #4]
	command <<= 8;
 8000454:	88bb      	ldrh	r3, [r7, #4]
 8000456:	021b      	lsls	r3, r3, #8
 8000458:	80bb      	strh	r3, [r7, #4]
	command |= rx_header[1];
 800045a:	4b40      	ldr	r3, [pc, #256]	@ (800055c <_uNutComm_DecodeHeader+0x114>)
 800045c:	785b      	ldrb	r3, [r3, #1]
 800045e:	461a      	mov	r2, r3
 8000460:	88bb      	ldrh	r3, [r7, #4]
 8000462:	4313      	orrs	r3, r2
 8000464:	80bb      	strh	r3, [r7, #4]
	length = rx_header[4];
 8000466:	4b3d      	ldr	r3, [pc, #244]	@ (800055c <_uNutComm_DecodeHeader+0x114>)
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	603b      	str	r3, [r7, #0]
	length <<= 8;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	021b      	lsls	r3, r3, #8
 8000470:	603b      	str	r3, [r7, #0]
	length |= rx_header[5];
 8000472:	4b3a      	ldr	r3, [pc, #232]	@ (800055c <_uNutComm_DecodeHeader+0x114>)
 8000474:	795b      	ldrb	r3, [r3, #5]
 8000476:	461a      	mov	r2, r3
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	4313      	orrs	r3, r2
 800047c:	603b      	str	r3, [r7, #0]
	length <<= 8;
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	021b      	lsls	r3, r3, #8
 8000482:	603b      	str	r3, [r7, #0]
	length |= rx_header[6];
 8000484:	4b35      	ldr	r3, [pc, #212]	@ (800055c <_uNutComm_DecodeHeader+0x114>)
 8000486:	799b      	ldrb	r3, [r3, #6]
 8000488:	461a      	mov	r2, r3
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	4313      	orrs	r3, r2
 800048e:	603b      	str	r3, [r7, #0]
	length <<= 8;
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	021b      	lsls	r3, r3, #8
 8000494:	603b      	str	r3, [r7, #0]
	length |= rx_header[7];
 8000496:	4b31      	ldr	r3, [pc, #196]	@ (800055c <_uNutComm_DecodeHeader+0x114>)
 8000498:	79db      	ldrb	r3, [r3, #7]
 800049a:	461a      	mov	r2, r3
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	4313      	orrs	r3, r2
 80004a0:	603b      	str	r3, [r7, #0]
	/* Parse command */
	cmd_program = 0;
 80004a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000560 <_uNutComm_DecodeHeader+0x118>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < sizeof(sys_cmd) / 2; i++) {
 80004a8:	2300      	movs	r3, #0
 80004aa:	71fb      	strb	r3, [r7, #7]
 80004ac:	e013      	b.n	80004d6 <_uNutComm_DecodeHeader+0x8e>
		if (cmd_program)
 80004ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000560 <_uNutComm_DecodeHeader+0x118>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d113      	bne.n	80004de <_uNutComm_DecodeHeader+0x96>
			break;
		if (sys_cmd[i] == command)
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000564 <_uNutComm_DecodeHeader+0x11c>)
 80004ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004be:	88ba      	ldrh	r2, [r7, #4]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d105      	bne.n	80004d0 <_uNutComm_DecodeHeader+0x88>
			cmd_program = sys_cmd_prog[i];	// set the program
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	4a28      	ldr	r2, [pc, #160]	@ (8000568 <_uNutComm_DecodeHeader+0x120>)
 80004c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004cc:	4a24      	ldr	r2, [pc, #144]	@ (8000560 <_uNutComm_DecodeHeader+0x118>)
 80004ce:	6013      	str	r3, [r2, #0]
	for (i = 0; i < sizeof(sys_cmd) / 2; i++) {
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	3301      	adds	r3, #1
 80004d4:	71fb      	strb	r3, [r7, #7]
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d9e8      	bls.n	80004ae <_uNutComm_DecodeHeader+0x66>
 80004dc:	e000      	b.n	80004e0 <_uNutComm_DecodeHeader+0x98>
			break;
 80004de:	bf00      	nop
	}
	for (i = 0; i < 255; i++) {		// just scan all TODO need to fix this
 80004e0:	2300      	movs	r3, #0
 80004e2:	71fb      	strb	r3, [r7, #7]
 80004e4:	e019      	b.n	800051a <_uNutComm_DecodeHeader+0xd2>
		if (cmd_program)
 80004e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000560 <_uNutComm_DecodeHeader+0x118>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d119      	bne.n	8000522 <_uNutComm_DecodeHeader+0xda>
			break;
		if (user_cmd[i] == command)
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	4a1e      	ldr	r2, [pc, #120]	@ (800056c <_uNutComm_DecodeHeader+0x124>)
 80004f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004f6:	88ba      	ldrh	r2, [r7, #4]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d105      	bne.n	8000508 <_uNutComm_DecodeHeader+0xc0>
			cmd_program = user_cmd_prog[i];	// set the program
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000570 <_uNutComm_DecodeHeader+0x128>)
 8000500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000504:	4a16      	ldr	r2, [pc, #88]	@ (8000560 <_uNutComm_DecodeHeader+0x118>)
 8000506:	6013      	str	r3, [r2, #0]
		if (user_cmd[i] == 0)
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	4a18      	ldr	r2, [pc, #96]	@ (800056c <_uNutComm_DecodeHeader+0x124>)
 800050c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d008      	beq.n	8000526 <_uNutComm_DecodeHeader+0xde>
	for (i = 0; i < 255; i++) {		// just scan all TODO need to fix this
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	3301      	adds	r3, #1
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2bff      	cmp	r3, #255	@ 0xff
 800051e:	d1e2      	bne.n	80004e6 <_uNutComm_DecodeHeader+0x9e>
 8000520:	e002      	b.n	8000528 <_uNutComm_DecodeHeader+0xe0>
			break;
 8000522:	bf00      	nop
 8000524:	e000      	b.n	8000528 <_uNutComm_DecodeHeader+0xe0>
			break;
 8000526:	bf00      	nop
	}
	/* If the command is not found, then continue to receive the payload if possible */
	if (!cmd_program) {
 8000528:	4b0d      	ldr	r3, [pc, #52]	@ (8000560 <_uNutComm_DecodeHeader+0x118>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d105      	bne.n	800053c <_uNutComm_DecodeHeader+0xf4>
		status = NUT_WARNING;
 8000530:	4b10      	ldr	r3, [pc, #64]	@ (8000574 <_uNutComm_DecodeHeader+0x12c>)
 8000532:	2201      	movs	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
		error = NUT_ERROR_CMD_UNKNOWN;
 8000536:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <_uNutComm_DecodeHeader+0x130>)
 8000538:	2205      	movs	r2, #5
 800053a:	701a      	strb	r2, [r3, #0]
	}
	if (length > NUT_BUFFER_SIZE) {
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000542:	d905      	bls.n	8000550 <_uNutComm_DecodeHeader+0x108>
		status = NUT_ERROR;
 8000544:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <_uNutComm_DecodeHeader+0x12c>)
 8000546:	2202      	movs	r2, #2
 8000548:	701a      	strb	r2, [r3, #0]
		error = NUT_ERROR_PAYLOAD_SIZE;
 800054a:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <_uNutComm_DecodeHeader+0x130>)
 800054c:	2203      	movs	r2, #3
 800054e:	701a      	strb	r2, [r3, #0]
	}
	return length;
 8000550:	683b      	ldr	r3, [r7, #0]
}
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	200011ac 	.word	0x200011ac
 8000560:	2000019c 	.word	0x2000019c
 8000564:	20000000 	.word	0x20000000
 8000568:	20000004 	.word	0x20000004
 800056c:	20000030 	.word	0x20000030
 8000570:	20000040 	.word	0x20000040
 8000574:	200001a0 	.word	0x200001a0
 8000578:	200001a1 	.word	0x200001a1

0800057c <_Nut_Command_ECHO>:
	// no need to check for wake up
}

/* System command program definitions */
NutStatus_e _Nut_Command_ECHO(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 800057c:	b480      	push	{r7}
 800057e:	b087      	sub	sp, #28
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	603b      	str	r3, [r7, #0]
	uint32_t i;
	*result_length = received_data_length;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < received_data_length; i++)
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	e00a      	b.n	80005ac <_Nut_Command_ECHO+0x30>
		result_buffer_ptr[i] = received_data_ptr[i];
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	441a      	add	r2, r3
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	440b      	add	r3, r1
 80005a2:	7812      	ldrb	r2, [r2, #0]
 80005a4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < received_data_length; i++)
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	3301      	adds	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d3f0      	bcc.n	8000596 <_Nut_Command_ECHO+0x1a>
	return NUT_OK;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	371c      	adds	r7, #28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <_vNutComm_Init>:

/* Initializes communication interfaces */
void _vNutComm_Init() {
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	/* Constrain the size of each burst */
	comm_max_batch_size = (65535 > NUT_BUFFER_SIZE) ? NUT_BUFFER_SIZE : 65535;
 80005c4:	4b03      	ldr	r3, [pc, #12]	@ (80005d4 <_vNutComm_Init+0x14>)
 80005c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005ca:	801a      	strh	r2, [r3, #0]

}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	200021b4 	.word	0x200021b4

080005d8 <vNut_loop>:

/* Continuously check for signs of communication */
void vNut_loop() {
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b089      	sub	sp, #36	@ 0x24
 80005dc:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef retstatus = HAL_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	73fb      	strb	r3, [r7, #15]
	uint32_t length;
	uint8_t *tempptr;
	uint32_t response_length = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
	uint32_t data_length;

	/* Check UART */
	if (NUT_UART.Instance->SR & UART_FLAG_RXNE) {
 80005e6:	4b9d      	ldr	r3, [pc, #628]	@ (800085c <vNut_loop+0x284>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 0320 	and.w	r3, r3, #32
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f000 8176 	beq.w	80008e2 <vNut_loop+0x30a>
		/* Record the first byte of header */
		rx_header[0] = (uint8_t) NUT_UART.Instance->DR;
 80005f6:	4b99      	ldr	r3, [pc, #612]	@ (800085c <vNut_loop+0x284>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b98      	ldr	r3, [pc, #608]	@ (8000860 <vNut_loop+0x288>)
 8000600:	701a      	strb	r2, [r3, #0]
		/* Disable other interfaces */
		_vNutComm_SPI_Disable();
 8000602:	f000 f9ff 	bl	8000a04 <_vNutComm_SPI_Disable>
		_vNutComm_I2C_Disable();
 8000606:	f000 fa0b 	bl	8000a20 <_vNutComm_I2C_Disable>
		_vNutComm_CAN_Disable();
 800060a:	f000 fa17 	bl	8000a3c <_vNutComm_CAN_Disable>
		/* Finish receiving the header */
		retstatus = HAL_UART_Receive(&NUT_UART, rx_header + 1, 7, 100);
 800060e:	4995      	ldr	r1, [pc, #596]	@ (8000864 <vNut_loop+0x28c>)
 8000610:	2364      	movs	r3, #100	@ 0x64
 8000612:	2207      	movs	r2, #7
 8000614:	4891      	ldr	r0, [pc, #580]	@ (800085c <vNut_loop+0x284>)
 8000616:	f004 f826 	bl	8004666 <HAL_UART_Receive>
 800061a:	4603      	mov	r3, r0
 800061c:	73fb      	strb	r3, [r7, #15]
		if (retstatus == HAL_TIMEOUT) {
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	2b03      	cmp	r3, #3
 8000622:	d10c      	bne.n	800063e <vNut_loop+0x66>
			status = NUT_WARNING;
 8000624:	4b90      	ldr	r3, [pc, #576]	@ (8000868 <vNut_loop+0x290>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
			error = NUT_ERROR_TIMEOUT;
 800062a:	4b90      	ldr	r3, [pc, #576]	@ (800086c <vNut_loop+0x294>)
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
			/* Enable other interfaces */
			_vNutComm_SPI_Enable();
 8000630:	f000 fa28 	bl	8000a84 <_vNutComm_SPI_Enable>
			_vNutComm_I2C_Enable();
 8000634:	f000 fa3c 	bl	8000ab0 <_vNutComm_I2C_Enable>
			_vNutComm_CAN_Enable();
 8000638:	f000 fa50 	bl	8000adc <_vNutComm_CAN_Enable>
			return;
 800063c:	e155      	b.n	80008ea <vNut_loop+0x312>
		}
		if (retstatus == HAL_BUSY) {
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d10c      	bne.n	800065e <vNut_loop+0x86>
			status = NUT_WARNING;
 8000644:	4b88      	ldr	r3, [pc, #544]	@ (8000868 <vNut_loop+0x290>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
			error = NUT_ERROR_BUSY;
 800064a:	4b88      	ldr	r3, [pc, #544]	@ (800086c <vNut_loop+0x294>)
 800064c:	2202      	movs	r2, #2
 800064e:	701a      	strb	r2, [r3, #0]
			/* Enable other interfaces */
			_vNutComm_SPI_Enable();
 8000650:	f000 fa18 	bl	8000a84 <_vNutComm_SPI_Enable>
			_vNutComm_I2C_Enable();
 8000654:	f000 fa2c 	bl	8000ab0 <_vNutComm_I2C_Enable>
			_vNutComm_CAN_Enable();
 8000658:	f000 fa40 	bl	8000adc <_vNutComm_CAN_Enable>
			return;
 800065c:	e145      	b.n	80008ea <vNut_loop+0x312>
		}
		if (retstatus != HAL_OK) {
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00c      	beq.n	800067e <vNut_loop+0xa6>
			status = NUT_WARNING;
 8000664:	4b80      	ldr	r3, [pc, #512]	@ (8000868 <vNut_loop+0x290>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
			error = NUT_ERROR_UNKNOWN;
 800066a:	4b80      	ldr	r3, [pc, #512]	@ (800086c <vNut_loop+0x294>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
			/* Enable other interfaces */
			_vNutComm_SPI_Enable();
 8000670:	f000 fa08 	bl	8000a84 <_vNutComm_SPI_Enable>
			_vNutComm_I2C_Enable();
 8000674:	f000 fa1c 	bl	8000ab0 <_vNutComm_I2C_Enable>
			_vNutComm_CAN_Enable();
 8000678:	f000 fa30 	bl	8000adc <_vNutComm_CAN_Enable>
			return;
 800067c:	e135      	b.n	80008ea <vNut_loop+0x312>
		}
		/* Decode the header */
		length = _uNutComm_DecodeHeader();
 800067e:	f7ff fee3 	bl	8000448 <_uNutComm_DecodeHeader>
 8000682:	6178      	str	r0, [r7, #20]
		/* If ERROR occurred, prepare to send error package */
		if (status == NUT_ERROR) {
 8000684:	4b78      	ldr	r3, [pc, #480]	@ (8000868 <vNut_loop+0x290>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d137      	bne.n	80006fc <vNut_loop+0x124>
			/* Wait until the other side to finish transmission */
			while (length) {
 800068c:	e021      	b.n	80006d2 <vNut_loop+0xfa>
				if (length < comm_max_batch_size) {
 800068e:	4b78      	ldr	r3, [pc, #480]	@ (8000870 <vNut_loop+0x298>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	4293      	cmp	r3, r2
 8000698:	d20a      	bcs.n	80006b0 <vNut_loop+0xd8>
					HAL_UART_Receive(&NUT_UART, rx_header, length, 1000);
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	b29a      	uxth	r2, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a2:	496f      	ldr	r1, [pc, #444]	@ (8000860 <vNut_loop+0x288>)
 80006a4:	486d      	ldr	r0, [pc, #436]	@ (800085c <vNut_loop+0x284>)
 80006a6:	f003 ffde 	bl	8004666 <HAL_UART_Receive>
					length = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	e010      	b.n	80006d2 <vNut_loop+0xfa>
				} else {
					if (HAL_UART_Receive(&NUT_UART, rx_header, comm_max_batch_size, 1000) == HAL_TIMEOUT)
 80006b0:	4b6f      	ldr	r3, [pc, #444]	@ (8000870 <vNut_loop+0x298>)
 80006b2:	881a      	ldrh	r2, [r3, #0]
 80006b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b8:	4969      	ldr	r1, [pc, #420]	@ (8000860 <vNut_loop+0x288>)
 80006ba:	4868      	ldr	r0, [pc, #416]	@ (800085c <vNut_loop+0x284>)
 80006bc:	f003 ffd3 	bl	8004666 <HAL_UART_Receive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	d009      	beq.n	80006da <vNut_loop+0x102>
						break;	// also break on timeout
					length -= comm_max_batch_size;
 80006c6:	4b6a      	ldr	r3, [pc, #424]	@ (8000870 <vNut_loop+0x298>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	1a9b      	subs	r3, r3, r2
 80006d0:	617b      	str	r3, [r7, #20]
			while (length) {
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1da      	bne.n	800068e <vNut_loop+0xb6>
 80006d8:	e000      	b.n	80006dc <vNut_loop+0x104>
						break;	// also break on timeout
 80006da:	bf00      	nop
				}
			}
			/* Send error package */
			error_header[1] = NUT_ERROR_PAYLOAD_SIZE;
 80006dc:	4b65      	ldr	r3, [pc, #404]	@ (8000874 <vNut_loop+0x29c>)
 80006de:	2203      	movs	r2, #3
 80006e0:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&NUT_UART, error_header, sizeof(error_header), 100);
 80006e2:	2364      	movs	r3, #100	@ 0x64
 80006e4:	2206      	movs	r2, #6
 80006e6:	4963      	ldr	r1, [pc, #396]	@ (8000874 <vNut_loop+0x29c>)
 80006e8:	485c      	ldr	r0, [pc, #368]	@ (800085c <vNut_loop+0x284>)
 80006ea:	f003 ff31 	bl	8004550 <HAL_UART_Transmit>
			/* And just return */
			/* Enable other interfaces */
			_vNutComm_SPI_Enable();
 80006ee:	f000 f9c9 	bl	8000a84 <_vNutComm_SPI_Enable>
			_vNutComm_I2C_Enable();
 80006f2:	f000 f9dd 	bl	8000ab0 <_vNutComm_I2C_Enable>
			_vNutComm_CAN_Enable();
 80006f6:	f000 f9f1 	bl	8000adc <_vNutComm_CAN_Enable>
			return;
 80006fa:	e0f6      	b.n	80008ea <vNut_loop+0x312>
		}
		/* Receive the payload */
		data_length = length;
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	60bb      	str	r3, [r7, #8]
		tempptr = rx_buffer;
 8000700:	4b5d      	ldr	r3, [pc, #372]	@ (8000878 <vNut_loop+0x2a0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	613b      	str	r3, [r7, #16]
		while (length) {
 8000706:	e03d      	b.n	8000784 <vNut_loop+0x1ac>
			if (length < comm_max_batch_size) {
 8000708:	4b59      	ldr	r3, [pc, #356]	@ (8000870 <vNut_loop+0x298>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	4293      	cmp	r3, r2
 8000712:	d20a      	bcs.n	800072a <vNut_loop+0x152>
				HAL_UART_Receive(&NUT_UART, tempptr, length, 1000);
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	b29a      	uxth	r2, r3
 8000718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800071c:	6939      	ldr	r1, [r7, #16]
 800071e:	484f      	ldr	r0, [pc, #316]	@ (800085c <vNut_loop+0x284>)
 8000720:	f003 ffa1 	bl	8004666 <HAL_UART_Receive>
				length = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	e02c      	b.n	8000784 <vNut_loop+0x1ac>
			} else {
				if (HAL_UART_Receive(&NUT_UART, tempptr, comm_max_batch_size, 1000) == HAL_TIMEOUT) {
 800072a:	4b51      	ldr	r3, [pc, #324]	@ (8000870 <vNut_loop+0x298>)
 800072c:	881a      	ldrh	r2, [r3, #0]
 800072e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000732:	6939      	ldr	r1, [r7, #16]
 8000734:	4849      	ldr	r0, [pc, #292]	@ (800085c <vNut_loop+0x284>)
 8000736:	f003 ff96 	bl	8004666 <HAL_UART_Receive>
 800073a:	4603      	mov	r3, r0
 800073c:	2b03      	cmp	r3, #3
 800073e:	d115      	bne.n	800076c <vNut_loop+0x194>
					status = NUT_ERROR;
 8000740:	4b49      	ldr	r3, [pc, #292]	@ (8000868 <vNut_loop+0x290>)
 8000742:	2202      	movs	r2, #2
 8000744:	701a      	strb	r2, [r3, #0]
					error = NUT_ERROR_TIMEOUT;
 8000746:	4b49      	ldr	r3, [pc, #292]	@ (800086c <vNut_loop+0x294>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
					/* Send error package on timeout */
					error_header[1] = NUT_ERROR_TIMEOUT;
 800074c:	4b49      	ldr	r3, [pc, #292]	@ (8000874 <vNut_loop+0x29c>)
 800074e:	2201      	movs	r2, #1
 8000750:	705a      	strb	r2, [r3, #1]
					HAL_UART_Transmit(&NUT_UART, error_header, sizeof(error_header), 100);
 8000752:	2364      	movs	r3, #100	@ 0x64
 8000754:	2206      	movs	r2, #6
 8000756:	4947      	ldr	r1, [pc, #284]	@ (8000874 <vNut_loop+0x29c>)
 8000758:	4840      	ldr	r0, [pc, #256]	@ (800085c <vNut_loop+0x284>)
 800075a:	f003 fef9 	bl	8004550 <HAL_UART_Transmit>
					/* And just return */
					/* Enable other interfaces */
					_vNutComm_SPI_Enable();
 800075e:	f000 f991 	bl	8000a84 <_vNutComm_SPI_Enable>
					_vNutComm_I2C_Enable();
 8000762:	f000 f9a5 	bl	8000ab0 <_vNutComm_I2C_Enable>
					_vNutComm_CAN_Enable();
 8000766:	f000 f9b9 	bl	8000adc <_vNutComm_CAN_Enable>
					return;
 800076a:	e0be      	b.n	80008ea <vNut_loop+0x312>
				}
				tempptr += comm_max_batch_size;
 800076c:	4b40      	ldr	r3, [pc, #256]	@ (8000870 <vNut_loop+0x298>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	4413      	add	r3, r2
 8000776:	613b      	str	r3, [r7, #16]
				length -= comm_max_batch_size;
 8000778:	4b3d      	ldr	r3, [pc, #244]	@ (8000870 <vNut_loop+0x298>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	617b      	str	r3, [r7, #20]
		while (length) {
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1be      	bne.n	8000708 <vNut_loop+0x130>
			}
		}
		/* Process the command and give feedback */
		if (cmd_program) {
 800078a:	4b3c      	ldr	r3, [pc, #240]	@ (800087c <vNut_loop+0x2a4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	f000 8097 	beq.w	80008c2 <vNut_loop+0x2ea>
			status = cmd_program(rx_buffer, data_length, tx_buffer, &response_length, NUT_BUFFER_SIZE);
 8000794:	4b39      	ldr	r3, [pc, #228]	@ (800087c <vNut_loop+0x2a4>)
 8000796:	681c      	ldr	r4, [r3, #0]
 8000798:	4b37      	ldr	r3, [pc, #220]	@ (8000878 <vNut_loop+0x2a0>)
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	4b38      	ldr	r3, [pc, #224]	@ (8000880 <vNut_loop+0x2a8>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007a6:	9100      	str	r1, [sp, #0]
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	47a0      	blx	r4
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000868 <vNut_loop+0x290>)
 80007b2:	701a      	strb	r2, [r3, #0]
			/* Send response package according to response length */
			if (response_length > NUT_BUFFER_SIZE) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80007ba:	d90f      	bls.n	80007dc <vNut_loop+0x204>
				error_header[1] = NUT_ERROR_PAYLOAD_SIZE;
 80007bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000874 <vNut_loop+0x29c>)
 80007be:	2203      	movs	r2, #3
 80007c0:	705a      	strb	r2, [r3, #1]
				HAL_UART_Transmit(&NUT_UART, error_header, sizeof(error_header), 100);
 80007c2:	2364      	movs	r3, #100	@ 0x64
 80007c4:	2206      	movs	r2, #6
 80007c6:	492b      	ldr	r1, [pc, #172]	@ (8000874 <vNut_loop+0x29c>)
 80007c8:	4824      	ldr	r0, [pc, #144]	@ (800085c <vNut_loop+0x284>)
 80007ca:	f003 fec1 	bl	8004550 <HAL_UART_Transmit>
				/* Enable other interfaces */
				_vNutComm_SPI_Enable();
 80007ce:	f000 f959 	bl	8000a84 <_vNutComm_SPI_Enable>
				_vNutComm_I2C_Enable();
 80007d2:	f000 f96d 	bl	8000ab0 <_vNutComm_I2C_Enable>
				_vNutComm_CAN_Enable();
 80007d6:	f000 f981 	bl	8000adc <_vNutComm_CAN_Enable>
				return;
 80007da:	e086      	b.n	80008ea <vNut_loop+0x312>
			} else {
				/* Prepare header */
				if (status == NUT_OK) {
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <vNut_loop+0x290>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d106      	bne.n	80007f2 <vNut_loop+0x21a>
					response_header[0] = NUT_OK;
 80007e4:	4b27      	ldr	r3, [pc, #156]	@ (8000884 <vNut_loop+0x2ac>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
					response_header[1] = 0;
 80007ea:	4b26      	ldr	r3, [pc, #152]	@ (8000884 <vNut_loop+0x2ac>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	705a      	strb	r2, [r3, #1]
 80007f0:	e005      	b.n	80007fe <vNut_loop+0x226>
				} else {
					response_header[0] = NUT_ERROR;
 80007f2:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <vNut_loop+0x2ac>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	701a      	strb	r2, [r3, #0]
					response_header[1] = NUT_ERROR_USER_CODE;
 80007f8:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <vNut_loop+0x2ac>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	705a      	strb	r2, [r3, #1]
				}
				response_header[2] = 0x0FF & (response_length >> 24);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	0e1b      	lsrs	r3, r3, #24
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <vNut_loop+0x2ac>)
 8000806:	709a      	strb	r2, [r3, #2]
				response_header[3] = 0x0FF & (response_length >> 16);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	0c1b      	lsrs	r3, r3, #16
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <vNut_loop+0x2ac>)
 8000810:	70da      	strb	r2, [r3, #3]
				response_header[4] = 0x0FF & (response_length >> 8);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <vNut_loop+0x2ac>)
 800081a:	711a      	strb	r2, [r3, #4]
				response_header[5] = 0x0FF & (response_length);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <vNut_loop+0x2ac>)
 8000822:	715a      	strb	r2, [r3, #5]
				/* Send the header */
				HAL_UART_Transmit(&NUT_UART, response_header, sizeof(response_header), 100);
 8000824:	2364      	movs	r3, #100	@ 0x64
 8000826:	2206      	movs	r2, #6
 8000828:	4916      	ldr	r1, [pc, #88]	@ (8000884 <vNut_loop+0x2ac>)
 800082a:	480c      	ldr	r0, [pc, #48]	@ (800085c <vNut_loop+0x284>)
 800082c:	f003 fe90 	bl	8004550 <HAL_UART_Transmit>
				/* Then send the payload */
				tempptr = tx_buffer;
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <vNut_loop+0x2a8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	613b      	str	r3, [r7, #16]
				while (response_length) {
 8000836:	e03a      	b.n	80008ae <vNut_loop+0x2d6>
					if (response_length < comm_max_batch_size) {
 8000838:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <vNut_loop+0x298>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	d921      	bls.n	8000888 <vNut_loop+0x2b0>
						HAL_UART_Transmit(&NUT_UART, tempptr, response_length, 1000);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	b29a      	uxth	r2, r3
 8000848:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084c:	6939      	ldr	r1, [r7, #16]
 800084e:	4803      	ldr	r0, [pc, #12]	@ (800085c <vNut_loop+0x284>)
 8000850:	f003 fe7e 	bl	8004550 <HAL_UART_Transmit>
						response_length = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	e029      	b.n	80008ae <vNut_loop+0x2d6>
 800085a:	bf00      	nop
 800085c:	20000154 	.word	0x20000154
 8000860:	200011ac 	.word	0x200011ac
 8000864:	200011ad 	.word	0x200011ad
 8000868:	200001a0 	.word	0x200001a0
 800086c:	200001a1 	.word	0x200001a1
 8000870:	200021b4 	.word	0x200021b4
 8000874:	20000014 	.word	0x20000014
 8000878:	20000010 	.word	0x20000010
 800087c:	2000019c 	.word	0x2000019c
 8000880:	2000000c 	.word	0x2000000c
 8000884:	2000001c 	.word	0x2000001c
					} else {
						HAL_UART_Transmit(&NUT_UART, tempptr, comm_max_batch_size, 1000);
 8000888:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <vNut_loop+0x318>)
 800088a:	881a      	ldrh	r2, [r3, #0]
 800088c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000890:	6939      	ldr	r1, [r7, #16]
 8000892:	4818      	ldr	r0, [pc, #96]	@ (80008f4 <vNut_loop+0x31c>)
 8000894:	f003 fe5c 	bl	8004550 <HAL_UART_Transmit>
						tempptr += comm_max_batch_size;
 8000898:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <vNut_loop+0x318>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	4413      	add	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
						response_length -= comm_max_batch_size;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <vNut_loop+0x318>)
 80008a8:	8812      	ldrh	r2, [r2, #0]
 80008aa:	1a9b      	subs	r3, r3, r2
 80008ac:	607b      	str	r3, [r7, #4]
				while (response_length) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1c1      	bne.n	8000838 <vNut_loop+0x260>
					}
				}
				/* Enable other interfaces */
				_vNutComm_SPI_Enable();
 80008b4:	f000 f8e6 	bl	8000a84 <_vNutComm_SPI_Enable>
				_vNutComm_I2C_Enable();
 80008b8:	f000 f8fa 	bl	8000ab0 <_vNutComm_I2C_Enable>
				_vNutComm_CAN_Enable();
 80008bc:	f000 f90e 	bl	8000adc <_vNutComm_CAN_Enable>
				return;
 80008c0:	e013      	b.n	80008ea <vNut_loop+0x312>
			}
		}
		/* Command not found, return error */
		else {
			error_header[1] = NUT_ERROR_CMD_UNKNOWN;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <vNut_loop+0x320>)
 80008c4:	2205      	movs	r2, #5
 80008c6:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&NUT_UART, error_header, sizeof(error_header), 100);
 80008c8:	2364      	movs	r3, #100	@ 0x64
 80008ca:	2206      	movs	r2, #6
 80008cc:	490a      	ldr	r1, [pc, #40]	@ (80008f8 <vNut_loop+0x320>)
 80008ce:	4809      	ldr	r0, [pc, #36]	@ (80008f4 <vNut_loop+0x31c>)
 80008d0:	f003 fe3e 	bl	8004550 <HAL_UART_Transmit>
			/* Enable other interfaces */
			_vNutComm_SPI_Enable();
 80008d4:	f000 f8d6 	bl	8000a84 <_vNutComm_SPI_Enable>
			_vNutComm_I2C_Enable();
 80008d8:	f000 f8ea 	bl	8000ab0 <_vNutComm_I2C_Enable>
			_vNutComm_CAN_Enable();
 80008dc:	f000 f8fe 	bl	8000adc <_vNutComm_CAN_Enable>
			return;
 80008e0:	e003      	b.n	80008ea <vNut_loop+0x312>
		}
	}

	/* Check SPI */
	else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_RESET) {
 80008e2:	2108      	movs	r1, #8
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <vNut_loop+0x324>)
 80008e6:	f002 ffdb 	bl	80038a0 <HAL_GPIO_ReadPin>

	/* Check I2C */
	else if (1) {
		// TODO
	}
}
 80008ea:	371c      	adds	r7, #28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	200021b4 	.word	0x200021b4
 80008f4:	20000154 	.word	0x20000154
 80008f8:	20000014 	.word	0x20000014
 80008fc:	40010800 	.word	0x40010800

08000900 <vNut_Init>:

void vNut_Init() {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	_vNutComm_Init();
 8000904:	f7ff fe5c 	bl	80005c0 <_vNutComm_Init>
	User_Init();
 8000908:	f002 fb02 	bl	8002f10 <User_Init>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <vNut_Quiet>:

void vNut_Quiet() {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	_vNutComm_UART_Disable();
 8000914:	f000 f868 	bl	80009e8 <_vNutComm_UART_Disable>
	_vNutComm_SPI_Disable();
 8000918:	f000 f874 	bl	8000a04 <_vNutComm_SPI_Disable>
	_vNutComm_I2C_Disable();
 800091c:	f000 f880 	bl	8000a20 <_vNutComm_I2C_Disable>
	_vNutComm_CAN_Disable();
 8000920:	f000 f88c 	bl	8000a3c <_vNutComm_CAN_Disable>
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;	// disable SysTick
 8000924:	4b03      	ldr	r3, [pc, #12]	@ (8000934 <vNut_Quiet+0x24>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a02      	ldr	r2, [pc, #8]	@ (8000934 <vNut_Quiet+0x24>)
 800092a:	f023 0302 	bic.w	r3, r3, #2
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	e000e010 	.word	0xe000e010

08000938 <vNut_unQuiet>:

void vNut_unQuiet() {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;	// enable SysTick
 800093c:	4b07      	ldr	r3, [pc, #28]	@ (800095c <vNut_unQuiet+0x24>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a06      	ldr	r2, [pc, #24]	@ (800095c <vNut_unQuiet+0x24>)
 8000942:	f043 0302 	orr.w	r3, r3, #2
 8000946:	6013      	str	r3, [r2, #0]
	_vNutComm_UART_Enable();
 8000948:	f000 f886 	bl	8000a58 <_vNutComm_UART_Enable>
	_vNutComm_SPI_Enable();
 800094c:	f000 f89a 	bl	8000a84 <_vNutComm_SPI_Enable>
	_vNutComm_I2C_Enable();
 8000950:	f000 f8ae 	bl	8000ab0 <_vNutComm_I2C_Enable>
	_vNutComm_CAN_Enable();
 8000954:	f000 f8c2 	bl	8000adc <_vNutComm_CAN_Enable>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	e000e010 	.word	0xe000e010

08000960 <vNut_LED>:

/* Pin Manipulation */

void vNut_LED(uint8_t on) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NUT_LED_PORT, NUT_LED_PIN, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	bf14      	ite	ne
 8000970:	2301      	movne	r3, #1
 8000972:	2300      	moveq	r3, #0
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800097c:	4803      	ldr	r0, [pc, #12]	@ (800098c <vNut_LED+0x2c>)
 800097e:	f002 ffa6 	bl	80038ce <HAL_GPIO_WritePin>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40010c00 	.word	0x40010c00

08000990 <vNut_IO_1>:

void vNut_IO_1(uint8_t set) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NUT_IO1_PORT, NUT_IO1_PIN, set ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	2101      	movs	r1, #1
 80009aa:	4803      	ldr	r0, [pc, #12]	@ (80009b8 <vNut_IO_1+0x28>)
 80009ac:	f002 ff8f 	bl	80038ce <HAL_GPIO_WritePin>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40010c00 	.word	0x40010c00

080009bc <vNut_IO_USER>:

void vNut_IO_3(uint8_t set) {
	HAL_GPIO_WritePin(NUT_IO3_PORT, NUT_IO3_PIN, set ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

void vNut_IO_USER(uint8_t set) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NUT_IO_USER_PORT, NUT_IO_USER_PIN, set ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	2101      	movs	r1, #1
 80009d6:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <vNut_IO_USER+0x28>)
 80009d8:	f002 ff79 	bl	80038ce <HAL_GPIO_WritePin>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40010c00 	.word	0x40010c00

080009e8 <_vNutComm_UART_Disable>:

/* Stop CLK of peripheral */
inline void _vNutComm_UART_Disable() {
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
	__HAL_RCC_USART1_CLK_DISABLE();
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <_vNutComm_UART_Disable+0x18>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a03      	ldr	r2, [pc, #12]	@ (8000a00 <_vNutComm_UART_Disable+0x18>)
 80009f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80009f6:	6193      	str	r3, [r2, #24]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	40021000 	.word	0x40021000

08000a04 <_vNutComm_SPI_Disable>:
inline void _vNutComm_SPI_Disable() {
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	__HAL_RCC_SPI1_CLK_DISABLE();
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <_vNutComm_SPI_Disable+0x18>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a03      	ldr	r2, [pc, #12]	@ (8000a1c <_vNutComm_SPI_Disable+0x18>)
 8000a0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a12:	6193      	str	r3, [r2, #24]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40021000 	.word	0x40021000

08000a20 <_vNutComm_I2C_Disable>:
inline void _vNutComm_I2C_Disable() {
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
	__HAL_RCC_I2C1_CLK_DISABLE();
 8000a24:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <_vNutComm_I2C_Disable+0x18>)
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	4a03      	ldr	r2, [pc, #12]	@ (8000a38 <_vNutComm_I2C_Disable+0x18>)
 8000a2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000a2e:	61d3      	str	r3, [r2, #28]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	40021000 	.word	0x40021000

08000a3c <_vNutComm_CAN_Disable>:
inline void _vNutComm_CAN_Disable() {
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	__HAL_RCC_CAN1_CLK_DISABLE();
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <_vNutComm_CAN_Disable+0x18>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	4a03      	ldr	r2, [pc, #12]	@ (8000a54 <_vNutComm_CAN_Disable+0x18>)
 8000a46:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000a4a:	61d3      	str	r3, [r2, #28]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000

08000a58 <_vNutComm_UART_Enable>:

/* Resume CLK of peripheral */
inline void _vNutComm_UART_Enable() {
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
	__HAL_RCC_USART1_CLK_ENABLE();
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <_vNutComm_UART_Enable+0x28>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a07      	ldr	r2, [pc, #28]	@ (8000a80 <_vNutComm_UART_Enable+0x28>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <_vNutComm_UART_Enable+0x28>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40021000 	.word	0x40021000

08000a84 <_vNutComm_SPI_Enable>:
inline void _vNutComm_SPI_Enable() {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
	__HAL_RCC_SPI1_CLK_ENABLE();
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <_vNutComm_SPI_Enable+0x28>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a07      	ldr	r2, [pc, #28]	@ (8000aac <_vNutComm_SPI_Enable+0x28>)
 8000a90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <_vNutComm_SPI_Enable+0x28>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000

08000ab0 <_vNutComm_I2C_Enable>:
inline void _vNutComm_I2C_Enable() {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <_vNutComm_I2C_Enable+0x28>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a07      	ldr	r2, [pc, #28]	@ (8000ad8 <_vNutComm_I2C_Enable+0x28>)
 8000abc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <_vNutComm_I2C_Enable+0x28>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	40021000 	.word	0x40021000

08000adc <_vNutComm_CAN_Enable>:
inline void _vNutComm_CAN_Enable() {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <_vNutComm_CAN_Enable+0x28>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a07      	ldr	r2, [pc, #28]	@ (8000b04 <_vNutComm_CAN_Enable+0x28>)
 8000ae8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <_vNutComm_CAN_Enable+0x28>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <HAL_MspInit+0x5c>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <HAL_MspInit+0x5c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_MspInit+0x5c>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <HAL_MspInit+0x5c>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b64 <HAL_MspInit+0x5c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_MspInit+0x5c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <HAL_MspInit+0x60>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <HAL_MspInit+0x60>)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010000 	.word	0x40010000

08000b6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf8 <HAL_CAN_MspInit+0x8c>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d131      	bne.n	8000bf0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <HAL_CAN_MspInit+0x90>)
 8000b8e:	69db      	ldr	r3, [r3, #28]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	@ (8000bfc <HAL_CAN_MspInit+0x90>)
 8000b92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b96:	61d3      	str	r3, [r2, #28]
 8000b98:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <HAL_CAN_MspInit+0x90>)
 8000b9a:	69db      	ldr	r3, [r3, #28]
 8000b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_CAN_MspInit+0x90>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a14      	ldr	r2, [pc, #80]	@ (8000bfc <HAL_CAN_MspInit+0x90>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HAL_CAN_MspInit+0x90>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480b      	ldr	r0, [pc, #44]	@ (8000c00 <HAL_CAN_MspInit+0x94>)
 8000bd2:	f002 fce1 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <HAL_CAN_MspInit+0x94>)
 8000bec:	f002 fcd4 	bl	8003598 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3720      	adds	r7, #32
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40006400 	.word	0x40006400
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010800 	.word	0x40010800

08000c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a15      	ldr	r2, [pc, #84]	@ (8000c74 <HAL_I2C_MspInit+0x70>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d123      	bne.n	8000c6c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <HAL_I2C_MspInit+0x74>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a13      	ldr	r2, [pc, #76]	@ (8000c78 <HAL_I2C_MspInit+0x74>)
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <HAL_I2C_MspInit+0x74>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c3c:	23c0      	movs	r3, #192	@ 0xc0
 8000c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c40:	2312      	movs	r3, #18
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480b      	ldr	r0, [pc, #44]	@ (8000c7c <HAL_I2C_MspInit+0x78>)
 8000c50:	f002 fca2 	bl	8003598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_I2C_MspInit+0x74>)
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <HAL_I2C_MspInit+0x74>)
 8000c5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c5e:	61d3      	str	r3, [r2, #28]
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_I2C_MspInit+0x74>)
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40005400 	.word	0x40005400
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000d08 <HAL_SPI_MspInit+0x88>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d12f      	bne.n	8000d00 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	@ (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000ca6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a13      	ldr	r2, [pc, #76]	@ (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000cd0:	23a0      	movs	r3, #160	@ 0xa0
 8000cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480b      	ldr	r0, [pc, #44]	@ (8000d10 <HAL_SPI_MspInit+0x90>)
 8000ce4:	f002 fc58 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ce8:	2340      	movs	r3, #64	@ 0x40
 8000cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <HAL_SPI_MspInit+0x90>)
 8000cfc:	f002 fc4c 	bl	8003598 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010800 	.word	0x40010800

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000da0 <HAL_UART_MspInit+0x8c>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d131      	bne.n	8000d98 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <HAL_UART_MspInit+0x90>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a1a      	ldr	r2, [pc, #104]	@ (8000da4 <HAL_UART_MspInit+0x90>)
 8000d3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <HAL_UART_MspInit+0x90>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_UART_MspInit+0x90>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <HAL_UART_MspInit+0x90>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_UART_MspInit+0x90>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	480b      	ldr	r0, [pc, #44]	@ (8000da8 <HAL_UART_MspInit+0x94>)
 8000d7a:	f002 fc0d 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <HAL_UART_MspInit+0x94>)
 8000d94:	f002 fc00 	bl	8003598 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d98:	bf00      	nop
 8000d9a:	3720      	adds	r7, #32
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40013800 	.word	0x40013800
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010800 	.word	0x40010800

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <NMI_Handler+0x4>

08000db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f002 f9d0 	bl	80031a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e10:	f7ff fff8 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e14:	480b      	ldr	r0, [pc, #44]	@ (8000e44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e16:	490c      	ldr	r1, [pc, #48]	@ (8000e48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e18:	4a0c      	ldr	r2, [pc, #48]	@ (8000e4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a09      	ldr	r2, [pc, #36]	@ (8000e50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e2c:	4c09      	ldr	r4, [pc, #36]	@ (8000e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f003 fdfd 	bl	8004a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e3e:	f7ff f985 	bl	800014c <main>
  bx lr
 8000e42:	4770      	bx	lr
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e4c:	0800534c 	.word	0x0800534c
  ldr r2, =_sbss
 8000e50:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e54:	20004580 	.word	0x20004580

08000e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_2_IRQHandler>
	...

08000e5c <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 8000e62:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8000e70:	e02f      	b.n	8000ed2 <aes_gen_tables+0x76>
    {
        pow[i] = x;
 8000e72:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000e76:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8000e7a:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8000e7e:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8000e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 8000e86:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000e8a:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8000e8e:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8000e92:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8000e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = MBEDTLS_BYTE_0( x ^ XTIME( x ) );
 8000e9a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8000e9e:	b25a      	sxtb	r2, r3
 8000ea0:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8000eac:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8000eb0:	2900      	cmp	r1, #0
 8000eb2:	d001      	beq.n	8000eb8 <aes_gen_tables+0x5c>
 8000eb4:	211b      	movs	r1, #27
 8000eb6:	e000      	b.n	8000eba <aes_gen_tables+0x5e>
 8000eb8:	2100      	movs	r1, #0
 8000eba:	404b      	eors	r3, r1
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	4053      	eors	r3, r2
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 256; i++ )
 8000ec8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8000ecc:	3301      	adds	r3, #1
 8000ece:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8000ed2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8000ed6:	2bff      	cmp	r3, #255	@ 0xff
 8000ed8:	ddcb      	ble.n	8000e72 <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8000ee6:	e01d      	b.n	8000f24 <aes_gen_tables+0xc8>
    {
        RCON[i] = (uint32_t) x;
 8000ee8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8000eec:	49d6      	ldr	r1, [pc, #856]	@ (8001248 <aes_gen_tables+0x3ec>)
 8000eee:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = MBEDTLS_BYTE_0( XTIME( x ) );
 8000ef6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8000f02:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	d001      	beq.n	8000f0e <aes_gen_tables+0xb2>
 8000f0a:	221b      	movs	r2, #27
 8000f0c:	e000      	b.n	8000f10 <aes_gen_tables+0xb4>
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4053      	eors	r3, r2
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8000f1a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8000f24:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8000f28:	2b09      	cmp	r3, #9
 8000f2a:	dddd      	ble.n	8000ee8 <aes_gen_tables+0x8c>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8000f2c:	4bc7      	ldr	r3, [pc, #796]	@ (800124c <aes_gen_tables+0x3f0>)
 8000f2e:	2263      	movs	r2, #99	@ 0x63
 8000f30:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 8000f32:	4bc7      	ldr	r3, [pc, #796]	@ (8001250 <aes_gen_tables+0x3f4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

    for( i = 1; i < 256; i++ )
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8000f40:	e07e      	b.n	8001040 <aes_gen_tables+0x1e4>
    {
        x = pow[255 - log[i]];
 8000f42:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000f46:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8000f4a:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8000f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f52:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000f56:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000f5a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8000f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f62:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        y  = x; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8000f66:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8000f6a:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 8000f6e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	b25a      	sxtb	r2, r3
 8000f76:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8000f7a:	11db      	asrs	r3, r3, #7
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8000f88:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8000f8c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8000f90:	4053      	eors	r3, r2
 8000f92:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8000f96:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	b25a      	sxtb	r2, r3
 8000f9e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8000fa2:	11db      	asrs	r3, r3, #7
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8000fb0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8000fb4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8000fb8:	4053      	eors	r3, r2
 8000fba:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8000fbe:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	b25a      	sxtb	r2, r3
 8000fc6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8000fca:	11db      	asrs	r3, r3, #7
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8000fd8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8000fdc:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8000fe0:	4053      	eors	r3, r2
 8000fe2:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8000fe6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8000ff2:	11db      	asrs	r3, r3, #7
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y ^ 0x63;
 8001000:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001004:	f083 0363 	eor.w	r3, r3, #99	@ 0x63
 8001008:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 800100c:	4053      	eors	r3, r2
 800100e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        FSb[i] = (unsigned char) x;
 8001012:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001016:	b2d9      	uxtb	r1, r3
 8001018:	4a8c      	ldr	r2, [pc, #560]	@ (800124c <aes_gen_tables+0x3f0>)
 800101a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800101e:	4413      	add	r3, r2
 8001020:	460a      	mov	r2, r1
 8001022:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8001024:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001028:	b2d9      	uxtb	r1, r3
 800102a:	4a89      	ldr	r2, [pc, #548]	@ (8001250 <aes_gen_tables+0x3f4>)
 800102c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001030:	4413      	add	r3, r2
 8001032:	460a      	mov	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 8001036:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800103a:	3301      	adds	r3, #1
 800103c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8001040:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001044:	2bff      	cmp	r3, #255	@ 0xff
 8001046:	f77f af7c 	ble.w	8000f42 <aes_gen_tables+0xe6>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8001050:	e13b      	b.n	80012ca <aes_gen_tables+0x46e>
    {
        x = FSb[i];
 8001052:	4a7e      	ldr	r2, [pc, #504]	@ (800124c <aes_gen_tables+0x3f0>)
 8001054:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
        y = MBEDTLS_BYTE_0( XTIME( x ) );
 8001060:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b25b      	sxtb	r3, r3
 8001068:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 800106c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001070:	2a00      	cmp	r2, #0
 8001072:	d001      	beq.n	8001078 <aes_gen_tables+0x21c>
 8001074:	221b      	movs	r2, #27
 8001076:	e000      	b.n	800107a <aes_gen_tables+0x21e>
 8001078:	2200      	movs	r2, #0
 800107a:	4053      	eors	r3, r2
 800107c:	b25b      	sxtb	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        z = MBEDTLS_BYTE_0( y ^ x );
 8001084:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001088:	b25a      	sxtb	r2, r3
 800108a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800108e:	b25b      	sxtb	r3, r3
 8001090:	4053      	eors	r3, r2
 8001092:	b25b      	sxtb	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 800109a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800109e:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 80010a0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80010a4:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 80010a6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80010aa:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 80010ac:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 80010ae:	f8d7 3800 	ldr.w	r3, [r7, #2048]	@ 0x800
 80010b2:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 80010b4:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 80010b6:	4967      	ldr	r1, [pc, #412]	@ (8001254 <aes_gen_tables+0x3f8>)
 80010b8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80010bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 80010c0:	4a64      	ldr	r2, [pc, #400]	@ (8001254 <aes_gen_tables+0x3f8>)
 80010c2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	ea4f 6233 	mov.w	r2, r3, ror #24
 80010ce:	4962      	ldr	r1, [pc, #392]	@ (8001258 <aes_gen_tables+0x3fc>)
 80010d0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80010d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 80010d8:	4a5f      	ldr	r2, [pc, #380]	@ (8001258 <aes_gen_tables+0x3fc>)
 80010da:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	ea4f 6233 	mov.w	r2, r3, ror #24
 80010e6:	495d      	ldr	r1, [pc, #372]	@ (800125c <aes_gen_tables+0x400>)
 80010e8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80010ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 80010f0:	4a5a      	ldr	r2, [pc, #360]	@ (800125c <aes_gen_tables+0x400>)
 80010f2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	ea4f 6233 	mov.w	r2, r3, ror #24
 80010fe:	4958      	ldr	r1, [pc, #352]	@ (8001260 <aes_gen_tables+0x404>)
 8001100:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 8001108:	4a51      	ldr	r2, [pc, #324]	@ (8001250 <aes_gen_tables+0x3f4>)
 800110a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800110e:	4413      	add	r3, r2
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001116:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800111a:	2b00      	cmp	r3, #0
 800111c:	d020      	beq.n	8001160 <aes_gen_tables+0x304>
 800111e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001122:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001128:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800112c:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001130:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8001134:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001138:	441a      	add	r2, r3
 800113a:	4b4a      	ldr	r3, [pc, #296]	@ (8001264 <aes_gen_tables+0x408>)
 800113c:	fb83 1302 	smull	r1, r3, r3, r2
 8001140:	4413      	add	r3, r2
 8001142:	11d9      	asrs	r1, r3, #7
 8001144:	17d3      	asrs	r3, r2, #31
 8001146:	1ac9      	subs	r1, r1, r3
 8001148:	460b      	mov	r3, r1
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	1a5b      	subs	r3, r3, r1
 800114e:	1ad1      	subs	r1, r2, r3
 8001150:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001154:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001158:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800115c:	4618      	mov	r0, r3
 800115e:	e000      	b.n	8001162 <aes_gen_tables+0x306>
 8001160:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8001162:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001166:	2b00      	cmp	r3, #0
 8001168:	d020      	beq.n	80011ac <aes_gen_tables+0x350>
 800116a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800116e:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001172:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001174:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001178:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800117c:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8001180:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001184:	441a      	add	r2, r3
 8001186:	4b37      	ldr	r3, [pc, #220]	@ (8001264 <aes_gen_tables+0x408>)
 8001188:	fb83 1302 	smull	r1, r3, r3, r2
 800118c:	4413      	add	r3, r2
 800118e:	11d9      	asrs	r1, r3, #7
 8001190:	17d3      	asrs	r3, r2, #31
 8001192:	1ac9      	subs	r1, r1, r3
 8001194:	460b      	mov	r3, r1
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	1a5b      	subs	r3, r3, r1
 800119a:	1ad1      	subs	r1, r2, r3
 800119c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80011a0:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80011a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	e000      	b.n	80011ae <aes_gen_tables+0x352>
 80011ac:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80011ae:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80011b0:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d020      	beq.n	80011fa <aes_gen_tables+0x39e>
 80011b8:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80011bc:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80011c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011c2:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80011c6:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80011ca:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80011ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011d2:	441a      	add	r2, r3
 80011d4:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <aes_gen_tables+0x408>)
 80011d6:	fb83 1302 	smull	r1, r3, r3, r2
 80011da:	4413      	add	r3, r2
 80011dc:	11d9      	asrs	r1, r3, #7
 80011de:	17d3      	asrs	r3, r2, #31
 80011e0:	1ac9      	subs	r1, r1, r3
 80011e2:	460b      	mov	r3, r1
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	1a5b      	subs	r3, r3, r1
 80011e8:	1ad1      	subs	r1, r2, r3
 80011ea:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80011ee:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80011f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011f6:	041b      	lsls	r3, r3, #16
 80011f8:	e000      	b.n	80011fc <aes_gen_tables+0x3a0>
 80011fa:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80011fc:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80011fe:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001202:	2b00      	cmp	r3, #0
 8001204:	d030      	beq.n	8001268 <aes_gen_tables+0x40c>
 8001206:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800120a:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800120e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001210:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001214:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001218:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 800121c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001220:	441a      	add	r2, r3
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <aes_gen_tables+0x408>)
 8001224:	fb83 1302 	smull	r1, r3, r3, r2
 8001228:	4413      	add	r3, r2
 800122a:	11d9      	asrs	r1, r3, #7
 800122c:	17d3      	asrs	r3, r2, #31
 800122e:	1ac9      	subs	r1, r1, r3
 8001230:	460b      	mov	r3, r1
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	1a5b      	subs	r3, r3, r1
 8001236:	1ad1      	subs	r1, r2, r3
 8001238:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800123c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001244:	061b      	lsls	r3, r3, #24
 8001246:	e010      	b.n	800126a <aes_gen_tables+0x40e>
 8001248:	200043b8 	.word	0x200043b8
 800124c:	200021b8 	.word	0x200021b8
 8001250:	200032b8 	.word	0x200032b8
 8001254:	200022b8 	.word	0x200022b8
 8001258:	200026b8 	.word	0x200026b8
 800125c:	20002ab8 	.word	0x20002ab8
 8001260:	20002eb8 	.word	0x20002eb8
 8001264:	80808081 	.word	0x80808081
 8001268:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800126a:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800126e:	491d      	ldr	r1, [pc, #116]	@ (80012e4 <aes_gen_tables+0x488>)
 8001270:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 8001278:	4a1a      	ldr	r2, [pc, #104]	@ (80012e4 <aes_gen_tables+0x488>)
 800127a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	ea4f 6233 	mov.w	r2, r3, ror #24
 8001286:	4918      	ldr	r1, [pc, #96]	@ (80012e8 <aes_gen_tables+0x48c>)
 8001288:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 8001290:	4a15      	ldr	r2, [pc, #84]	@ (80012e8 <aes_gen_tables+0x48c>)
 8001292:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	ea4f 6233 	mov.w	r2, r3, ror #24
 800129e:	4913      	ldr	r1, [pc, #76]	@ (80012ec <aes_gen_tables+0x490>)
 80012a0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80012a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 80012a8:	4a10      	ldr	r2, [pc, #64]	@ (80012ec <aes_gen_tables+0x490>)
 80012aa:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	ea4f 6233 	mov.w	r2, r3, ror #24
 80012b6:	490e      	ldr	r1, [pc, #56]	@ (80012f0 <aes_gen_tables+0x494>)
 80012b8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80012bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 80012c0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80012c4:	3301      	adds	r3, #1
 80012c6:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80012ca:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80012ce:	2bff      	cmp	r3, #255	@ 0xff
 80012d0:	f77f aebf 	ble.w	8001052 <aes_gen_tables+0x1f6>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	f607 0714 	addw	r7, r7, #2068	@ 0x814
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	200033b8 	.word	0x200033b8
 80012e8:	200037b8 	.word	0x200037b8
 80012ec:	20003bb8 	.word	0x20003bb8
 80012f0:	20003fb8 	.word	0x20003fb8

080012f4 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 80012fc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001300:	2100      	movs	r1, #0
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f003 fb90 	bl	8004a28 <memset>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 800131e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f001 fde0 	bl	8002ee8 <mbedtls_platform_zeroize>
 8001328:	e000      	b.n	800132c <mbedtls_aes_free+0x1c>
        return;
 800132a:	bf00      	nop
}
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001346:	d012      	beq.n	800136e <mbedtls_aes_setkey_enc+0x3a>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800134e:	d812      	bhi.n	8001376 <mbedtls_aes_setkey_enc+0x42>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b80      	cmp	r3, #128	@ 0x80
 8001354:	d003      	beq.n	800135e <mbedtls_aes_setkey_enc+0x2a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2bc0      	cmp	r3, #192	@ 0xc0
 800135a:	d004      	beq.n	8001366 <mbedtls_aes_setkey_enc+0x32>
 800135c:	e00b      	b.n	8001376 <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	220a      	movs	r2, #10
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	e00a      	b.n	800137c <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	220c      	movs	r2, #12
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	e006      	b.n	800137c <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	220e      	movs	r2, #14
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e002      	b.n	800137c <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8001376:	f06f 031f 	mvn.w	r3, #31
 800137a:	e1c7      	b.n	800170c <mbedtls_aes_setkey_enc+0x3d8>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 800137c:	4b8d      	ldr	r3, [pc, #564]	@ (80015b4 <mbedtls_aes_setkey_enc+0x280>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d104      	bne.n	800138e <mbedtls_aes_setkey_enc+0x5a>
    {
        aes_gen_tables();
 8001384:	f7ff fd6a 	bl	8000e5c <aes_gen_tables>
        aes_init_done = 1;
 8001388:	4b8a      	ldr	r3, [pc, #552]	@ (80015b4 <mbedtls_aes_setkey_enc+0x280>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3308      	adds	r3, #8
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e027      	b.n	80013f0 <mbedtls_aes_setkey_enc+0xbc>
    {
        RK[i] = MBEDTLS_GET_UINT32_LE( key, i << 2 );
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	3301      	adds	r3, #1
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	ea41 0203 	orr.w	r2, r1, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	440b      	add	r3, r1
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	041b      	lsls	r3, r3, #16
 80013cc:	ea42 0103 	orr.w	r1, r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	3303      	adds	r3, #3
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	061a      	lsls	r2, r3, #24
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	6938      	ldr	r0, [r7, #16]
 80013e4:	4403      	add	r3, r0
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d3d2      	bcc.n	80013a0 <mbedtls_aes_setkey_enc+0x6c>
    }

    switch( ctx->nr )
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b0e      	cmp	r3, #14
 8001400:	f000 80d4 	beq.w	80015ac <mbedtls_aes_setkey_enc+0x278>
 8001404:	2b0e      	cmp	r3, #14
 8001406:	f300 8180 	bgt.w	800170a <mbedtls_aes_setkey_enc+0x3d6>
 800140a:	2b0a      	cmp	r3, #10
 800140c:	d002      	beq.n	8001414 <mbedtls_aes_setkey_enc+0xe0>
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d05c      	beq.n	80014cc <mbedtls_aes_setkey_enc+0x198>
 8001412:	e17a      	b.n	800170a <mbedtls_aes_setkey_enc+0x3d6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e054      	b.n	80014c4 <mbedtls_aes_setkey_enc+0x190>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4966      	ldr	r1, [pc, #408]	@ (80015b8 <mbedtls_aes_setkey_enc+0x284>)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001426:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	320c      	adds	r2, #12
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	0a12      	lsrs	r2, r2, #8
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	4611      	mov	r1, r2
 8001434:	4a61      	ldr	r2, [pc, #388]	@ (80015bc <mbedtls_aes_setkey_enc+0x288>)
 8001436:	5c52      	ldrb	r2, [r2, r1]
                RK[4]  = RK[0] ^ RCON[i] ^
 8001438:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	330c      	adds	r3, #12
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	0c1b      	lsrs	r3, r3, #16
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	4b5d      	ldr	r3, [pc, #372]	@ (80015bc <mbedtls_aes_setkey_enc+0x288>)
 8001448:	5c5b      	ldrb	r3, [r3, r1]
 800144a:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 800144c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	330c      	adds	r3, #12
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0e1b      	lsrs	r3, r3, #24
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4619      	mov	r1, r3
 800145a:	4b58      	ldr	r3, [pc, #352]	@ (80015bc <mbedtls_aes_setkey_enc+0x288>)
 800145c:	5c5b      	ldrb	r3, [r3, r1]
 800145e:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 8001460:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[3] ) ] << 24 );
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	330c      	adds	r3, #12
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4b53      	ldr	r3, [pc, #332]	@ (80015bc <mbedtls_aes_setkey_enc+0x288>)
 8001470:	5c9b      	ldrb	r3, [r3, r2]
 8001472:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 8001478:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 800147a:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	3304      	adds	r3, #4
 8001480:	6819      	ldr	r1, [r3, #0]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	3310      	adds	r3, #16
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	3314      	adds	r3, #20
 800148c:	404a      	eors	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	3308      	adds	r3, #8
 8001494:	6819      	ldr	r1, [r3, #0]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	3314      	adds	r3, #20
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	3318      	adds	r3, #24
 80014a0:	404a      	eors	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	330c      	adds	r3, #12
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3318      	adds	r3, #24
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	331c      	adds	r3, #28
 80014b4:	404a      	eors	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	3310      	adds	r3, #16
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2b09      	cmp	r3, #9
 80014c8:	d9a7      	bls.n	800141a <mbedtls_aes_setkey_enc+0xe6>
            }
            break;
 80014ca:	e11e      	b.n	800170a <mbedtls_aes_setkey_enc+0x3d6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e068      	b.n	80015a4 <mbedtls_aes_setkey_enc+0x270>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4938      	ldr	r1, [pc, #224]	@ (80015b8 <mbedtls_aes_setkey_enc+0x284>)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014de:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	3214      	adds	r2, #20
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	0a12      	lsrs	r2, r2, #8
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	4611      	mov	r1, r2
 80014ec:	4a33      	ldr	r2, [pc, #204]	@ (80015bc <mbedtls_aes_setkey_enc+0x288>)
 80014ee:	5c52      	ldrb	r2, [r2, r1]
                RK[6]  = RK[0] ^ RCON[i] ^
 80014f0:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	3314      	adds	r3, #20
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0c1b      	lsrs	r3, r3, #16
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4619      	mov	r1, r3
 80014fe:	4b2f      	ldr	r3, [pc, #188]	@ (80015bc <mbedtls_aes_setkey_enc+0x288>)
 8001500:	5c5b      	ldrb	r3, [r3, r1]
 8001502:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 8001504:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	3314      	adds	r3, #20
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0e1b      	lsrs	r3, r3, #24
 800150e:	b2db      	uxtb	r3, r3
 8001510:	4619      	mov	r1, r3
 8001512:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <mbedtls_aes_setkey_enc+0x288>)
 8001514:	5c5b      	ldrb	r3, [r3, r1]
 8001516:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 8001518:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[5] ) ] << 24 );
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	3314      	adds	r3, #20
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4b25      	ldr	r3, [pc, #148]	@ (80015bc <mbedtls_aes_setkey_enc+0x288>)
 8001528:	5c9b      	ldrb	r3, [r3, r2]
 800152a:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8001530:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 8001532:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	3304      	adds	r3, #4
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	3318      	adds	r3, #24
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	331c      	adds	r3, #28
 8001544:	404a      	eors	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	3308      	adds	r3, #8
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	331c      	adds	r3, #28
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	3320      	adds	r3, #32
 8001558:	404a      	eors	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	330c      	adds	r3, #12
 8001560:	6819      	ldr	r1, [r3, #0]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	3320      	adds	r3, #32
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3324      	adds	r3, #36	@ 0x24
 800156c:	404a      	eors	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	3310      	adds	r3, #16
 8001574:	6819      	ldr	r1, [r3, #0]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3324      	adds	r3, #36	@ 0x24
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	3328      	adds	r3, #40	@ 0x28
 8001580:	404a      	eors	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	3314      	adds	r3, #20
 8001588:	6819      	ldr	r1, [r3, #0]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	3328      	adds	r3, #40	@ 0x28
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	332c      	adds	r3, #44	@ 0x2c
 8001594:	404a      	eors	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	3318      	adds	r3, #24
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b07      	cmp	r3, #7
 80015a8:	d993      	bls.n	80014d2 <mbedtls_aes_setkey_enc+0x19e>
            }
            break;
 80015aa:	e0ae      	b.n	800170a <mbedtls_aes_setkey_enc+0x3d6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e0a6      	b.n	8001700 <mbedtls_aes_setkey_enc+0x3cc>
 80015b2:	bf00      	nop
 80015b4:	200043e0 	.word	0x200043e0
 80015b8:	200043b8 	.word	0x200043b8
 80015bc:	200021b8 	.word	0x200021b8
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4953      	ldr	r1, [pc, #332]	@ (8001714 <mbedtls_aes_setkey_enc+0x3e0>)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015cc:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	321c      	adds	r2, #28
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	0a12      	lsrs	r2, r2, #8
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	4611      	mov	r1, r2
 80015da:	4a4f      	ldr	r2, [pc, #316]	@ (8001718 <mbedtls_aes_setkey_enc+0x3e4>)
 80015dc:	5c52      	ldrb	r2, [r2, r1]
                RK[8]  = RK[0] ^ RCON[i] ^
 80015de:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	331c      	adds	r3, #28
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	0c1b      	lsrs	r3, r3, #16
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4619      	mov	r1, r3
 80015ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001718 <mbedtls_aes_setkey_enc+0x3e4>)
 80015ee:	5c5b      	ldrb	r3, [r3, r1]
 80015f0:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 80015f2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	331c      	adds	r3, #28
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	0e1b      	lsrs	r3, r3, #24
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	4619      	mov	r1, r3
 8001600:	4b45      	ldr	r3, [pc, #276]	@ (8001718 <mbedtls_aes_setkey_enc+0x3e4>)
 8001602:	5c5b      	ldrb	r3, [r3, r1]
 8001604:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 8001606:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[7] ) ] << 24 );
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	331c      	adds	r3, #28
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	4b40      	ldr	r3, [pc, #256]	@ (8001718 <mbedtls_aes_setkey_enc+0x3e4>)
 8001616:	5c9b      	ldrb	r3, [r3, r2]
 8001618:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 800161e:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 8001620:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	3304      	adds	r3, #4
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	3320      	adds	r3, #32
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	3324      	adds	r3, #36	@ 0x24
 8001632:	404a      	eors	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	3308      	adds	r3, #8
 800163a:	6819      	ldr	r1, [r3, #0]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	3324      	adds	r3, #36	@ 0x24
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	3328      	adds	r3, #40	@ 0x28
 8001646:	404a      	eors	r2, r1
 8001648:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	330c      	adds	r3, #12
 800164e:	6819      	ldr	r1, [r3, #0]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	3328      	adds	r3, #40	@ 0x28
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	332c      	adds	r3, #44	@ 0x2c
 800165a:	404a      	eors	r2, r1
 800165c:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	3310      	adds	r3, #16
 8001662:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	322c      	adds	r2, #44	@ 0x2c
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	4611      	mov	r1, r2
 800166e:	4a2a      	ldr	r2, [pc, #168]	@ (8001718 <mbedtls_aes_setkey_enc+0x3e4>)
 8001670:	5c52      	ldrb	r2, [r2, r1]
                RK[12] = RK[4] ^
 8001672:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	332c      	adds	r3, #44	@ 0x2c
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4619      	mov	r1, r3
 8001680:	4b25      	ldr	r3, [pc, #148]	@ (8001718 <mbedtls_aes_setkey_enc+0x3e4>)
 8001682:	5c5b      	ldrb	r3, [r3, r1]
 8001684:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 8001686:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	332c      	adds	r3, #44	@ 0x2c
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	0c1b      	lsrs	r3, r3, #16
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4619      	mov	r1, r3
 8001694:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <mbedtls_aes_setkey_enc+0x3e4>)
 8001696:	5c5b      	ldrb	r3, [r3, r1]
 8001698:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 800169a:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[11] ) ] << 24 );
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	332c      	adds	r3, #44	@ 0x2c
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0e1b      	lsrs	r3, r3, #24
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <mbedtls_aes_setkey_enc+0x3e4>)
 80016ac:	5c9b      	ldrb	r3, [r3, r2]
 80016ae:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 80016b4:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 80016b6:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	3314      	adds	r3, #20
 80016bc:	6819      	ldr	r1, [r3, #0]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	3330      	adds	r3, #48	@ 0x30
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	3334      	adds	r3, #52	@ 0x34
 80016c8:	404a      	eors	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	3318      	adds	r3, #24
 80016d0:	6819      	ldr	r1, [r3, #0]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	3334      	adds	r3, #52	@ 0x34
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	3338      	adds	r3, #56	@ 0x38
 80016dc:	404a      	eors	r2, r1
 80016de:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	331c      	adds	r3, #28
 80016e4:	6819      	ldr	r1, [r3, #0]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	3338      	adds	r3, #56	@ 0x38
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	333c      	adds	r3, #60	@ 0x3c
 80016f0:	404a      	eors	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	3320      	adds	r3, #32
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b06      	cmp	r3, #6
 8001704:	f67f af5c 	bls.w	80015c0 <mbedtls_aes_setkey_enc+0x28c>
            }
            break;
 8001708:	bf00      	nop
    }

    return( 0 );
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200043b8 	.word	0x200043b8
 8001718:	200021b8 	.word	0x200021b8

0800171c <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0d0      	sub	sp, #320	@ 0x140
 8001720:	af00      	add	r7, sp, #0
 8001722:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001726:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800172a:	6018      	str	r0, [r3, #0]
 800172c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001730:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001734:	6019      	str	r1, [r3, #0]
 8001736:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800173a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800173e:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fdd5 	bl	80012f4 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800174a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800174e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3308      	adds	r3, #8
 8001756:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800175a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800175e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001768:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800176a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800176e:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8001772:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001776:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800177a:	f107 0014 	add.w	r0, r7, #20
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	f7ff fdd7 	bl	8001334 <mbedtls_aes_setkey_enc>
 8001786:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800178a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 80e2 	bne.w	8001958 <mbedtls_aes_setkey_dec+0x23c>
        goto exit;

    ctx->nr = cty.nr;
 8001794:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001798:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80017a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80017aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80017ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80017b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	4413      	add	r3, r2
 80017c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 80017c6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80017ca:	1d13      	adds	r3, r2, #4
 80017cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80017d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80017d4:	1d19      	adds	r1, r3, #4
 80017d6:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80017de:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80017e2:	1d13      	adds	r3, r2, #4
 80017e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80017e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80017ec:	1d19      	adds	r1, r3, #4
 80017ee:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80017f6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80017fa:	1d13      	adds	r3, r2, #4
 80017fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001800:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001804:	1d19      	adds	r1, r3, #4
 8001806:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800180e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001812:	1d13      	adds	r3, r2, #4
 8001814:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001818:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800181c:	1d19      	adds	r1, r3, #4
 800181e:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8001826:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800182a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3b01      	subs	r3, #1
 8001834:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001838:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800183c:	3b20      	subs	r3, #32
 800183e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001842:	e054      	b.n	80018ee <mbedtls_aes_setkey_dec+0x1d2>
    {
        for( j = 0; j < 4; j++, SK++ )
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800184a:	e042      	b.n	80018d2 <mbedtls_aes_setkey_dec+0x1b6>
        {
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 800184c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	4b47      	ldr	r3, [pc, #284]	@ (8001974 <mbedtls_aes_setkey_dec+0x258>)
 8001858:	5c9b      	ldrb	r3, [r3, r2]
 800185a:	461a      	mov	r2, r3
 800185c:	4b46      	ldr	r3, [pc, #280]	@ (8001978 <mbedtls_aes_setkey_dec+0x25c>)
 800185e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 8001862:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4619      	mov	r1, r3
 800186e:	4b41      	ldr	r3, [pc, #260]	@ (8001974 <mbedtls_aes_setkey_dec+0x258>)
 8001870:	5c5b      	ldrb	r3, [r3, r1]
 8001872:	4619      	mov	r1, r3
 8001874:	4b41      	ldr	r3, [pc, #260]	@ (800197c <mbedtls_aes_setkey_dec+0x260>)
 8001876:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 800187a:	405a      	eors	r2, r3
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 800187c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	0c1b      	lsrs	r3, r3, #16
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4619      	mov	r1, r3
 8001888:	4b3a      	ldr	r3, [pc, #232]	@ (8001974 <mbedtls_aes_setkey_dec+0x258>)
 800188a:	5c5b      	ldrb	r3, [r3, r1]
 800188c:	4619      	mov	r1, r3
 800188e:	4b3c      	ldr	r3, [pc, #240]	@ (8001980 <mbedtls_aes_setkey_dec+0x264>)
 8001890:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 8001894:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ MBEDTLS_BYTE_3( *SK ) ] );
 8001898:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	0e1b      	lsrs	r3, r3, #24
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b33      	ldr	r3, [pc, #204]	@ (8001974 <mbedtls_aes_setkey_dec+0x258>)
 80018a6:	5c9b      	ldrb	r3, [r3, r2]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b36      	ldr	r3, [pc, #216]	@ (8001984 <mbedtls_aes_setkey_dec+0x268>)
 80018ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 80018b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80018b4:	1d18      	adds	r0, r3, #4
 80018b6:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 80018ba:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 80018bc:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 80018be:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018c2:	3301      	adds	r3, #1
 80018c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80018c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80018cc:	3304      	adds	r3, #4
 80018ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80018d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	ddb8      	ble.n	800184c <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80018da:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80018de:	3b01      	subs	r3, #1
 80018e0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80018e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80018e8:	3b20      	subs	r3, #32
 80018ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80018ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	dca6      	bgt.n	8001844 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 80018f6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80018fa:	1d13      	adds	r3, r2, #4
 80018fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001900:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001904:	1d19      	adds	r1, r3, #4
 8001906:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800190e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001912:	1d13      	adds	r3, r2, #4
 8001914:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001918:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800191c:	1d19      	adds	r1, r3, #4
 800191e:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8001926:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800192a:	1d13      	adds	r3, r2, #4
 800192c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001930:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001934:	1d19      	adds	r1, r3, #4
 8001936:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800193e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001942:	1d13      	adds	r3, r2, #4
 8001944:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001948:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800194c:	1d19      	adds	r1, r3, #4
 800194e:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e000      	b.n	800195a <mbedtls_aes_setkey_dec+0x23e>
        goto exit;
 8001958:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fcd6 	bl	8001310 <mbedtls_aes_free>

    return( ret );
 8001964:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 8001968:	4618      	mov	r0, r3
 800196a:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200021b8 	.word	0x200021b8
 8001978:	200033b8 	.word	0x200033b8
 800197c:	200037b8 	.word	0x200037b8
 8001980:	20003bb8 	.word	0x20003bb8
 8001984:	20003fb8 	.word	0x20003fb8

08001988 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08e      	sub	sp, #56	@ 0x38
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	633b      	str	r3, [r7, #48]	@ 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	3301      	adds	r3, #1
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	431a      	orrs	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	3302      	adds	r3, #2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3303      	adds	r3, #3
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	061b      	lsls	r3, r3, #24
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019c2:	1d1a      	adds	r2, r3, #4
 80019c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4053      	eors	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3304      	adds	r3, #4
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	3305      	adds	r3, #5
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	431a      	orrs	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	3306      	adds	r3, #6
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	041b      	lsls	r3, r3, #16
 80019e8:	431a      	orrs	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	3307      	adds	r3, #7
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	4313      	orrs	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f8:	1d1a      	adds	r2, r3, #4
 80019fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	4053      	eors	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	3308      	adds	r3, #8
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3309      	adds	r3, #9
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	431a      	orrs	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	330a      	adds	r3, #10
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	041b      	lsls	r3, r3, #16
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	330b      	adds	r3, #11
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	061b      	lsls	r3, r3, #24
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a2e:	1d1a      	adds	r2, r3, #4
 8001a30:	633a      	str	r2, [r7, #48]	@ 0x30
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	4053      	eors	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	330c      	adds	r3, #12
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	330d      	adds	r3, #13
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	330e      	adds	r3, #14
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	431a      	orrs	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	330f      	adds	r3, #15
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	061b      	lsls	r3, r3, #24
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a64:	1d1a      	adds	r2, r3, #4
 8001a66:	633a      	str	r2, [r7, #48]	@ 0x30
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	4053      	eors	r3, r2
 8001a6e:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	105b      	asrs	r3, r3, #1
 8001a76:	3b01      	subs	r3, #1
 8001a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a7a:	e122      	b.n	8001cc2 <mbedtls_internal_aes_encrypt+0x33a>
    {
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a7e:	1d1a      	adds	r2, r3, #4
 8001a80:	633a      	str	r2, [r7, #48]	@ 0x30
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4bb0      	ldr	r3, [pc, #704]	@ (8001d4c <mbedtls_internal_aes_encrypt+0x3c4>)
 8001a8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a90:	405a      	eors	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4bad      	ldr	r3, [pc, #692]	@ (8001d50 <mbedtls_internal_aes_encrypt+0x3c8>)
 8001a9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001aa0:	405a      	eors	r2, r3
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	0c1b      	lsrs	r3, r3, #16
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4baa      	ldr	r3, [pc, #680]	@ (8001d54 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001aac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ab0:	405a      	eors	r2, r3
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	0e1b      	lsrs	r3, r3, #24
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4ba7      	ldr	r3, [pc, #668]	@ (8001d58 <mbedtls_internal_aes_encrypt+0x3d0>)
 8001abc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ac0:	4053      	eors	r3, r2
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac6:	1d1a      	adds	r2, r3, #4
 8001ac8:	633a      	str	r2, [r7, #48]	@ 0x30
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4b9e      	ldr	r3, [pc, #632]	@ (8001d4c <mbedtls_internal_aes_encrypt+0x3c4>)
 8001ad4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ad8:	405a      	eors	r2, r3
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4b9b      	ldr	r3, [pc, #620]	@ (8001d50 <mbedtls_internal_aes_encrypt+0x3c8>)
 8001ae4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ae8:	405a      	eors	r2, r3
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	4619      	mov	r1, r3
 8001af2:	4b98      	ldr	r3, [pc, #608]	@ (8001d54 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001af4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001af8:	405a      	eors	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	0e1b      	lsrs	r3, r3, #24
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	4619      	mov	r1, r3
 8001b02:	4b95      	ldr	r3, [pc, #596]	@ (8001d58 <mbedtls_internal_aes_encrypt+0x3d0>)
 8001b04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b08:	4053      	eors	r3, r2
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b0e:	1d1a      	adds	r2, r3, #4
 8001b10:	633a      	str	r2, [r7, #48]	@ 0x30
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4b8c      	ldr	r3, [pc, #560]	@ (8001d4c <mbedtls_internal_aes_encrypt+0x3c4>)
 8001b1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b20:	405a      	eors	r2, r3
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4b89      	ldr	r3, [pc, #548]	@ (8001d50 <mbedtls_internal_aes_encrypt+0x3c8>)
 8001b2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b30:	405a      	eors	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	0c1b      	lsrs	r3, r3, #16
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4b86      	ldr	r3, [pc, #536]	@ (8001d54 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001b3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b40:	405a      	eors	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	0e1b      	lsrs	r3, r3, #24
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4b83      	ldr	r3, [pc, #524]	@ (8001d58 <mbedtls_internal_aes_encrypt+0x3d0>)
 8001b4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b50:	4053      	eors	r3, r2
 8001b52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b56:	1d1a      	adds	r2, r3, #4
 8001b58:	633a      	str	r2, [r7, #48]	@ 0x30
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4619      	mov	r1, r3
 8001b62:	4b7a      	ldr	r3, [pc, #488]	@ (8001d4c <mbedtls_internal_aes_encrypt+0x3c4>)
 8001b64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b68:	405a      	eors	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	4619      	mov	r1, r3
 8001b72:	4b77      	ldr	r3, [pc, #476]	@ (8001d50 <mbedtls_internal_aes_encrypt+0x3c8>)
 8001b74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b78:	405a      	eors	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4619      	mov	r1, r3
 8001b82:	4b74      	ldr	r3, [pc, #464]	@ (8001d54 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001b84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b88:	405a      	eors	r2, r3
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	0e1b      	lsrs	r3, r3, #24
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	4619      	mov	r1, r3
 8001b92:	4b71      	ldr	r3, [pc, #452]	@ (8001d58 <mbedtls_internal_aes_encrypt+0x3d0>)
 8001b94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b98:	4053      	eors	r3, r2
 8001b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b9e:	1d1a      	adds	r2, r3, #4
 8001ba0:	633a      	str	r2, [r7, #48]	@ 0x30
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4b68      	ldr	r3, [pc, #416]	@ (8001d4c <mbedtls_internal_aes_encrypt+0x3c4>)
 8001bac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bb0:	405a      	eors	r2, r3
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4b65      	ldr	r3, [pc, #404]	@ (8001d50 <mbedtls_internal_aes_encrypt+0x3c8>)
 8001bbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bc0:	405a      	eors	r2, r3
 8001bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4b62      	ldr	r3, [pc, #392]	@ (8001d54 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001bcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bd0:	405a      	eors	r2, r3
 8001bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd4:	0e1b      	lsrs	r3, r3, #24
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4b5f      	ldr	r3, [pc, #380]	@ (8001d58 <mbedtls_internal_aes_encrypt+0x3d0>)
 8001bdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001be0:	4053      	eors	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001be6:	1d1a      	adds	r2, r3, #4
 8001be8:	633a      	str	r2, [r7, #48]	@ 0x30
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4b56      	ldr	r3, [pc, #344]	@ (8001d4c <mbedtls_internal_aes_encrypt+0x3c4>)
 8001bf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bf8:	405a      	eors	r2, r3
 8001bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	4619      	mov	r1, r3
 8001c02:	4b53      	ldr	r3, [pc, #332]	@ (8001d50 <mbedtls_internal_aes_encrypt+0x3c8>)
 8001c04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c08:	405a      	eors	r2, r3
 8001c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c0c:	0c1b      	lsrs	r3, r3, #16
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4619      	mov	r1, r3
 8001c12:	4b50      	ldr	r3, [pc, #320]	@ (8001d54 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001c14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c18:	405a      	eors	r2, r3
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	0e1b      	lsrs	r3, r3, #24
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	4b4d      	ldr	r3, [pc, #308]	@ (8001d58 <mbedtls_internal_aes_encrypt+0x3d0>)
 8001c24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c28:	4053      	eors	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c2e:	1d1a      	adds	r2, r3, #4
 8001c30:	633a      	str	r2, [r7, #48]	@ 0x30
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4b44      	ldr	r3, [pc, #272]	@ (8001d4c <mbedtls_internal_aes_encrypt+0x3c4>)
 8001c3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c40:	405a      	eors	r2, r3
 8001c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4b41      	ldr	r3, [pc, #260]	@ (8001d50 <mbedtls_internal_aes_encrypt+0x3c8>)
 8001c4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c50:	405a      	eors	r2, r3
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d54 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001c5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c60:	405a      	eors	r2, r3
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	0e1b      	lsrs	r3, r3, #24
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d58 <mbedtls_internal_aes_encrypt+0x3d0>)
 8001c6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c70:	4053      	eors	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c76:	1d1a      	adds	r2, r3, #4
 8001c78:	633a      	str	r2, [r7, #48]	@ 0x30
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4619      	mov	r1, r3
 8001c82:	4b32      	ldr	r3, [pc, #200]	@ (8001d4c <mbedtls_internal_aes_encrypt+0x3c4>)
 8001c84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c88:	405a      	eors	r2, r3
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4619      	mov	r1, r3
 8001c92:	4b2f      	ldr	r3, [pc, #188]	@ (8001d50 <mbedtls_internal_aes_encrypt+0x3c8>)
 8001c94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c98:	405a      	eors	r2, r3
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d54 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001ca4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ca8:	405a      	eors	r2, r3
 8001caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cac:	0e1b      	lsrs	r3, r3, #24
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4b29      	ldr	r3, [pc, #164]	@ (8001d58 <mbedtls_internal_aes_encrypt+0x3d0>)
 8001cb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cb8:	4053      	eors	r3, r2
 8001cba:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f73f aed9 	bgt.w	8001a7c <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8001cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ccc:	1d1a      	adds	r2, r3, #4
 8001cce:	633a      	str	r2, [r7, #48]	@ 0x30
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <mbedtls_internal_aes_encrypt+0x3c4>)
 8001cda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cde:	405a      	eors	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <mbedtls_internal_aes_encrypt+0x3c8>)
 8001cea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cee:	405a      	eors	r2, r3
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	0c1b      	lsrs	r3, r3, #16
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001cfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cfe:	405a      	eors	r2, r3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	0e1b      	lsrs	r3, r3, #24
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4619      	mov	r1, r3
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <mbedtls_internal_aes_encrypt+0x3d0>)
 8001d0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d0e:	4053      	eors	r3, r2
 8001d10:	623b      	str	r3, [r7, #32]
 8001d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d14:	1d1a      	adds	r2, r3, #4
 8001d16:	633a      	str	r2, [r7, #48]	@ 0x30
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <mbedtls_internal_aes_encrypt+0x3c4>)
 8001d22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d26:	405a      	eors	r2, r3
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <mbedtls_internal_aes_encrypt+0x3c8>)
 8001d32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d36:	405a      	eors	r2, r3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	0c1b      	lsrs	r3, r3, #16
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <mbedtls_internal_aes_encrypt+0x3cc>)
 8001d42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d46:	405a      	eors	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	e007      	b.n	8001d5c <mbedtls_internal_aes_encrypt+0x3d4>
 8001d4c:	200022b8 	.word	0x200022b8
 8001d50:	200026b8 	.word	0x200026b8
 8001d54:	20002ab8 	.word	0x20002ab8
 8001d58:	20002eb8 	.word	0x20002eb8
 8001d5c:	0e1b      	lsrs	r3, r3, #24
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4619      	mov	r1, r3
 8001d62:	4b9f      	ldr	r3, [pc, #636]	@ (8001fe0 <mbedtls_internal_aes_encrypt+0x658>)
 8001d64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d68:	4053      	eors	r3, r2
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d6e:	1d1a      	adds	r2, r3, #4
 8001d70:	633a      	str	r2, [r7, #48]	@ 0x30
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4b9a      	ldr	r3, [pc, #616]	@ (8001fe4 <mbedtls_internal_aes_encrypt+0x65c>)
 8001d7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d80:	405a      	eors	r2, r3
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4b97      	ldr	r3, [pc, #604]	@ (8001fe8 <mbedtls_internal_aes_encrypt+0x660>)
 8001d8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d90:	405a      	eors	r2, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	0c1b      	lsrs	r3, r3, #16
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4b94      	ldr	r3, [pc, #592]	@ (8001fec <mbedtls_internal_aes_encrypt+0x664>)
 8001d9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001da0:	405a      	eors	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	0e1b      	lsrs	r3, r3, #24
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	4619      	mov	r1, r3
 8001daa:	4b8d      	ldr	r3, [pc, #564]	@ (8001fe0 <mbedtls_internal_aes_encrypt+0x658>)
 8001dac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001db0:	4053      	eors	r3, r2
 8001db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db6:	1d1a      	adds	r2, r3, #4
 8001db8:	633a      	str	r2, [r7, #48]	@ 0x30
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4b88      	ldr	r3, [pc, #544]	@ (8001fe4 <mbedtls_internal_aes_encrypt+0x65c>)
 8001dc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001dc8:	405a      	eors	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4b85      	ldr	r3, [pc, #532]	@ (8001fe8 <mbedtls_internal_aes_encrypt+0x660>)
 8001dd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001dd8:	405a      	eors	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	4619      	mov	r1, r3
 8001de2:	4b82      	ldr	r3, [pc, #520]	@ (8001fec <mbedtls_internal_aes_encrypt+0x664>)
 8001de4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001de8:	405a      	eors	r2, r3
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	0e1b      	lsrs	r3, r3, #24
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	4b7b      	ldr	r3, [pc, #492]	@ (8001fe0 <mbedtls_internal_aes_encrypt+0x658>)
 8001df4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001df8:	4053      	eors	r3, r2
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    t.X[0] = *RK++ ^ \
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dfe:	1d1a      	adds	r2, r3, #4
 8001e00:	633a      	str	r2, [r7, #48]	@ 0x30
 8001e02:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8001e04:	6a3a      	ldr	r2, [r7, #32]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4a79      	ldr	r2, [pc, #484]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001e0c:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 8001e0e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8001e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4619      	mov	r1, r3
 8001e18:	4b75      	ldr	r3, [pc, #468]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001e1a:	5c5b      	ldrb	r3, [r3, r1]
 8001e1c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8001e1e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8001e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e22:	0c1b      	lsrs	r3, r3, #16
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4619      	mov	r1, r3
 8001e28:	4b71      	ldr	r3, [pc, #452]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001e2a:	5c5b      	ldrb	r3, [r3, r1]
 8001e2c:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8001e2e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 8001e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e32:	0e1b      	lsrs	r3, r3, #24
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	4619      	mov	r1, r3
 8001e38:	4b6d      	ldr	r3, [pc, #436]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001e3a:	5c5b      	ldrb	r3, [r3, r1]
 8001e3c:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8001e3e:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8001e40:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 8001e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e44:	1d1a      	adds	r2, r3, #4
 8001e46:	633a      	str	r2, [r7, #48]	@ 0x30
 8001e48:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8001e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4a67      	ldr	r2, [pc, #412]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001e52:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8001e54:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4b64      	ldr	r3, [pc, #400]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001e60:	5c5b      	ldrb	r3, [r3, r1]
 8001e62:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8001e64:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8001e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4b60      	ldr	r3, [pc, #384]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001e70:	5c5b      	ldrb	r3, [r3, r1]
 8001e72:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8001e74:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	0e1b      	lsrs	r3, r3, #24
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001e80:	5c5b      	ldrb	r3, [r3, r1]
 8001e82:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8001e84:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8001e86:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 8001e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e8a:	1d1a      	adds	r2, r3, #4
 8001e8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8001e8e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8001e90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	4611      	mov	r1, r2
 8001e96:	4a56      	ldr	r2, [pc, #344]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001e98:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8001e9a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8001e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4b52      	ldr	r3, [pc, #328]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001ea6:	5c5b      	ldrb	r3, [r3, r1]
 8001ea8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8001eaa:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001eb6:	5c5b      	ldrb	r3, [r3, r1]
 8001eb8:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8001eba:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebe:	0e1b      	lsrs	r3, r3, #24
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001ec6:	5c5b      	ldrb	r3, [r3, r1]
 8001ec8:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8001eca:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8001ecc:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 8001ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed0:	1d1a      	adds	r2, r3, #4
 8001ed2:	633a      	str	r2, [r7, #48]	@ 0x30
 8001ed4:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8001ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	4611      	mov	r1, r2
 8001edc:	4a44      	ldr	r2, [pc, #272]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001ede:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 8001ee0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4b41      	ldr	r3, [pc, #260]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001eec:	5c5b      	ldrb	r3, [r3, r1]
 8001eee:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8001ef0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	0c1b      	lsrs	r3, r3, #16
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001efc:	5c5b      	ldrb	r3, [r3, r1]
 8001efe:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 8001f00:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 8001f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f04:	0e1b      	lsrs	r3, r3, #24
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4b39      	ldr	r3, [pc, #228]	@ (8001ff0 <mbedtls_internal_aes_encrypt+0x668>)
 8001f0c:	5c5b      	ldrb	r3, [r3, r1]
 8001f0e:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 8001f10:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 8001f12:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	0a1a      	lsrs	r2, r3, #8
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3301      	adds	r3, #1
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	0c1a      	lsrs	r2, r3, #16
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3302      	adds	r3, #2
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	0e1a      	lsrs	r2, r3, #24
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3303      	adds	r3, #3
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3304      	adds	r3, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	0a1a      	lsrs	r2, r3, #8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3305      	adds	r3, #5
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	0c1a      	lsrs	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3306      	adds	r3, #6
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	0e1a      	lsrs	r2, r3, #24
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3307      	adds	r3, #7
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3308      	adds	r3, #8
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	0a1a      	lsrs	r2, r3, #8
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3309      	adds	r3, #9
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	0c1a      	lsrs	r2, r3, #16
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	330a      	adds	r3, #10
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	0e1a      	lsrs	r2, r3, #24
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	330b      	adds	r3, #11
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	0a1a      	lsrs	r2, r3, #8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	330d      	adds	r3, #13
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	0c1a      	lsrs	r2, r3, #16
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	330e      	adds	r3, #14
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	0e1a      	lsrs	r2, r3, #24
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	330f      	adds	r3, #15
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	2120      	movs	r1, #32
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 ff89 	bl	8002ee8 <mbedtls_platform_zeroize>

    return( 0 );
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3738      	adds	r7, #56	@ 0x38
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20002eb8 	.word	0x20002eb8
 8001fe4:	200022b8 	.word	0x200022b8
 8001fe8:	200026b8 	.word	0x200026b8
 8001fec:	20002ab8 	.word	0x20002ab8
 8001ff0:	200021b8 	.word	0x200021b8

08001ff4 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08e      	sub	sp, #56	@ 0x38
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	633b      	str	r3, [r7, #48]	@ 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	3301      	adds	r3, #1
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	431a      	orrs	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	3302      	adds	r3, #2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	431a      	orrs	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3303      	adds	r3, #3
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	061b      	lsls	r3, r3, #24
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800202e:	1d1a      	adds	r2, r3, #4
 8002030:	633a      	str	r2, [r7, #48]	@ 0x30
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4053      	eors	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3304      	adds	r3, #4
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	3305      	adds	r3, #5
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	431a      	orrs	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3306      	adds	r3, #6
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	431a      	orrs	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3307      	adds	r3, #7
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	061b      	lsls	r3, r3, #24
 800205e:	4313      	orrs	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002064:	1d1a      	adds	r2, r3, #4
 8002066:	633a      	str	r2, [r7, #48]	@ 0x30
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	4053      	eors	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	3308      	adds	r3, #8
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	3309      	adds	r3, #9
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	431a      	orrs	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	330a      	adds	r3, #10
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	041b      	lsls	r3, r3, #16
 800208a:	431a      	orrs	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	330b      	adds	r3, #11
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	061b      	lsls	r3, r3, #24
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800209a:	1d1a      	adds	r2, r3, #4
 800209c:	633a      	str	r2, [r7, #48]	@ 0x30
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	4053      	eors	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	330c      	adds	r3, #12
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	330d      	adds	r3, #13
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	431a      	orrs	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	330e      	adds	r3, #14
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	431a      	orrs	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	330f      	adds	r3, #15
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d0:	1d1a      	adds	r2, r3, #4
 80020d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	4053      	eors	r3, r2
 80020da:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	105b      	asrs	r3, r3, #1
 80020e2:	3b01      	subs	r3, #1
 80020e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80020e6:	e122      	b.n	800232e <mbedtls_internal_aes_decrypt+0x33a>
    {
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 80020e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ea:	1d1a      	adds	r2, r3, #4
 80020ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	4619      	mov	r1, r3
 80020f6:	4bb0      	ldr	r3, [pc, #704]	@ (80023b8 <mbedtls_internal_aes_decrypt+0x3c4>)
 80020f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020fc:	405a      	eors	r2, r3
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4619      	mov	r1, r3
 8002106:	4bad      	ldr	r3, [pc, #692]	@ (80023bc <mbedtls_internal_aes_decrypt+0x3c8>)
 8002108:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800210c:	405a      	eors	r2, r3
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4619      	mov	r1, r3
 8002116:	4baa      	ldr	r3, [pc, #680]	@ (80023c0 <mbedtls_internal_aes_decrypt+0x3cc>)
 8002118:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800211c:	405a      	eors	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	0e1b      	lsrs	r3, r3, #24
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4619      	mov	r1, r3
 8002126:	4ba7      	ldr	r3, [pc, #668]	@ (80023c4 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002128:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800212c:	4053      	eors	r3, r2
 800212e:	623b      	str	r3, [r7, #32]
 8002130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002132:	1d1a      	adds	r2, r3, #4
 8002134:	633a      	str	r2, [r7, #48]	@ 0x30
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	4619      	mov	r1, r3
 800213e:	4b9e      	ldr	r3, [pc, #632]	@ (80023b8 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002140:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002144:	405a      	eors	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4619      	mov	r1, r3
 800214e:	4b9b      	ldr	r3, [pc, #620]	@ (80023bc <mbedtls_internal_aes_decrypt+0x3c8>)
 8002150:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002154:	405a      	eors	r2, r3
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	0c1b      	lsrs	r3, r3, #16
 800215a:	b2db      	uxtb	r3, r3
 800215c:	4619      	mov	r1, r3
 800215e:	4b98      	ldr	r3, [pc, #608]	@ (80023c0 <mbedtls_internal_aes_decrypt+0x3cc>)
 8002160:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002164:	405a      	eors	r2, r3
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	0e1b      	lsrs	r3, r3, #24
 800216a:	b2db      	uxtb	r3, r3
 800216c:	4619      	mov	r1, r3
 800216e:	4b95      	ldr	r3, [pc, #596]	@ (80023c4 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002170:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002174:	4053      	eors	r3, r2
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
 8002178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217a:	1d1a      	adds	r2, r3, #4
 800217c:	633a      	str	r2, [r7, #48]	@ 0x30
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	4619      	mov	r1, r3
 8002186:	4b8c      	ldr	r3, [pc, #560]	@ (80023b8 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002188:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800218c:	405a      	eors	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4619      	mov	r1, r3
 8002196:	4b89      	ldr	r3, [pc, #548]	@ (80023bc <mbedtls_internal_aes_decrypt+0x3c8>)
 8002198:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800219c:	405a      	eors	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	4b86      	ldr	r3, [pc, #536]	@ (80023c0 <mbedtls_internal_aes_decrypt+0x3cc>)
 80021a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021ac:	405a      	eors	r2, r3
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	0e1b      	lsrs	r3, r3, #24
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	4619      	mov	r1, r3
 80021b6:	4b83      	ldr	r3, [pc, #524]	@ (80023c4 <mbedtls_internal_aes_decrypt+0x3d0>)
 80021b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021bc:	4053      	eors	r3, r2
 80021be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c2:	1d1a      	adds	r2, r3, #4
 80021c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	4619      	mov	r1, r3
 80021ce:	4b7a      	ldr	r3, [pc, #488]	@ (80023b8 <mbedtls_internal_aes_decrypt+0x3c4>)
 80021d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021d4:	405a      	eors	r2, r3
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	4619      	mov	r1, r3
 80021de:	4b77      	ldr	r3, [pc, #476]	@ (80023bc <mbedtls_internal_aes_decrypt+0x3c8>)
 80021e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021e4:	405a      	eors	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	0c1b      	lsrs	r3, r3, #16
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4619      	mov	r1, r3
 80021ee:	4b74      	ldr	r3, [pc, #464]	@ (80023c0 <mbedtls_internal_aes_decrypt+0x3cc>)
 80021f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021f4:	405a      	eors	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	0e1b      	lsrs	r3, r3, #24
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4619      	mov	r1, r3
 80021fe:	4b71      	ldr	r3, [pc, #452]	@ (80023c4 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002200:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002204:	4053      	eors	r3, r2
 8002206:	62fb      	str	r3, [r7, #44]	@ 0x2c
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8002208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800220a:	1d1a      	adds	r2, r3, #4
 800220c:	633a      	str	r2, [r7, #48]	@ 0x30
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	4619      	mov	r1, r3
 8002216:	4b68      	ldr	r3, [pc, #416]	@ (80023b8 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002218:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800221c:	405a      	eors	r2, r3
 800221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4619      	mov	r1, r3
 8002226:	4b65      	ldr	r3, [pc, #404]	@ (80023bc <mbedtls_internal_aes_decrypt+0x3c8>)
 8002228:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800222c:	405a      	eors	r2, r3
 800222e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4619      	mov	r1, r3
 8002236:	4b62      	ldr	r3, [pc, #392]	@ (80023c0 <mbedtls_internal_aes_decrypt+0x3cc>)
 8002238:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800223c:	405a      	eors	r2, r3
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	0e1b      	lsrs	r3, r3, #24
 8002242:	b2db      	uxtb	r3, r3
 8002244:	4619      	mov	r1, r3
 8002246:	4b5f      	ldr	r3, [pc, #380]	@ (80023c4 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002248:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800224c:	4053      	eors	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002252:	1d1a      	adds	r2, r3, #4
 8002254:	633a      	str	r2, [r7, #48]	@ 0x30
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4619      	mov	r1, r3
 800225e:	4b56      	ldr	r3, [pc, #344]	@ (80023b8 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002260:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002264:	405a      	eors	r2, r3
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4619      	mov	r1, r3
 800226e:	4b53      	ldr	r3, [pc, #332]	@ (80023bc <mbedtls_internal_aes_decrypt+0x3c8>)
 8002270:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002274:	405a      	eors	r2, r3
 8002276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	b2db      	uxtb	r3, r3
 800227c:	4619      	mov	r1, r3
 800227e:	4b50      	ldr	r3, [pc, #320]	@ (80023c0 <mbedtls_internal_aes_decrypt+0x3cc>)
 8002280:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002284:	405a      	eors	r2, r3
 8002286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002288:	0e1b      	lsrs	r3, r3, #24
 800228a:	b2db      	uxtb	r3, r3
 800228c:	4619      	mov	r1, r3
 800228e:	4b4d      	ldr	r3, [pc, #308]	@ (80023c4 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002290:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002294:	4053      	eors	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	1d1a      	adds	r2, r3, #4
 800229c:	633a      	str	r2, [r7, #48]	@ 0x30
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	4b44      	ldr	r3, [pc, #272]	@ (80023b8 <mbedtls_internal_aes_decrypt+0x3c4>)
 80022a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022ac:	405a      	eors	r2, r3
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	4b41      	ldr	r3, [pc, #260]	@ (80023bc <mbedtls_internal_aes_decrypt+0x3c8>)
 80022b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022bc:	405a      	eors	r2, r3
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4619      	mov	r1, r3
 80022c6:	4b3e      	ldr	r3, [pc, #248]	@ (80023c0 <mbedtls_internal_aes_decrypt+0x3cc>)
 80022c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022cc:	405a      	eors	r2, r3
 80022ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d0:	0e1b      	lsrs	r3, r3, #24
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	4b3b      	ldr	r3, [pc, #236]	@ (80023c4 <mbedtls_internal_aes_decrypt+0x3d0>)
 80022d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022dc:	4053      	eors	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e2:	1d1a      	adds	r2, r3, #4
 80022e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	4619      	mov	r1, r3
 80022ee:	4b32      	ldr	r3, [pc, #200]	@ (80023b8 <mbedtls_internal_aes_decrypt+0x3c4>)
 80022f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022f4:	405a      	eors	r2, r3
 80022f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4619      	mov	r1, r3
 80022fe:	4b2f      	ldr	r3, [pc, #188]	@ (80023bc <mbedtls_internal_aes_decrypt+0x3c8>)
 8002300:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002304:	405a      	eors	r2, r3
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4619      	mov	r1, r3
 800230e:	4b2c      	ldr	r3, [pc, #176]	@ (80023c0 <mbedtls_internal_aes_decrypt+0x3cc>)
 8002310:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002314:	405a      	eors	r2, r3
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	0e1b      	lsrs	r3, r3, #24
 800231a:	b2db      	uxtb	r3, r3
 800231c:	4619      	mov	r1, r3
 800231e:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002320:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002324:	4053      	eors	r3, r2
 8002326:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8002328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232a:	3b01      	subs	r3, #1
 800232c:	637b      	str	r3, [r7, #52]	@ 0x34
 800232e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002330:	2b00      	cmp	r3, #0
 8002332:	f73f aed9 	bgt.w	80020e8 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002338:	1d1a      	adds	r2, r3, #4
 800233a:	633a      	str	r2, [r7, #48]	@ 0x30
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	4619      	mov	r1, r3
 8002344:	4b1c      	ldr	r3, [pc, #112]	@ (80023b8 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002346:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800234a:	405a      	eors	r2, r3
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	b2db      	uxtb	r3, r3
 8002352:	4619      	mov	r1, r3
 8002354:	4b19      	ldr	r3, [pc, #100]	@ (80023bc <mbedtls_internal_aes_decrypt+0x3c8>)
 8002356:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800235a:	405a      	eors	r2, r3
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	0c1b      	lsrs	r3, r3, #16
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	4b16      	ldr	r3, [pc, #88]	@ (80023c0 <mbedtls_internal_aes_decrypt+0x3cc>)
 8002366:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800236a:	405a      	eors	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	0e1b      	lsrs	r3, r3, #24
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002376:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800237a:	4053      	eors	r3, r2
 800237c:	623b      	str	r3, [r7, #32]
 800237e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002380:	1d1a      	adds	r2, r3, #4
 8002382:	633a      	str	r2, [r7, #48]	@ 0x30
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	4619      	mov	r1, r3
 800238c:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <mbedtls_internal_aes_decrypt+0x3c4>)
 800238e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002392:	405a      	eors	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b2db      	uxtb	r3, r3
 800239a:	4619      	mov	r1, r3
 800239c:	4b07      	ldr	r3, [pc, #28]	@ (80023bc <mbedtls_internal_aes_decrypt+0x3c8>)
 800239e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023a2:	405a      	eors	r2, r3
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	0c1b      	lsrs	r3, r3, #16
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <mbedtls_internal_aes_decrypt+0x3cc>)
 80023ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023b2:	405a      	eors	r2, r3
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	e007      	b.n	80023c8 <mbedtls_internal_aes_decrypt+0x3d4>
 80023b8:	200033b8 	.word	0x200033b8
 80023bc:	200037b8 	.word	0x200037b8
 80023c0:	20003bb8 	.word	0x20003bb8
 80023c4:	20003fb8 	.word	0x20003fb8
 80023c8:	0e1b      	lsrs	r3, r3, #24
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4619      	mov	r1, r3
 80023ce:	4b9f      	ldr	r3, [pc, #636]	@ (800264c <mbedtls_internal_aes_decrypt+0x658>)
 80023d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023d4:	4053      	eors	r3, r2
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023da:	1d1a      	adds	r2, r3, #4
 80023dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4619      	mov	r1, r3
 80023e6:	4b9a      	ldr	r3, [pc, #616]	@ (8002650 <mbedtls_internal_aes_decrypt+0x65c>)
 80023e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023ec:	405a      	eors	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	4b97      	ldr	r3, [pc, #604]	@ (8002654 <mbedtls_internal_aes_decrypt+0x660>)
 80023f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023fc:	405a      	eors	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4619      	mov	r1, r3
 8002406:	4b94      	ldr	r3, [pc, #592]	@ (8002658 <mbedtls_internal_aes_decrypt+0x664>)
 8002408:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800240c:	405a      	eors	r2, r3
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	0e1b      	lsrs	r3, r3, #24
 8002412:	b2db      	uxtb	r3, r3
 8002414:	4619      	mov	r1, r3
 8002416:	4b8d      	ldr	r3, [pc, #564]	@ (800264c <mbedtls_internal_aes_decrypt+0x658>)
 8002418:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800241c:	4053      	eors	r3, r2
 800241e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002422:	1d1a      	adds	r2, r3, #4
 8002424:	633a      	str	r2, [r7, #48]	@ 0x30
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	4619      	mov	r1, r3
 800242e:	4b88      	ldr	r3, [pc, #544]	@ (8002650 <mbedtls_internal_aes_decrypt+0x65c>)
 8002430:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002434:	405a      	eors	r2, r3
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	b2db      	uxtb	r3, r3
 800243c:	4619      	mov	r1, r3
 800243e:	4b85      	ldr	r3, [pc, #532]	@ (8002654 <mbedtls_internal_aes_decrypt+0x660>)
 8002440:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002444:	405a      	eors	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	b2db      	uxtb	r3, r3
 800244c:	4619      	mov	r1, r3
 800244e:	4b82      	ldr	r3, [pc, #520]	@ (8002658 <mbedtls_internal_aes_decrypt+0x664>)
 8002450:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002454:	405a      	eors	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	0e1b      	lsrs	r3, r3, #24
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	4b7b      	ldr	r3, [pc, #492]	@ (800264c <mbedtls_internal_aes_decrypt+0x658>)
 8002460:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002464:	4053      	eors	r3, r2
 8002466:	62fb      	str	r3, [r7, #44]	@ 0x2c

    t.X[0] = *RK++ ^ \
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	1d1a      	adds	r2, r3, #4
 800246c:	633a      	str	r2, [r7, #48]	@ 0x30
 800246e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	4611      	mov	r1, r2
 8002476:	4a79      	ldr	r2, [pc, #484]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 8002478:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 800247a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 800247c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4619      	mov	r1, r3
 8002484:	4b75      	ldr	r3, [pc, #468]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 8002486:	5c5b      	ldrb	r3, [r3, r1]
 8002488:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 800248a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 800248c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	b2db      	uxtb	r3, r3
 8002492:	4619      	mov	r1, r3
 8002494:	4b71      	ldr	r3, [pc, #452]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 8002496:	5c5b      	ldrb	r3, [r3, r1]
 8002498:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 800249a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	0e1b      	lsrs	r3, r3, #24
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	4619      	mov	r1, r3
 80024a4:	4b6d      	ldr	r3, [pc, #436]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 80024a6:	5c5b      	ldrb	r3, [r3, r1]
 80024a8:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 80024aa:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 80024ac:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 80024ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b0:	1d1a      	adds	r2, r3, #4
 80024b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80024b4:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 80024b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	4611      	mov	r1, r2
 80024bc:	4a67      	ldr	r2, [pc, #412]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 80024be:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 80024c0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4619      	mov	r1, r3
 80024ca:	4b64      	ldr	r3, [pc, #400]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 80024cc:	5c5b      	ldrb	r3, [r3, r1]
 80024ce:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 80024d0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 80024d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4619      	mov	r1, r3
 80024da:	4b60      	ldr	r3, [pc, #384]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 80024dc:	5c5b      	ldrb	r3, [r3, r1]
 80024de:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 80024e0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 80024e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e4:	0e1b      	lsrs	r3, r3, #24
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	4619      	mov	r1, r3
 80024ea:	4b5c      	ldr	r3, [pc, #368]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 80024ec:	5c5b      	ldrb	r3, [r3, r1]
 80024ee:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 80024f0:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 80024f2:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 80024f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f6:	1d1a      	adds	r2, r3, #4
 80024f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80024fa:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 80024fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	4611      	mov	r1, r2
 8002502:	4a56      	ldr	r2, [pc, #344]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 8002504:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8002506:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	b2db      	uxtb	r3, r3
 800250e:	4619      	mov	r1, r3
 8002510:	4b52      	ldr	r3, [pc, #328]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 8002512:	5c5b      	ldrb	r3, [r3, r1]
 8002514:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8002516:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	4b4e      	ldr	r3, [pc, #312]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 8002522:	5c5b      	ldrb	r3, [r3, r1]
 8002524:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8002526:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 8002528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252a:	0e1b      	lsrs	r3, r3, #24
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4619      	mov	r1, r3
 8002530:	4b4a      	ldr	r3, [pc, #296]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 8002532:	5c5b      	ldrb	r3, [r3, r1]
 8002534:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8002536:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8002538:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 800253a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253c:	1d1a      	adds	r2, r3, #4
 800253e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002540:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8002542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	4611      	mov	r1, r2
 8002548:	4a44      	ldr	r2, [pc, #272]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 800254a:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 800254c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 800254e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4619      	mov	r1, r3
 8002556:	4b41      	ldr	r3, [pc, #260]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 8002558:	5c5b      	ldrb	r3, [r3, r1]
 800255a:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 800255c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	0c1b      	lsrs	r3, r3, #16
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	4b3d      	ldr	r3, [pc, #244]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 8002568:	5c5b      	ldrb	r3, [r3, r1]
 800256a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 800256c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	0e1b      	lsrs	r3, r3, #24
 8002572:	b2db      	uxtb	r3, r3
 8002574:	4619      	mov	r1, r3
 8002576:	4b39      	ldr	r3, [pc, #228]	@ (800265c <mbedtls_internal_aes_decrypt+0x668>)
 8002578:	5c5b      	ldrb	r3, [r3, r1]
 800257a:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 800257c:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 800257e:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	0a1a      	lsrs	r2, r3, #8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3301      	adds	r3, #1
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	0c1a      	lsrs	r2, r3, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3302      	adds	r3, #2
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	0e1a      	lsrs	r2, r3, #24
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3303      	adds	r3, #3
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	0a1a      	lsrs	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3305      	adds	r3, #5
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	0c1a      	lsrs	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3306      	adds	r3, #6
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	0e1a      	lsrs	r2, r3, #24
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3307      	adds	r3, #7
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3308      	adds	r3, #8
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	0a1a      	lsrs	r2, r3, #8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3309      	adds	r3, #9
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	0c1a      	lsrs	r2, r3, #16
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	330a      	adds	r3, #10
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	0e1a      	lsrs	r2, r3, #24
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	330b      	adds	r3, #11
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	330c      	adds	r3, #12
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	0a1a      	lsrs	r2, r3, #8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	330d      	adds	r3, #13
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	0c1a      	lsrs	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	330e      	adds	r3, #14
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	0e1a      	lsrs	r2, r3, #24
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	330f      	adds	r3, #15
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8002636:	f107 0310 	add.w	r3, r7, #16
 800263a:	2120      	movs	r1, #32
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fc53 	bl	8002ee8 <mbedtls_platform_zeroize>

    return( 0 );
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3738      	adds	r7, #56	@ 0x38
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20003fb8 	.word	0x20003fb8
 8002650:	200033b8 	.word	0x200033b8
 8002654:	200037b8 	.word	0x200037b8
 8002658:	20003bb8 	.word	0x20003bb8
 800265c:	200032b8 	.word	0x200032b8

08002660 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d106      	bne.n	8002682 <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff f985 	bl	8001988 <mbedtls_internal_aes_encrypt>
 800267e:	4603      	mov	r3, r0
 8002680:	e005      	b.n	800268e <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f7ff fcb4 	bl	8001ff4 <mbedtls_internal_aes_decrypt>
 800268c:	4603      	mov	r3, r0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <mbedtls_des_init>:
    {                                                   \
        uint32_t t = (a); (a) = (b); (b) = t; t = 0;    \
    } while( 0 )

void mbedtls_des_init( mbedtls_des_context *ctx )
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_des_context ) );
 800269e:	2280      	movs	r2, #128	@ 0x80
 80026a0:	2100      	movs	r1, #0
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f002 f9c0 	bl	8004a28 <memset>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <mbedtls_des_setkey>:
    return( 0 );
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey( uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t X, Y, T;

    X = MBEDTLS_GET_UINT32_BE( key, 0 );
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	061a      	lsls	r2, r3, #24
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	3301      	adds	r3, #1
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	041b      	lsls	r3, r3, #16
 80026c8:	431a      	orrs	r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	3302      	adds	r3, #2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	4313      	orrs	r3, r2
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	3203      	adds	r2, #3
 80026d8:	7812      	ldrb	r2, [r2, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
    Y = MBEDTLS_GET_UINT32_BE( key, 4 );
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	3304      	adds	r3, #4
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	061a      	lsls	r2, r3, #24
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	3305      	adds	r3, #5
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	431a      	orrs	r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	3306      	adds	r3, #6
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	4313      	orrs	r3, r2
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	3207      	adds	r2, #7
 80026fe:	7812      	ldrb	r2, [r2, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]

    /*
     * Permuted Choice 1
     */
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	091a      	lsrs	r2, r3, #4
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4053      	eors	r3, r2
 800270c:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4053      	eors	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4053      	eors	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
    T =  ((Y      ) ^ X) & 0x10101010;  X ^= T; Y ^= (T      );
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4053      	eors	r3, r2
 800272a:	f003 3310 	and.w	r3, r3, #269488144	@ 0x10101010
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4053      	eors	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4053      	eors	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	4a55      	ldr	r2, [pc, #340]	@ (800289c <mbedtls_des_setkey+0x1ec>)
 8002748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274c:	00da      	lsls	r2, r3, #3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	4951      	ldr	r1, [pc, #324]	@ (800289c <mbedtls_des_setkey+0x1ec>)
 8002758:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	431a      	orrs	r2, r3
        | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	494c      	ldr	r1, [pc, #304]	@ (800289c <mbedtls_des_setkey+0x1ec>)
 800276a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	431a      	orrs	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	0e1b      	lsrs	r3, r3, #24
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	4948      	ldr	r1, [pc, #288]	@ (800289c <mbedtls_des_setkey+0x1ec>)
 800277c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002780:	431a      	orrs	r2, r3
        | (LHs[ (X >>  5) & 0xF] << 7) | (LHs[ (X >> 13) & 0xF ] << 6)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	4944      	ldr	r1, [pc, #272]	@ (800289c <mbedtls_des_setkey+0x1ec>)
 800278c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002790:	01db      	lsls	r3, r3, #7
 8002792:	431a      	orrs	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	0b5b      	lsrs	r3, r3, #13
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	493f      	ldr	r1, [pc, #252]	@ (800289c <mbedtls_des_setkey+0x1ec>)
 800279e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027a2:	019b      	lsls	r3, r3, #6
 80027a4:	431a      	orrs	r2, r3
        | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	493b      	ldr	r1, [pc, #236]	@ (800289c <mbedtls_des_setkey+0x1ec>)
 80027b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027b4:	015b      	lsls	r3, r3, #5
 80027b6:	431a      	orrs	r2, r3
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	0f5b      	lsrs	r3, r3, #29
 80027bc:	4937      	ldr	r1, [pc, #220]	@ (800289c <mbedtls_des_setkey+0x1ec>)
 80027be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027c2:	011b      	lsls	r3, r3, #4
    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]

    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	4a33      	ldr	r2, [pc, #204]	@ (80028a0 <mbedtls_des_setkey+0x1f0>)
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	00da      	lsls	r2, r3, #3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	0a5b      	lsrs	r3, r3, #9
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	492f      	ldr	r1, [pc, #188]	@ (80028a0 <mbedtls_des_setkey+0x1f0>)
 80027e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0c5b      	lsrs	r3, r3, #17
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	492b      	ldr	r1, [pc, #172]	@ (80028a0 <mbedtls_des_setkey+0x1f0>)
 80027f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	431a      	orrs	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	0e5b      	lsrs	r3, r3, #25
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	4926      	ldr	r1, [pc, #152]	@ (80028a0 <mbedtls_des_setkey+0x1f0>)
 8002806:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800280a:	431a      	orrs	r2, r3
        | (RHs[ (Y >>  4) & 0xF] << 7) | (RHs[ (Y >> 12) & 0xF ] << 6)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	4922      	ldr	r1, [pc, #136]	@ (80028a0 <mbedtls_des_setkey+0x1f0>)
 8002816:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800281a:	01db      	lsls	r3, r3, #7
 800281c:	431a      	orrs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	0b1b      	lsrs	r3, r3, #12
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	491e      	ldr	r1, [pc, #120]	@ (80028a0 <mbedtls_des_setkey+0x1f0>)
 8002828:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800282c:	019b      	lsls	r3, r3, #6
 800282e:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	0d1b      	lsrs	r3, r3, #20
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	4919      	ldr	r1, [pc, #100]	@ (80028a0 <mbedtls_des_setkey+0x1f0>)
 800283a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800283e:	015b      	lsls	r3, r3, #5
 8002840:	431a      	orrs	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	0f1b      	lsrs	r3, r3, #28
 8002846:	4916      	ldr	r1, [pc, #88]	@ (80028a0 <mbedtls_des_setkey+0x1f0>)
 8002848:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800284c:	011b      	lsls	r3, r3, #4
    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

    X &= 0x0FFFFFFF;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002858:	613b      	str	r3, [r7, #16]
    Y &= 0x0FFFFFFF;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002860:	60fb      	str	r3, [r7, #12]

    /*
     * calculate subkeys
     */
    for( i = 0; i < 16; i++ )
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	e113      	b.n	8002a90 <mbedtls_des_setkey+0x3e0>
    {
        if( i < 2 || i == 8 || i == 15 )
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b01      	cmp	r3, #1
 800286c:	dd05      	ble.n	800287a <mbedtls_des_setkey+0x1ca>
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d002      	beq.n	800287a <mbedtls_des_setkey+0x1ca>
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b0f      	cmp	r3, #15
 8002878:	d114      	bne.n	80028a4 <mbedtls_des_setkey+0x1f4>
        {
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	005a      	lsls	r2, r3, #1
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	0edb      	lsrs	r3, r3, #27
 8002882:	4313      	orrs	r3, r2
 8002884:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002888:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	005a      	lsls	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	0edb      	lsrs	r3, r3, #27
 8002892:	4313      	orrs	r3, r2
 8002894:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	e013      	b.n	80028c4 <mbedtls_des_setkey+0x214>
 800289c:	080052b0 	.word	0x080052b0
 80028a0:	080052f0 	.word	0x080052f0
        }
        else
        {
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	009a      	lsls	r2, r3, #2
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	0e9b      	lsrs	r3, r3, #26
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80028b2:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	009a      	lsls	r2, r3, #2
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	0e9b      	lsrs	r3, r3, #26
 80028bc:	4313      	orrs	r3, r2
 80028be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80028c2:	60fb      	str	r3, [r7, #12]
        }

        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	f003 5210 	and.w	r2, r3, #603979776	@ 0x24000000
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	071b      	lsls	r3, r3, #28
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d4:	431a      	orrs	r2, r3
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	039b      	lsls	r3, r3, #14
 80028da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028de:	431a      	orrs	r2, r3
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	049b      	lsls	r3, r3, #18
 80028e4:	f003 7302 	and.w	r3, r3, #34078720	@ 0x2080000
 80028e8:	431a      	orrs	r2, r3
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028f2:	431a      	orrs	r2, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	025b      	lsls	r3, r3, #9
 80028f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028fc:	431a      	orrs	r2, r3
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002906:	431a      	orrs	r2, r3
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	029b      	lsls	r3, r3, #10
 800290c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002910:	431a      	orrs	r2, r3
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	431a      	orrs	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	0a9b      	lsrs	r3, r3, #10
 8002920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002924:	431a      	orrs	r2, r3
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	0b5b      	lsrs	r3, r3, #13
 800292a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800292e:	431a      	orrs	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002938:	431a      	orrs	r2, r3
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	019b      	lsls	r3, r3, #6
 800293e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002942:	431a      	orrs	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294c:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	0b9b      	lsrs	r3, r3, #14
 8002952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002956:	431a      	orrs	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295e:	431a      	orrs	r2, r3
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	431a      	orrs	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	0a9b      	lsrs	r3, r3, #10
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	431a      	orrs	r2, r3
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	08db      	lsrs	r3, r3, #3
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	431a      	orrs	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	0c9b      	lsrs	r3, r3, #18
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	431a      	orrs	r2, r3
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	0e9b      	lsrs	r3, r3, #26
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	ea42 0103 	orr.w	r1, r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	0e1b      	lsrs	r3, r3, #24
 8002998:	f003 0201 	and.w	r2, r3, #1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	1d18      	adds	r0, r3, #4
 80029a0:	6078      	str	r0, [r7, #4]
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 80029a2:	430a      	orrs	r2, r1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 80029a4:	601a      	str	r2, [r3, #0]

        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	03db      	lsls	r3, r3, #15
 80029aa:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	045b      	lsls	r3, r3, #17
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	431a      	orrs	r2, r3
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029c0:	431a      	orrs	r2, r3
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	059b      	lsls	r3, r3, #22
 80029c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029ca:	431a      	orrs	r2, r3
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	431a      	orrs	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029de:	431a      	orrs	r2, r3
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	041b      	lsls	r3, r3, #16
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e8:	431a      	orrs	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	02db      	lsls	r3, r3, #11
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029f2:	431a      	orrs	r2, r3
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029fc:	431a      	orrs	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a06:	431a      	orrs	r2, r3
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	03db      	lsls	r3, r3, #15
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a10:	431a      	orrs	r2, r3
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1a:	431a      	orrs	r2, r3
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a2e:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	0b99      	lsrs	r1, r3, #14
 8002a34:	f640 0308 	movw	r3, #2056	@ 0x808
 8002a38:	400b      	ands	r3, r1
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0a5b      	lsrs	r3, r3, #9
 8002a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a44:	431a      	orrs	r2, r3
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	01db      	lsls	r3, r3, #7
 8002a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a56:	431a      	orrs	r2, r3
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	09db      	lsrs	r3, r3, #7
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	431a      	orrs	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	f003 0311 	and.w	r3, r3, #17
 8002a6a:	431a      	orrs	r2, r3
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	ea42 0103 	orr.w	r1, r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	0d5b      	lsrs	r3, r3, #21
 8002a7c:	f003 0202 	and.w	r2, r3, #2
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	1d18      	adds	r0, r3, #4
 8002a84:	6078      	str	r0, [r7, #4]
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 8002a86:	430a      	orrs	r2, r1
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8002a88:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i++ )
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b0f      	cmp	r3, #15
 8002a94:	f77f aee8 	ble.w	8002868 <mbedtls_des_setkey+0x1b8>
    }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <mbedtls_des_setkey_enc>:

/*
 * DES key schedule (56-bit, encryption)
 */
int mbedtls_des_setkey_enc( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
    mbedtls_des_setkey( ctx->sk, key );
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6839      	ldr	r1, [r7, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fdfc 	bl	80026b0 <mbedtls_des_setkey>

    return( 0 );
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <mbedtls_des_setkey_dec>:

/*
 * DES key schedule (56-bit, decryption)
 */
int mbedtls_des_setkey_dec( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
    int i;

    mbedtls_des_setkey( ctx->sk, key );
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6839      	ldr	r1, [r7, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fded 	bl	80026b0 <mbedtls_des_setkey>

    for( i = 0; i < 16; i += 2 )
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	e034      	b.n	8002b46 <mbedtls_des_setkey_dec+0x84>
    {
        SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f1c3 021e 	rsb	r2, r3, #30
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f1c3 021e 	rsb	r2, r3, #30
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6939      	ldr	r1, [r7, #16]
 8002b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
        SWAP( ctx->sk[i + 1], ctx->sk[31 - i] );
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f1c3 011f 	rsb	r1, r3, #31
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f1c3 021f 	rsb	r2, r3, #31
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68f9      	ldr	r1, [r7, #12]
 8002b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
    for( i = 0; i < 16; i += 2 )
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3302      	adds	r3, #2
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b0f      	cmp	r3, #15
 8002b4a:	ddc7      	ble.n	8002adc <mbedtls_des_setkey_dec+0x1a>
    }

    return( 0 );
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <mbedtls_des_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)
int mbedtls_des_crypt_ecb( mbedtls_des_context *ctx,
                    const unsigned char input[8],
                    unsigned char output[8] )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b08b      	sub	sp, #44	@ 0x2c
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	61bb      	str	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE( input, 0 );
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	061a      	lsls	r2, r3, #24
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	3301      	adds	r3, #1
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	4313      	orrs	r3, r2
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	3203      	adds	r2, #3
 8002b86:	7812      	ldrb	r2, [r2, #0]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	623b      	str	r3, [r7, #32]
    Y = MBEDTLS_GET_UINT32_BE( input, 4 );
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	061a      	lsls	r2, r3, #24
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	3305      	adds	r3, #5
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3306      	adds	r3, #6
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	3207      	adds	r2, #7
 8002bac:	7812      	ldrb	r2, [r2, #0]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61fb      	str	r3, [r7, #28]

    DES_IP( X, Y );
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	091a      	lsrs	r2, r3, #4
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	4053      	eors	r3, r2
 8002bba:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	4053      	eors	r3, r2
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	6a3a      	ldr	r2, [r7, #32]
 8002bce:	4053      	eors	r3, r2
 8002bd0:	623b      	str	r3, [r7, #32]
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	0c1a      	lsrs	r2, r3, #16
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	4053      	eors	r3, r2
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	4053      	eors	r3, r2
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	6a3a      	ldr	r2, [r7, #32]
 8002bec:	4053      	eors	r3, r2
 8002bee:	623b      	str	r3, [r7, #32]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	089a      	lsrs	r2, r3, #2
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	4053      	eors	r3, r2
 8002bf8:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	6a3a      	ldr	r2, [r7, #32]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	4053      	eors	r3, r2
 8002c04:	623b      	str	r3, [r7, #32]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	4053      	eors	r3, r2
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	0a1a      	lsrs	r2, r3, #8
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	4053      	eors	r3, r2
 8002c18:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	6a3a      	ldr	r2, [r7, #32]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	4053      	eors	r3, r2
 8002c24:	623b      	str	r3, [r7, #32]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	4053      	eors	r3, r2
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	4053      	eors	r3, r2
 8002c3e:	f003 33aa 	and.w	r3, r3, #2863311530	@ 0xaaaaaaaa
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	4053      	eors	r3, r2
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	6a3a      	ldr	r2, [r7, #32]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	4053      	eors	r3, r2
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002c5a:	623b      	str	r3, [r7, #32]

    for( i = 0; i < 8; i++ )
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c60:	e0a6      	b.n	8002db0 <mbedtls_des_crypt_ecb+0x258>
    {
        DES_ROUND( Y, X );
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	1d1a      	adds	r2, r3, #4
 8002c66:	61ba      	str	r2, [r7, #24]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	4053      	eors	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c76:	4a94      	ldr	r2, [pc, #592]	@ (8002ec8 <mbedtls_des_crypt_ecb+0x370>)
 8002c78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c84:	4991      	ldr	r1, [pc, #580]	@ (8002ecc <mbedtls_des_crypt_ecb+0x374>)
 8002c86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c8a:	405a      	eors	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c94:	498e      	ldr	r1, [pc, #568]	@ (8002ed0 <mbedtls_des_crypt_ecb+0x378>)
 8002c96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c9a:	405a      	eors	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	0e1b      	lsrs	r3, r3, #24
 8002ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ca4:	498b      	ldr	r1, [pc, #556]	@ (8002ed4 <mbedtls_des_crypt_ecb+0x37c>)
 8002ca6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002caa:	4053      	eors	r3, r2
 8002cac:	6a3a      	ldr	r2, [r7, #32]
 8002cae:	4053      	eors	r3, r2
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	1d1a      	adds	r2, r3, #4
 8002cb6:	61ba      	str	r2, [r7, #24]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	ea4f 1333 	mov.w	r3, r3, ror #4
 8002cc0:	4053      	eors	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cca:	4a83      	ldr	r2, [pc, #524]	@ (8002ed8 <mbedtls_des_crypt_ecb+0x380>)
 8002ccc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd8:	4980      	ldr	r1, [pc, #512]	@ (8002edc <mbedtls_des_crypt_ecb+0x384>)
 8002cda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cde:	405a      	eors	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ce8:	497d      	ldr	r1, [pc, #500]	@ (8002ee0 <mbedtls_des_crypt_ecb+0x388>)
 8002cea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cee:	405a      	eors	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	0e1b      	lsrs	r3, r3, #24
 8002cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cf8:	497a      	ldr	r1, [pc, #488]	@ (8002ee4 <mbedtls_des_crypt_ecb+0x38c>)
 8002cfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cfe:	4053      	eors	r3, r2
 8002d00:	6a3a      	ldr	r2, [r7, #32]
 8002d02:	4053      	eors	r3, r2
 8002d04:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	1d1a      	adds	r2, r3, #4
 8002d0a:	61ba      	str	r2, [r7, #24]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a3a      	ldr	r2, [r7, #32]
 8002d10:	4053      	eors	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d1a:	4a6b      	ldr	r2, [pc, #428]	@ (8002ec8 <mbedtls_des_crypt_ecb+0x370>)
 8002d1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d28:	4968      	ldr	r1, [pc, #416]	@ (8002ecc <mbedtls_des_crypt_ecb+0x374>)
 8002d2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d2e:	405a      	eors	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	0c1b      	lsrs	r3, r3, #16
 8002d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d38:	4965      	ldr	r1, [pc, #404]	@ (8002ed0 <mbedtls_des_crypt_ecb+0x378>)
 8002d3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d3e:	405a      	eors	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	0e1b      	lsrs	r3, r3, #24
 8002d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d48:	4962      	ldr	r1, [pc, #392]	@ (8002ed4 <mbedtls_des_crypt_ecb+0x37c>)
 8002d4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d4e:	4053      	eors	r3, r2
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	4053      	eors	r3, r2
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	1d1a      	adds	r2, r3, #4
 8002d5a:	61ba      	str	r2, [r7, #24]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	ea4f 1333 	mov.w	r3, r3, ror #4
 8002d64:	4053      	eors	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d6e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed8 <mbedtls_des_crypt_ecb+0x380>)
 8002d70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d7c:	4957      	ldr	r1, [pc, #348]	@ (8002edc <mbedtls_des_crypt_ecb+0x384>)
 8002d7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d82:	405a      	eors	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	0c1b      	lsrs	r3, r3, #16
 8002d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d8c:	4954      	ldr	r1, [pc, #336]	@ (8002ee0 <mbedtls_des_crypt_ecb+0x388>)
 8002d8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d92:	405a      	eors	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	0e1b      	lsrs	r3, r3, #24
 8002d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d9c:	4951      	ldr	r1, [pc, #324]	@ (8002ee4 <mbedtls_des_crypt_ecb+0x38c>)
 8002d9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002da2:	4053      	eors	r3, r2
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	4053      	eors	r3, r2
 8002da8:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	3301      	adds	r3, #1
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	2b07      	cmp	r3, #7
 8002db4:	f77f af55 	ble.w	8002c62 <mbedtls_des_crypt_ecb+0x10a>
    }

    DES_FP( Y, X );
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	ea4f 0373 	mov.w	r3, r3, ror #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	4053      	eors	r3, r2
 8002dc6:	f003 33aa 	and.w	r3, r3, #2863311530	@ 0xaaaaaaaa
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	4053      	eors	r3, r2
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	4053      	eors	r3, r2
 8002dda:	623b      	str	r3, [r7, #32]
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	ea4f 0373 	mov.w	r3, r3, ror #1
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	0a1a      	lsrs	r2, r3, #8
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	4053      	eors	r3, r2
 8002dec:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	4053      	eors	r3, r2
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	6a3a      	ldr	r2, [r7, #32]
 8002e00:	4053      	eors	r3, r2
 8002e02:	623b      	str	r3, [r7, #32]
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	089a      	lsrs	r2, r3, #2
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4053      	eors	r3, r2
 8002e0c:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	4053      	eors	r3, r2
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	6a3a      	ldr	r2, [r7, #32]
 8002e20:	4053      	eors	r3, r2
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	0c1a      	lsrs	r2, r3, #16
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	4053      	eors	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	6a3a      	ldr	r2, [r7, #32]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	4053      	eors	r3, r2
 8002e36:	623b      	str	r3, [r7, #32]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	4053      	eors	r3, r2
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	091a      	lsrs	r2, r3, #4
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	4053      	eors	r3, r2
 8002e4a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	6a3a      	ldr	r2, [r7, #32]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4053      	eors	r3, r2
 8002e56:	623b      	str	r3, [r7, #32]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	4053      	eors	r3, r2
 8002e60:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_BE( Y, output, 0 );
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	0e1b      	lsrs	r3, r3, #24
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	0c1a      	lsrs	r2, r3, #16
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3301      	adds	r3, #1
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	0a1a      	lsrs	r2, r3, #8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3302      	adds	r3, #2
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3303      	adds	r3, #3
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_BE( X, output, 4 );
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	0e1a      	lsrs	r2, r3, #24
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3304      	adds	r3, #4
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	0c1a      	lsrs	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3305      	adds	r3, #5
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	0a1a      	lsrs	r2, r3, #8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3306      	adds	r3, #6
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3307      	adds	r3, #7
 8002eb6:	6a3a      	ldr	r2, [r7, #32]
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	372c      	adds	r7, #44	@ 0x2c
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	080051b0 	.word	0x080051b0
 8002ecc:	08004fb0 	.word	0x08004fb0
 8002ed0:	08004db0 	.word	0x08004db0
 8002ed4:	08004bb0 	.word	0x08004bb0
 8002ed8:	080050b0 	.word	0x080050b0
 8002edc:	08004eb0 	.word	0x08004eb0
 8002ee0:	08004cb0 	.word	0x08004cb0
 8002ee4:	08004ab0 	.word	0x08004ab0

08002ee8 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <mbedtls_platform_zeroize+0x1c>
        memset_func( buf, 0, len );
 8002ef8:	4b04      	ldr	r3, [pc, #16]	@ (8002f0c <mbedtls_platform_zeroize+0x24>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	2100      	movs	r1, #0
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000028 	.word	0x20000028

08002f10 <User_Init>:

mbedtls_aes_context aes_ctx;
mbedtls_des_context des_ctx;
int key_length = 128;

void User_Init() {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	mbedtls_aes_init(&aes_ctx);
 8002f14:	4803      	ldr	r0, [pc, #12]	@ (8002f24 <User_Init+0x14>)
 8002f16:	f7fe f9ed 	bl	80012f4 <mbedtls_aes_init>
	mbedtls_des_init(&des_ctx);
 8002f1a:	4803      	ldr	r0, [pc, #12]	@ (8002f28 <User_Init+0x18>)
 8002f1c:	f7ff fbbb 	bl	8002696 <mbedtls_des_init>
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	200043e4 	.word	0x200043e4
 8002f28:	200044fc 	.word	0x200044fc

08002f2c <AES_SetEncryptionKey>:

NutStatus_e AES_SetEncryptionKey(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
	*result_length = 0;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
	if (mbedtls_aes_setkey_enc(&aes_ctx, received_data_ptr, key_length))
 8002f40:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <AES_SetEncryptionKey+0x38>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	68f9      	ldr	r1, [r7, #12]
 8002f48:	4807      	ldr	r0, [pc, #28]	@ (8002f68 <AES_SetEncryptionKey+0x3c>)
 8002f4a:	f7fe f9f3 	bl	8001334 <mbedtls_aes_setkey_enc>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <AES_SetEncryptionKey+0x2c>
		return NUT_ERROR;
 8002f54:	2302      	movs	r3, #2
 8002f56:	e000      	b.n	8002f5a <AES_SetEncryptionKey+0x2e>
	return NUT_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	2000002c 	.word	0x2000002c
 8002f68:	200043e4 	.word	0x200043e4

08002f6c <AES_SetDecryptionKey>:

NutStatus_e AES_SetDecryptionKey(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
	*result_length = 0;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
	if (mbedtls_aes_setkey_dec(&aes_ctx, received_data_ptr, key_length))
 8002f80:	4b08      	ldr	r3, [pc, #32]	@ (8002fa4 <AES_SetDecryptionKey+0x38>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	4807      	ldr	r0, [pc, #28]	@ (8002fa8 <AES_SetDecryptionKey+0x3c>)
 8002f8a:	f7fe fbc7 	bl	800171c <mbedtls_aes_setkey_dec>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <AES_SetDecryptionKey+0x2c>
		return NUT_ERROR;
 8002f94:	2302      	movs	r3, #2
 8002f96:	e000      	b.n	8002f9a <AES_SetDecryptionKey+0x2e>
	return NUT_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000002c 	.word	0x2000002c
 8002fa8:	200043e4 	.word	0x200043e4

08002fac <AES_Encrypt>:

NutStatus_e AES_Encrypt(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
	*result_length = 16;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	601a      	str	r2, [r3, #0]
	vNut_Quiet();
 8002fc0:	f7fd fca6 	bl	8000910 <vNut_Quiet>
	vNut_LED(1);
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	f7fd fccb 	bl	8000960 <vNut_LED>
	vNut_IO_USER(1);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7fd fcf6 	bl	80009bc <vNut_IO_USER>
	vNut_IO_1(1);
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f7fd fcdd 	bl	8000990 <vNut_IO_1>
	if (mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_ENCRYPT, received_data_ptr, result_buffer_ptr))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	2101      	movs	r1, #1
 8002fdc:	480b      	ldr	r0, [pc, #44]	@ (800300c <AES_Encrypt+0x60>)
 8002fde:	f7ff fb3f 	bl	8002660 <mbedtls_aes_crypt_ecb>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <AES_Encrypt+0x40>
		return NUT_ERROR;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e00b      	b.n	8003004 <AES_Encrypt+0x58>
	vNut_IO_1(0);
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7fd fccf 	bl	8000990 <vNut_IO_1>
	vNut_IO_USER(0);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7fd fce2 	bl	80009bc <vNut_IO_USER>
	vNut_LED(0);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7fd fcb1 	bl	8000960 <vNut_LED>
	vNut_unQuiet();
 8002ffe:	f7fd fc9b 	bl	8000938 <vNut_unQuiet>
	return NUT_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	200043e4 	.word	0x200043e4

08003010 <AES_Decrypt>:

NutStatus_e AES_Decrypt(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
	*result_length = 16;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2210      	movs	r2, #16
 8003022:	601a      	str	r2, [r3, #0]
	vNut_Quiet();
 8003024:	f7fd fc74 	bl	8000910 <vNut_Quiet>
	vNut_LED(1);
 8003028:	2001      	movs	r0, #1
 800302a:	f7fd fc99 	bl	8000960 <vNut_LED>
	vNut_IO_USER(1);
 800302e:	2001      	movs	r0, #1
 8003030:	f7fd fcc4 	bl	80009bc <vNut_IO_USER>
	vNut_IO_1(1);
 8003034:	2001      	movs	r0, #1
 8003036:	f7fd fcab 	bl	8000990 <vNut_IO_1>
	if (mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_DECRYPT, received_data_ptr, result_buffer_ptr))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	2100      	movs	r1, #0
 8003040:	480b      	ldr	r0, [pc, #44]	@ (8003070 <AES_Decrypt+0x60>)
 8003042:	f7ff fb0d 	bl	8002660 <mbedtls_aes_crypt_ecb>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <AES_Decrypt+0x40>
		return NUT_ERROR;
 800304c:	2302      	movs	r3, #2
 800304e:	e00b      	b.n	8003068 <AES_Decrypt+0x58>
	vNut_IO_1(0);
 8003050:	2000      	movs	r0, #0
 8003052:	f7fd fc9d 	bl	8000990 <vNut_IO_1>
	vNut_IO_USER(0);
 8003056:	2000      	movs	r0, #0
 8003058:	f7fd fcb0 	bl	80009bc <vNut_IO_USER>
	vNut_LED(0);
 800305c:	2000      	movs	r0, #0
 800305e:	f7fd fc7f 	bl	8000960 <vNut_LED>
	vNut_unQuiet();
 8003062:	f7fd fc69 	bl	8000938 <vNut_unQuiet>
	return NUT_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	200043e4 	.word	0x200043e4

08003074 <DES_SetEncryptionKey>:

NutStatus_e DES_SetEncryptionKey(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
	*result_length = 0;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
	if (mbedtls_des_setkey_enc(&des_ctx, received_data_ptr))
 8003088:	68f9      	ldr	r1, [r7, #12]
 800308a:	4806      	ldr	r0, [pc, #24]	@ (80030a4 <DES_SetEncryptionKey+0x30>)
 800308c:	f7ff fd0a 	bl	8002aa4 <mbedtls_des_setkey_enc>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <DES_SetEncryptionKey+0x26>
		return NUT_ERROR;
 8003096:	2302      	movs	r3, #2
 8003098:	e000      	b.n	800309c <DES_SetEncryptionKey+0x28>
	return NUT_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	200044fc 	.word	0x200044fc

080030a8 <DES_SetDecryptionKey>:

NutStatus_e DES_SetDecryptionKey(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
	*result_length = 0;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
	if (mbedtls_des_setkey_dec(&des_ctx, received_data_ptr))
 80030bc:	68f9      	ldr	r1, [r7, #12]
 80030be:	4806      	ldr	r0, [pc, #24]	@ (80030d8 <DES_SetDecryptionKey+0x30>)
 80030c0:	f7ff fcff 	bl	8002ac2 <mbedtls_des_setkey_dec>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <DES_SetDecryptionKey+0x26>
		return NUT_ERROR;
 80030ca:	2302      	movs	r3, #2
 80030cc:	e000      	b.n	80030d0 <DES_SetDecryptionKey+0x28>
	return NUT_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200044fc 	.word	0x200044fc

080030dc <DES_Encrypt>:

NutStatus_e DES_Encrypt(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
	*result_length = 8;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2208      	movs	r2, #8
 80030ee:	601a      	str	r2, [r3, #0]
	if (mbedtls_des_crypt_ecb(&des_ctx, received_data_ptr, result_buffer_ptr))
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	4806      	ldr	r0, [pc, #24]	@ (8003110 <DES_Encrypt+0x34>)
 80030f6:	f7ff fd2f 	bl	8002b58 <mbedtls_des_crypt_ecb>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <DES_Encrypt+0x28>
		return NUT_ERROR;
 8003100:	2302      	movs	r3, #2
 8003102:	e000      	b.n	8003106 <DES_Encrypt+0x2a>
	return NUT_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200044fc 	.word	0x200044fc

08003114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003118:	4b08      	ldr	r3, [pc, #32]	@ (800313c <HAL_Init+0x28>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a07      	ldr	r2, [pc, #28]	@ (800313c <HAL_Init+0x28>)
 800311e:	f043 0310 	orr.w	r3, r3, #16
 8003122:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003124:	2003      	movs	r0, #3
 8003126:	f000 fa03 	bl	8003530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800312a:	200f      	movs	r0, #15
 800312c:	f000 f808 	bl	8003140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003130:	f7fd fcea 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40022000 	.word	0x40022000

08003140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003148:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_InitTick+0x54>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b12      	ldr	r3, [pc, #72]	@ (8003198 <HAL_InitTick+0x58>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	4619      	mov	r1, r3
 8003152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003156:	fbb3 f3f1 	udiv	r3, r3, r1
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fa0d 	bl	800357e <HAL_SYSTICK_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e00e      	b.n	800318c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b0f      	cmp	r3, #15
 8003172:	d80a      	bhi.n	800318a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003174:	2200      	movs	r2, #0
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	f000 f9e3 	bl	8003546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003180:	4a06      	ldr	r2, [pc, #24]	@ (800319c <HAL_InitTick+0x5c>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e000      	b.n	800318c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20000024 	.word	0x20000024
 8003198:	20000060 	.word	0x20000060
 800319c:	2000005c 	.word	0x2000005c

080031a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a4:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <HAL_IncTick+0x1c>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <HAL_IncTick+0x20>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	4a03      	ldr	r2, [pc, #12]	@ (80031c0 <HAL_IncTick+0x20>)
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	20000060 	.word	0x20000060
 80031c0:	2000457c 	.word	0x2000457c

080031c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return uwTick;
 80031c8:	4b02      	ldr	r3, [pc, #8]	@ (80031d4 <HAL_GetTick+0x10>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	2000457c 	.word	0x2000457c

080031d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0ed      	b.n	80033c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd fcb8 	bl	8000b6c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800320c:	f7ff ffda 	bl	80031c4 <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003212:	e012      	b.n	800323a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003214:	f7ff ffd6 	bl	80031c4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b0a      	cmp	r3, #10
 8003220:	d90b      	bls.n	800323a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2205      	movs	r2, #5
 8003232:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0c5      	b.n	80033c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0e5      	beq.n	8003214 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0202 	bic.w	r2, r2, #2
 8003256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003258:	f7ff ffb4 	bl	80031c4 <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800325e:	e012      	b.n	8003286 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003260:	f7ff ffb0 	bl	80031c4 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b0a      	cmp	r3, #10
 800326c:	d90b      	bls.n	8003286 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2205      	movs	r2, #5
 800327e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e09f      	b.n	80033c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e5      	bne.n	8003260 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7e1b      	ldrb	r3, [r3, #24]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e007      	b.n	80032be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7e5b      	ldrb	r3, [r3, #25]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d108      	bne.n	80032d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e007      	b.n	80032e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7e9b      	ldrb	r3, [r3, #26]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d108      	bne.n	8003302 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0220 	orr.w	r2, r2, #32
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e007      	b.n	8003312 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0220 	bic.w	r2, r2, #32
 8003310:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	7edb      	ldrb	r3, [r3, #27]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d108      	bne.n	800332c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0210 	bic.w	r2, r2, #16
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e007      	b.n	800333c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0210 	orr.w	r2, r2, #16
 800333a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7f1b      	ldrb	r3, [r3, #28]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d108      	bne.n	8003356 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0208 	orr.w	r2, r2, #8
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e007      	b.n	8003366 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0208 	bic.w	r2, r2, #8
 8003364:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7f5b      	ldrb	r3, [r3, #29]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d108      	bne.n	8003380 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0204 	orr.w	r2, r2, #4
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e007      	b.n	8003390 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0204 	bic.w	r2, r2, #4
 800338e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	ea42 0103 	orr.w	r1, r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	1e5a      	subs	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003402:	4a04      	ldr	r2, [pc, #16]	@ (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	60d3      	str	r3, [r2, #12]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341c:	4b04      	ldr	r3, [pc, #16]	@ (8003430 <__NVIC_GetPriorityGrouping+0x18>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0307 	and.w	r3, r3, #7
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	2b00      	cmp	r3, #0
 8003446:	db0a      	blt.n	800345e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	490c      	ldr	r1, [pc, #48]	@ (8003480 <__NVIC_SetPriority+0x4c>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	440b      	add	r3, r1
 8003458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800345c:	e00a      	b.n	8003474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4908      	ldr	r1, [pc, #32]	@ (8003484 <__NVIC_SetPriority+0x50>)
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	3b04      	subs	r3, #4
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	440b      	add	r3, r1
 8003472:	761a      	strb	r2, [r3, #24]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	e000e100 	.word	0xe000e100
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	@ 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f1c3 0307 	rsb	r3, r3, #7
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf28      	it	cs
 80034a6:	2304      	movcs	r3, #4
 80034a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d902      	bls.n	80034b8 <NVIC_EncodePriority+0x30>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3b03      	subs	r3, #3
 80034b6:	e000      	b.n	80034ba <NVIC_EncodePriority+0x32>
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	401a      	ands	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d0:	f04f 31ff 	mov.w	r1, #4294967295
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43d9      	mvns	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	4313      	orrs	r3, r2
         );
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	@ 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034fc:	d301      	bcc.n	8003502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034fe:	2301      	movs	r3, #1
 8003500:	e00f      	b.n	8003522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003502:	4a0a      	ldr	r2, [pc, #40]	@ (800352c <SysTick_Config+0x40>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800350a:	210f      	movs	r1, #15
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	f7ff ff90 	bl	8003434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003514:	4b05      	ldr	r3, [pc, #20]	@ (800352c <SysTick_Config+0x40>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800351a:	4b04      	ldr	r3, [pc, #16]	@ (800352c <SysTick_Config+0x40>)
 800351c:	2207      	movs	r2, #7
 800351e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	e000e010 	.word	0xe000e010

08003530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ff49 	bl	80033d0 <__NVIC_SetPriorityGrouping>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003546:	b580      	push	{r7, lr}
 8003548:	b086      	sub	sp, #24
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003558:	f7ff ff5e 	bl	8003418 <__NVIC_GetPriorityGrouping>
 800355c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	6978      	ldr	r0, [r7, #20]
 8003564:	f7ff ff90 	bl	8003488 <NVIC_EncodePriority>
 8003568:	4602      	mov	r2, r0
 800356a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff5f 	bl	8003434 <__NVIC_SetPriority>
}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffb0 	bl	80034ec <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b08b      	sub	sp, #44	@ 0x2c
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035aa:	e169      	b.n	8003880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035ac:	2201      	movs	r2, #1
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	f040 8158 	bne.w	800387a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4a9a      	ldr	r2, [pc, #616]	@ (8003838 <HAL_GPIO_Init+0x2a0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d05e      	beq.n	8003692 <HAL_GPIO_Init+0xfa>
 80035d4:	4a98      	ldr	r2, [pc, #608]	@ (8003838 <HAL_GPIO_Init+0x2a0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d875      	bhi.n	80036c6 <HAL_GPIO_Init+0x12e>
 80035da:	4a98      	ldr	r2, [pc, #608]	@ (800383c <HAL_GPIO_Init+0x2a4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d058      	beq.n	8003692 <HAL_GPIO_Init+0xfa>
 80035e0:	4a96      	ldr	r2, [pc, #600]	@ (800383c <HAL_GPIO_Init+0x2a4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d86f      	bhi.n	80036c6 <HAL_GPIO_Init+0x12e>
 80035e6:	4a96      	ldr	r2, [pc, #600]	@ (8003840 <HAL_GPIO_Init+0x2a8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d052      	beq.n	8003692 <HAL_GPIO_Init+0xfa>
 80035ec:	4a94      	ldr	r2, [pc, #592]	@ (8003840 <HAL_GPIO_Init+0x2a8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d869      	bhi.n	80036c6 <HAL_GPIO_Init+0x12e>
 80035f2:	4a94      	ldr	r2, [pc, #592]	@ (8003844 <HAL_GPIO_Init+0x2ac>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d04c      	beq.n	8003692 <HAL_GPIO_Init+0xfa>
 80035f8:	4a92      	ldr	r2, [pc, #584]	@ (8003844 <HAL_GPIO_Init+0x2ac>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d863      	bhi.n	80036c6 <HAL_GPIO_Init+0x12e>
 80035fe:	4a92      	ldr	r2, [pc, #584]	@ (8003848 <HAL_GPIO_Init+0x2b0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d046      	beq.n	8003692 <HAL_GPIO_Init+0xfa>
 8003604:	4a90      	ldr	r2, [pc, #576]	@ (8003848 <HAL_GPIO_Init+0x2b0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d85d      	bhi.n	80036c6 <HAL_GPIO_Init+0x12e>
 800360a:	2b12      	cmp	r3, #18
 800360c:	d82a      	bhi.n	8003664 <HAL_GPIO_Init+0xcc>
 800360e:	2b12      	cmp	r3, #18
 8003610:	d859      	bhi.n	80036c6 <HAL_GPIO_Init+0x12e>
 8003612:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <HAL_GPIO_Init+0x80>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	08003693 	.word	0x08003693
 800361c:	0800366d 	.word	0x0800366d
 8003620:	0800367f 	.word	0x0800367f
 8003624:	080036c1 	.word	0x080036c1
 8003628:	080036c7 	.word	0x080036c7
 800362c:	080036c7 	.word	0x080036c7
 8003630:	080036c7 	.word	0x080036c7
 8003634:	080036c7 	.word	0x080036c7
 8003638:	080036c7 	.word	0x080036c7
 800363c:	080036c7 	.word	0x080036c7
 8003640:	080036c7 	.word	0x080036c7
 8003644:	080036c7 	.word	0x080036c7
 8003648:	080036c7 	.word	0x080036c7
 800364c:	080036c7 	.word	0x080036c7
 8003650:	080036c7 	.word	0x080036c7
 8003654:	080036c7 	.word	0x080036c7
 8003658:	080036c7 	.word	0x080036c7
 800365c:	08003675 	.word	0x08003675
 8003660:	08003689 	.word	0x08003689
 8003664:	4a79      	ldr	r2, [pc, #484]	@ (800384c <HAL_GPIO_Init+0x2b4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800366a:	e02c      	b.n	80036c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	623b      	str	r3, [r7, #32]
          break;
 8003672:	e029      	b.n	80036c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	3304      	adds	r3, #4
 800367a:	623b      	str	r3, [r7, #32]
          break;
 800367c:	e024      	b.n	80036c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	3308      	adds	r3, #8
 8003684:	623b      	str	r3, [r7, #32]
          break;
 8003686:	e01f      	b.n	80036c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	330c      	adds	r3, #12
 800368e:	623b      	str	r3, [r7, #32]
          break;
 8003690:	e01a      	b.n	80036c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800369a:	2304      	movs	r3, #4
 800369c:	623b      	str	r3, [r7, #32]
          break;
 800369e:	e013      	b.n	80036c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d105      	bne.n	80036b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036a8:	2308      	movs	r3, #8
 80036aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	611a      	str	r2, [r3, #16]
          break;
 80036b2:	e009      	b.n	80036c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036b4:	2308      	movs	r3, #8
 80036b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	615a      	str	r2, [r3, #20]
          break;
 80036be:	e003      	b.n	80036c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036c0:	2300      	movs	r3, #0
 80036c2:	623b      	str	r3, [r7, #32]
          break;
 80036c4:	e000      	b.n	80036c8 <HAL_GPIO_Init+0x130>
          break;
 80036c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2bff      	cmp	r3, #255	@ 0xff
 80036cc:	d801      	bhi.n	80036d2 <HAL_GPIO_Init+0x13a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	e001      	b.n	80036d6 <HAL_GPIO_Init+0x13e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3304      	adds	r3, #4
 80036d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2bff      	cmp	r3, #255	@ 0xff
 80036dc:	d802      	bhi.n	80036e4 <HAL_GPIO_Init+0x14c>
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	e002      	b.n	80036ea <HAL_GPIO_Init+0x152>
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	3b08      	subs	r3, #8
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	210f      	movs	r1, #15
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	fa01 f303 	lsl.w	r3, r1, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	401a      	ands	r2, r3
 80036fc:	6a39      	ldr	r1, [r7, #32]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	431a      	orrs	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80b1 	beq.w	800387a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003718:	4b4d      	ldr	r3, [pc, #308]	@ (8003850 <HAL_GPIO_Init+0x2b8>)
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	4a4c      	ldr	r2, [pc, #304]	@ (8003850 <HAL_GPIO_Init+0x2b8>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6193      	str	r3, [r2, #24]
 8003724:	4b4a      	ldr	r3, [pc, #296]	@ (8003850 <HAL_GPIO_Init+0x2b8>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003730:	4a48      	ldr	r2, [pc, #288]	@ (8003854 <HAL_GPIO_Init+0x2bc>)
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	3302      	adds	r3, #2
 8003738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	220f      	movs	r2, #15
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4013      	ands	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a40      	ldr	r2, [pc, #256]	@ (8003858 <HAL_GPIO_Init+0x2c0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d013      	beq.n	8003784 <HAL_GPIO_Init+0x1ec>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3f      	ldr	r2, [pc, #252]	@ (800385c <HAL_GPIO_Init+0x2c4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00d      	beq.n	8003780 <HAL_GPIO_Init+0x1e8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3e      	ldr	r2, [pc, #248]	@ (8003860 <HAL_GPIO_Init+0x2c8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <HAL_GPIO_Init+0x1e4>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a3d      	ldr	r2, [pc, #244]	@ (8003864 <HAL_GPIO_Init+0x2cc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d101      	bne.n	8003778 <HAL_GPIO_Init+0x1e0>
 8003774:	2303      	movs	r3, #3
 8003776:	e006      	b.n	8003786 <HAL_GPIO_Init+0x1ee>
 8003778:	2304      	movs	r3, #4
 800377a:	e004      	b.n	8003786 <HAL_GPIO_Init+0x1ee>
 800377c:	2302      	movs	r3, #2
 800377e:	e002      	b.n	8003786 <HAL_GPIO_Init+0x1ee>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_GPIO_Init+0x1ee>
 8003784:	2300      	movs	r3, #0
 8003786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003788:	f002 0203 	and.w	r2, r2, #3
 800378c:	0092      	lsls	r2, r2, #2
 800378e:	4093      	lsls	r3, r2
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003796:	492f      	ldr	r1, [pc, #188]	@ (8003854 <HAL_GPIO_Init+0x2bc>)
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d006      	beq.n	80037be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	492c      	ldr	r1, [pc, #176]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	608b      	str	r3, [r1, #8]
 80037bc:	e006      	b.n	80037cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037be:	4b2a      	ldr	r3, [pc, #168]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	4928      	ldr	r1, [pc, #160]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d006      	beq.n	80037e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037d8:	4b23      	ldr	r3, [pc, #140]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	4922      	ldr	r1, [pc, #136]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60cb      	str	r3, [r1, #12]
 80037e4:	e006      	b.n	80037f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037e6:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	491e      	ldr	r1, [pc, #120]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d006      	beq.n	800380e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003800:	4b19      	ldr	r3, [pc, #100]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	4918      	ldr	r1, [pc, #96]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
 800380c:	e006      	b.n	800381c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800380e:	4b16      	ldr	r3, [pc, #88]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	43db      	mvns	r3, r3
 8003816:	4914      	ldr	r1, [pc, #80]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 8003818:	4013      	ands	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d021      	beq.n	800386c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003828:	4b0f      	ldr	r3, [pc, #60]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	490e      	ldr	r1, [pc, #56]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
 8003834:	e021      	b.n	800387a <HAL_GPIO_Init+0x2e2>
 8003836:	bf00      	nop
 8003838:	10320000 	.word	0x10320000
 800383c:	10310000 	.word	0x10310000
 8003840:	10220000 	.word	0x10220000
 8003844:	10210000 	.word	0x10210000
 8003848:	10120000 	.word	0x10120000
 800384c:	10110000 	.word	0x10110000
 8003850:	40021000 	.word	0x40021000
 8003854:	40010000 	.word	0x40010000
 8003858:	40010800 	.word	0x40010800
 800385c:	40010c00 	.word	0x40010c00
 8003860:	40011000 	.word	0x40011000
 8003864:	40011400 	.word	0x40011400
 8003868:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <HAL_GPIO_Init+0x304>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	43db      	mvns	r3, r3
 8003874:	4909      	ldr	r1, [pc, #36]	@ (800389c <HAL_GPIO_Init+0x304>)
 8003876:	4013      	ands	r3, r2
 8003878:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	3301      	adds	r3, #1
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	f47f ae8e 	bne.w	80035ac <HAL_GPIO_Init+0x14>
  }
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	372c      	adds	r7, #44	@ 0x2c
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	40010400 	.word	0x40010400

080038a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
 80038bc:	e001      	b.n	80038c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038be:	2300      	movs	r3, #0
 80038c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	807b      	strh	r3, [r7, #2]
 80038da:	4613      	mov	r3, r2
 80038dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038de:	787b      	ldrb	r3, [r7, #1]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038e4:	887a      	ldrh	r2, [r7, #2]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038ea:	e003      	b.n	80038f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038ec:	887b      	ldrh	r3, [r7, #2]
 80038ee:	041a      	lsls	r2, r3, #16
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	611a      	str	r2, [r3, #16]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
	...

08003900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e12b      	b.n	8003b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd f96c 	bl	8000c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	@ 0x24
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003964:	f000 fcda 	bl	800431c <HAL_RCC_GetPCLK1Freq>
 8003968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4a81      	ldr	r2, [pc, #516]	@ (8003b74 <HAL_I2C_Init+0x274>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d807      	bhi.n	8003984 <HAL_I2C_Init+0x84>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a80      	ldr	r2, [pc, #512]	@ (8003b78 <HAL_I2C_Init+0x278>)
 8003978:	4293      	cmp	r3, r2
 800397a:	bf94      	ite	ls
 800397c:	2301      	movls	r3, #1
 800397e:	2300      	movhi	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e006      	b.n	8003992 <HAL_I2C_Init+0x92>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a7d      	ldr	r2, [pc, #500]	@ (8003b7c <HAL_I2C_Init+0x27c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	bf94      	ite	ls
 800398c:	2301      	movls	r3, #1
 800398e:	2300      	movhi	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0e7      	b.n	8003b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a78      	ldr	r2, [pc, #480]	@ (8003b80 <HAL_I2C_Init+0x280>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0c9b      	lsrs	r3, r3, #18
 80039a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003b74 <HAL_I2C_Init+0x274>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d802      	bhi.n	80039d4 <HAL_I2C_Init+0xd4>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3301      	adds	r3, #1
 80039d2:	e009      	b.n	80039e8 <HAL_I2C_Init+0xe8>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	4a69      	ldr	r2, [pc, #420]	@ (8003b84 <HAL_I2C_Init+0x284>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	3301      	adds	r3, #1
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	495c      	ldr	r1, [pc, #368]	@ (8003b74 <HAL_I2C_Init+0x274>)
 8003a04:	428b      	cmp	r3, r1
 8003a06:	d819      	bhi.n	8003a3c <HAL_I2C_Init+0x13c>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e59      	subs	r1, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a16:	1c59      	adds	r1, r3, #1
 8003a18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_I2C_Init+0x138>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1e59      	subs	r1, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	e051      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	e04f      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d111      	bne.n	8003a68 <HAL_I2C_Init+0x168>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1e58      	subs	r0, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	440b      	add	r3, r1
 8003a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a56:	3301      	adds	r3, #1
 8003a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e012      	b.n	8003a8e <HAL_I2C_Init+0x18e>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e58      	subs	r0, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	0099      	lsls	r1, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Init+0x196>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e022      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10e      	bne.n	8003abc <HAL_I2C_Init+0x1bc>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1e58      	subs	r0, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	440b      	add	r3, r1
 8003aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aba:	e00f      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	0099      	lsls	r1, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	6809      	ldr	r1, [r1, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69da      	ldr	r2, [r3, #28]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6911      	ldr	r1, [r2, #16]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	000186a0 	.word	0x000186a0
 8003b78:	001e847f 	.word	0x001e847f
 8003b7c:	003d08ff 	.word	0x003d08ff
 8003b80:	431bde83 	.word	0x431bde83
 8003b84:	10624dd3 	.word	0x10624dd3

08003b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e272      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8087 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ba8:	4b92      	ldr	r3, [pc, #584]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 030c 	and.w	r3, r3, #12
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d00c      	beq.n	8003bce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bb4:	4b8f      	ldr	r3, [pc, #572]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d112      	bne.n	8003be6 <HAL_RCC_OscConfig+0x5e>
 8003bc0:	4b8c      	ldr	r3, [pc, #560]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bcc:	d10b      	bne.n	8003be6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bce:	4b89      	ldr	r3, [pc, #548]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d06c      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x12c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d168      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e24c      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0x76>
 8003bf0:	4b80      	ldr	r3, [pc, #512]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a7f      	ldr	r2, [pc, #508]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	e02e      	b.n	8003c5c <HAL_RCC_OscConfig+0xd4>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x98>
 8003c06:	4b7b      	ldr	r3, [pc, #492]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7a      	ldr	r2, [pc, #488]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b78      	ldr	r3, [pc, #480]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a77      	ldr	r2, [pc, #476]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e01d      	b.n	8003c5c <HAL_RCC_OscConfig+0xd4>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0xbc>
 8003c2a:	4b72      	ldr	r3, [pc, #456]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a71      	ldr	r2, [pc, #452]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b6f      	ldr	r3, [pc, #444]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6e      	ldr	r2, [pc, #440]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e00b      	b.n	8003c5c <HAL_RCC_OscConfig+0xd4>
 8003c44:	4b6b      	ldr	r3, [pc, #428]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6a      	ldr	r2, [pc, #424]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	4b68      	ldr	r3, [pc, #416]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a67      	ldr	r2, [pc, #412]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d013      	beq.n	8003c8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7ff faae 	bl	80031c4 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7ff faaa 	bl	80031c4 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	@ 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e200      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0xe4>
 8003c8a:	e014      	b.n	8003cb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7ff fa9a 	bl	80031c4 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c94:	f7ff fa96 	bl	80031c4 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e1ec      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	4b53      	ldr	r3, [pc, #332]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x10c>
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d063      	beq.n	8003d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cce:	4b49      	ldr	r3, [pc, #292]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d11c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x18c>
 8003cda:	4b46      	ldr	r3, [pc, #280]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d116      	bne.n	8003d14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce6:	4b43      	ldr	r3, [pc, #268]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_RCC_OscConfig+0x176>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e1c0      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4939      	ldr	r1, [pc, #228]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	e03a      	b.n	8003d8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d020      	beq.n	8003d5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d1c:	4b36      	ldr	r3, [pc, #216]	@ (8003df8 <HAL_RCC_OscConfig+0x270>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d22:	f7ff fa4f 	bl	80031c4 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2a:	f7ff fa4b 	bl	80031c4 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e1a1      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d48:	4b2a      	ldr	r3, [pc, #168]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4927      	ldr	r1, [pc, #156]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]
 8003d5c:	e015      	b.n	8003d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d5e:	4b26      	ldr	r3, [pc, #152]	@ (8003df8 <HAL_RCC_OscConfig+0x270>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7ff fa2e 	bl	80031c4 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6c:	f7ff fa2a 	bl	80031c4 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e180      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d03a      	beq.n	8003e0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d019      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d9e:	4b17      	ldr	r3, [pc, #92]	@ (8003dfc <HAL_RCC_OscConfig+0x274>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da4:	f7ff fa0e 	bl	80031c4 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dac:	f7ff fa0a 	bl	80031c4 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e160      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dca:	2001      	movs	r0, #1
 8003dcc:	f000 face 	bl	800436c <RCC_Delay>
 8003dd0:	e01c      	b.n	8003e0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dfc <HAL_RCC_OscConfig+0x274>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd8:	f7ff f9f4 	bl	80031c4 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dde:	e00f      	b.n	8003e00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de0:	f7ff f9f0 	bl	80031c4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d908      	bls.n	8003e00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e146      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	42420000 	.word	0x42420000
 8003dfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e00:	4b92      	ldr	r3, [pc, #584]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e9      	bne.n	8003de0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80a6 	beq.w	8003f66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1e:	4b8b      	ldr	r3, [pc, #556]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10d      	bne.n	8003e46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2a:	4b88      	ldr	r3, [pc, #544]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	4a87      	ldr	r2, [pc, #540]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e34:	61d3      	str	r3, [r2, #28]
 8003e36:	4b85      	ldr	r3, [pc, #532]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	4b82      	ldr	r3, [pc, #520]	@ (8004050 <HAL_RCC_OscConfig+0x4c8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d118      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e52:	4b7f      	ldr	r3, [pc, #508]	@ (8004050 <HAL_RCC_OscConfig+0x4c8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a7e      	ldr	r2, [pc, #504]	@ (8004050 <HAL_RCC_OscConfig+0x4c8>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5e:	f7ff f9b1 	bl	80031c4 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7ff f9ad 	bl	80031c4 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b64      	cmp	r3, #100	@ 0x64
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e103      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	4b75      	ldr	r3, [pc, #468]	@ (8004050 <HAL_RCC_OscConfig+0x4c8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCC_OscConfig+0x312>
 8003e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	4a6e      	ldr	r2, [pc, #440]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6213      	str	r3, [r2, #32]
 8003e98:	e02d      	b.n	8003ef6 <HAL_RCC_OscConfig+0x36e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x334>
 8003ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	4a69      	ldr	r2, [pc, #420]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	6213      	str	r3, [r2, #32]
 8003eae:	4b67      	ldr	r3, [pc, #412]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4a66      	ldr	r2, [pc, #408]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	f023 0304 	bic.w	r3, r3, #4
 8003eb8:	6213      	str	r3, [r2, #32]
 8003eba:	e01c      	b.n	8003ef6 <HAL_RCC_OscConfig+0x36e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d10c      	bne.n	8003ede <HAL_RCC_OscConfig+0x356>
 8003ec4:	4b61      	ldr	r3, [pc, #388]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	4a60      	ldr	r2, [pc, #384]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003eca:	f043 0304 	orr.w	r3, r3, #4
 8003ece:	6213      	str	r3, [r2, #32]
 8003ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4a5d      	ldr	r2, [pc, #372]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6213      	str	r3, [r2, #32]
 8003edc:	e00b      	b.n	8003ef6 <HAL_RCC_OscConfig+0x36e>
 8003ede:	4b5b      	ldr	r3, [pc, #364]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	4a5a      	ldr	r2, [pc, #360]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	6213      	str	r3, [r2, #32]
 8003eea:	4b58      	ldr	r3, [pc, #352]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4a57      	ldr	r2, [pc, #348]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	f023 0304 	bic.w	r3, r3, #4
 8003ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d015      	beq.n	8003f2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efe:	f7ff f961 	bl	80031c4 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7ff f95d 	bl	80031c4 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0b1      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ee      	beq.n	8003f06 <HAL_RCC_OscConfig+0x37e>
 8003f28:	e014      	b.n	8003f54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2a:	f7ff f94b 	bl	80031c4 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f32:	f7ff f947 	bl	80031c4 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e09b      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	4b40      	ldr	r3, [pc, #256]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ee      	bne.n	8003f32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8087 	beq.w	800407e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f70:	4b36      	ldr	r3, [pc, #216]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d061      	beq.n	8004040 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d146      	bne.n	8004012 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f84:	4b33      	ldr	r3, [pc, #204]	@ (8004054 <HAL_RCC_OscConfig+0x4cc>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7ff f91b 	bl	80031c4 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f92:	f7ff f917 	bl	80031c4 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e06d      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa4:	4b29      	ldr	r3, [pc, #164]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb8:	d108      	bne.n	8003fcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fba:	4b24      	ldr	r3, [pc, #144]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	4921      	ldr	r1, [pc, #132]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a19      	ldr	r1, [r3, #32]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	491b      	ldr	r1, [pc, #108]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <HAL_RCC_OscConfig+0x4cc>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fea:	f7ff f8eb 	bl	80031c4 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff2:	f7ff f8e7 	bl	80031c4 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e03d      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004004:	4b11      	ldr	r3, [pc, #68]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x46a>
 8004010:	e035      	b.n	800407e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <HAL_RCC_OscConfig+0x4cc>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7ff f8d4 	bl	80031c4 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7ff f8d0 	bl	80031c4 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e026      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004032:	4b06      	ldr	r3, [pc, #24]	@ (800404c <HAL_RCC_OscConfig+0x4c4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x498>
 800403e:	e01e      	b.n	800407e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e019      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
 800404c:	40021000 	.word	0x40021000
 8004050:	40007000 	.word	0x40007000
 8004054:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <HAL_RCC_OscConfig+0x500>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	429a      	cmp	r2, r3
 800406a:	d106      	bne.n	800407a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d001      	beq.n	800407e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40021000 	.word	0x40021000

0800408c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0d0      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040a0:	4b6a      	ldr	r3, [pc, #424]	@ (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d910      	bls.n	80040d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b67      	ldr	r3, [pc, #412]	@ (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 0207 	bic.w	r2, r3, #7
 80040b6:	4965      	ldr	r1, [pc, #404]	@ (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b63      	ldr	r3, [pc, #396]	@ (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0b8      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d020      	beq.n	800411e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e8:	4b59      	ldr	r3, [pc, #356]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4a58      	ldr	r2, [pc, #352]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004100:	4b53      	ldr	r3, [pc, #332]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a52      	ldr	r2, [pc, #328]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800410a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b50      	ldr	r3, [pc, #320]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	494d      	ldr	r1, [pc, #308]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d040      	beq.n	80041ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004132:	4b47      	ldr	r3, [pc, #284]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d115      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e07f      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414a:	4b41      	ldr	r3, [pc, #260]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e073      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415a:	4b3d      	ldr	r3, [pc, #244]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e06b      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416a:	4b39      	ldr	r3, [pc, #228]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f023 0203 	bic.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4936      	ldr	r1, [pc, #216]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800417c:	f7ff f822 	bl	80031c4 <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	e00a      	b.n	800419a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004184:	f7ff f81e 	bl	80031c4 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e053      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	4b2d      	ldr	r3, [pc, #180]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 020c 	and.w	r2, r3, #12
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1eb      	bne.n	8004184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041ac:	4b27      	ldr	r3, [pc, #156]	@ (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d210      	bcs.n	80041dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b24      	ldr	r3, [pc, #144]	@ (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 0207 	bic.w	r2, r3, #7
 80041c2:	4922      	ldr	r1, [pc, #136]	@ (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ca:	4b20      	ldr	r3, [pc, #128]	@ (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e032      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e8:	4b19      	ldr	r3, [pc, #100]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4916      	ldr	r1, [pc, #88]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d009      	beq.n	800421a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004206:	4b12      	ldr	r3, [pc, #72]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	490e      	ldr	r1, [pc, #56]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004216:	4313      	orrs	r3, r2
 8004218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800421a:	f000 f821 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 800421e:	4602      	mov	r2, r0
 8004220:	4b0b      	ldr	r3, [pc, #44]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	490a      	ldr	r1, [pc, #40]	@ (8004254 <HAL_RCC_ClockConfig+0x1c8>)
 800422c:	5ccb      	ldrb	r3, [r1, r3]
 800422e:	fa22 f303 	lsr.w	r3, r2, r3
 8004232:	4a09      	ldr	r2, [pc, #36]	@ (8004258 <HAL_RCC_ClockConfig+0x1cc>)
 8004234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004236:	4b09      	ldr	r3, [pc, #36]	@ (800425c <HAL_RCC_ClockConfig+0x1d0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe ff80 	bl	8003140 <HAL_InitTick>

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40022000 	.word	0x40022000
 8004250:	40021000 	.word	0x40021000
 8004254:	08004a98 	.word	0x08004a98
 8004258:	20000024 	.word	0x20000024
 800425c:	2000005c 	.word	0x2000005c

08004260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	2300      	movs	r3, #0
 8004274:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800427a:	4b1e      	ldr	r3, [pc, #120]	@ (80042f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b04      	cmp	r3, #4
 8004288:	d002      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x30>
 800428a:	2b08      	cmp	r3, #8
 800428c:	d003      	beq.n	8004296 <HAL_RCC_GetSysClockFreq+0x36>
 800428e:	e027      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004290:	4b19      	ldr	r3, [pc, #100]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004292:	613b      	str	r3, [r7, #16]
      break;
 8004294:	e027      	b.n	80042e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	0c9b      	lsrs	r3, r3, #18
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	4a17      	ldr	r2, [pc, #92]	@ (80042fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80042a0:	5cd3      	ldrb	r3, [r2, r3]
 80042a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d010      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042ae:	4b11      	ldr	r3, [pc, #68]	@ (80042f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	0c5b      	lsrs	r3, r3, #17
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	4a11      	ldr	r2, [pc, #68]	@ (8004300 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042ba:	5cd3      	ldrb	r3, [r2, r3]
 80042bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a0d      	ldr	r2, [pc, #52]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80042c2:	fb03 f202 	mul.w	r2, r3, r2
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	e004      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	613b      	str	r3, [r7, #16]
      break;
 80042de:	e002      	b.n	80042e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042e0:	4b05      	ldr	r3, [pc, #20]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80042e2:	613b      	str	r3, [r7, #16]
      break;
 80042e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e6:	693b      	ldr	r3, [r7, #16]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40021000 	.word	0x40021000
 80042f8:	007a1200 	.word	0x007a1200
 80042fc:	08005330 	.word	0x08005330
 8004300:	08005340 	.word	0x08005340
 8004304:	003d0900 	.word	0x003d0900

08004308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800430c:	4b02      	ldr	r3, [pc, #8]	@ (8004318 <HAL_RCC_GetHCLKFreq+0x10>)
 800430e:	681b      	ldr	r3, [r3, #0]
}
 8004310:	4618      	mov	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr
 8004318:	20000024 	.word	0x20000024

0800431c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004320:	f7ff fff2 	bl	8004308 <HAL_RCC_GetHCLKFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b05      	ldr	r3, [pc, #20]	@ (800433c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4903      	ldr	r1, [pc, #12]	@ (8004340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000
 8004340:	08004aa8 	.word	0x08004aa8

08004344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004348:	f7ff ffde 	bl	8004308 <HAL_RCC_GetHCLKFreq>
 800434c:	4602      	mov	r2, r0
 800434e:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	0adb      	lsrs	r3, r3, #11
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	4903      	ldr	r1, [pc, #12]	@ (8004368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800435a:	5ccb      	ldrb	r3, [r1, r3]
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004360:	4618      	mov	r0, r3
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40021000 	.word	0x40021000
 8004368:	08004aa8 	.word	0x08004aa8

0800436c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004374:	4b0a      	ldr	r3, [pc, #40]	@ (80043a0 <RCC_Delay+0x34>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a0a      	ldr	r2, [pc, #40]	@ (80043a4 <RCC_Delay+0x38>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	0a5b      	lsrs	r3, r3, #9
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004388:	bf00      	nop
  }
  while (Delay --);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1e5a      	subs	r2, r3, #1
 800438e:	60fa      	str	r2, [r7, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f9      	bne.n	8004388 <RCC_Delay+0x1c>
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr
 80043a0:	20000024 	.word	0x20000024
 80043a4:	10624dd3 	.word	0x10624dd3

080043a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e076      	b.n	80044a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d108      	bne.n	80043d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043ca:	d009      	beq.n	80043e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	61da      	str	r2, [r3, #28]
 80043d2:	e005      	b.n	80043e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc fc40 	bl	8000c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004416:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004464:	ea42 0103 	orr.w	r1, r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	0c1a      	lsrs	r2, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f002 0204 	and.w	r2, r2, #4
 8004486:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004496:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e042      	b.n	8004548 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fc1c 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2224      	movs	r2, #36	@ 0x24
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fa09 	bl	800490c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	@ 0x28
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b20      	cmp	r3, #32
 800456e:	d175      	bne.n	800465c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_UART_Transmit+0x2c>
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e06e      	b.n	800465e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2221      	movs	r2, #33	@ 0x21
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800458e:	f7fe fe19 	bl	80031c4 <HAL_GetTick>
 8004592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	88fa      	ldrh	r2, [r7, #6]
 8004598:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	88fa      	ldrh	r2, [r7, #6]
 800459e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a8:	d108      	bne.n	80045bc <HAL_UART_Transmit+0x6c>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	e003      	b.n	80045c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045c4:	e02e      	b.n	8004624 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2200      	movs	r2, #0
 80045ce:	2180      	movs	r1, #128	@ 0x80
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f8df 	bl	8004794 <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e03a      	b.n	800465e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10b      	bne.n	8004606 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	3302      	adds	r3, #2
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	e007      	b.n	8004616 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	3301      	adds	r3, #1
 8004614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1cb      	bne.n	80045c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2200      	movs	r2, #0
 8004636:	2140      	movs	r1, #64	@ 0x40
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f8ab 	bl	8004794 <UART_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e006      	b.n	800465e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	e000      	b.n	800465e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b08a      	sub	sp, #40	@ 0x28
 800466a:	af02      	add	r7, sp, #8
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b20      	cmp	r3, #32
 8004684:	f040 8081 	bne.w	800478a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_UART_Receive+0x2e>
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e079      	b.n	800478c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2222      	movs	r2, #34	@ 0x22
 80046a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ac:	f7fe fd8a 	bl	80031c4 <HAL_GetTick>
 80046b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	88fa      	ldrh	r2, [r7, #6]
 80046b6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046c6:	d108      	bne.n	80046da <HAL_UART_Receive+0x74>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d104      	bne.n	80046da <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	e003      	b.n	80046e2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80046e2:	e047      	b.n	8004774 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2200      	movs	r2, #0
 80046ec:	2120      	movs	r1, #32
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f850 	bl	8004794 <UART_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e042      	b.n	800478c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10c      	bne.n	8004726 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004718:	b29a      	uxth	r2, r3
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	3302      	adds	r3, #2
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	e01f      	b.n	8004766 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800472e:	d007      	beq.n	8004740 <HAL_UART_Receive+0xda>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <HAL_UART_Receive+0xe8>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d106      	bne.n	800474e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	b2da      	uxtb	r2, r3
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	701a      	strb	r2, [r3, #0]
 800474c:	e008      	b.n	8004760 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800475a:	b2da      	uxtb	r2, r3
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3301      	adds	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1b2      	bne.n	80046e4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e000      	b.n	800478c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800478a:	2302      	movs	r3, #2
  }
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a4:	e03b      	b.n	800481e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d037      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7fe fd09 	bl	80031c4 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	6a3a      	ldr	r2, [r7, #32]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e03a      	b.n	800483e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d023      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x8a>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b80      	cmp	r3, #128	@ 0x80
 80047da:	d020      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x8a>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b40      	cmp	r3, #64	@ 0x40
 80047e0:	d01d      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d116      	bne.n	800481e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 f81d 	bl	8004846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2208      	movs	r2, #8
 8004810:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e00f      	b.n	800483e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4013      	ands	r3, r2
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	bf0c      	ite	eq
 800482e:	2301      	moveq	r3, #1
 8004830:	2300      	movne	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	461a      	mov	r2, r3
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	429a      	cmp	r2, r3
 800483a:	d0b4      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004846:	b480      	push	{r7}
 8004848:	b095      	sub	sp, #84	@ 0x54
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	330c      	adds	r3, #12
 800486c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800486e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004870:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800487c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e5      	bne.n	800484e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3314      	adds	r3, #20
 8004888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	61fb      	str	r3, [r7, #28]
   return(result);
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3314      	adds	r3, #20
 80048a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e5      	bne.n	8004882 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d119      	bne.n	80048f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f023 0310 	bic.w	r3, r3, #16
 80048d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	330c      	adds	r3, #12
 80048dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048de:	61ba      	str	r2, [r7, #24]
 80048e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	6979      	ldr	r1, [r7, #20]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	613b      	str	r3, [r7, #16]
   return(result);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e5      	bne.n	80048be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004900:	bf00      	nop
 8004902:	3754      	adds	r7, #84	@ 0x54
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr
	...

0800490c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004946:	f023 030c 	bic.w	r3, r3, #12
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	430b      	orrs	r3, r1
 8004952:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a20 <UART_SetConfig+0x114>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d103      	bne.n	800497c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004974:	f7ff fce6 	bl	8004344 <HAL_RCC_GetPCLK2Freq>
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	e002      	b.n	8004982 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800497c:	f7ff fcce 	bl	800431c <HAL_RCC_GetPCLK1Freq>
 8004980:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	009a      	lsls	r2, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	4a22      	ldr	r2, [pc, #136]	@ (8004a24 <UART_SetConfig+0x118>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	0119      	lsls	r1, r3, #4
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009a      	lsls	r2, r3, #2
 80049ac:	441a      	add	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a24 <UART_SetConfig+0x118>)
 80049ba:	fba3 0302 	umull	r0, r3, r3, r2
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2064      	movs	r0, #100	@ 0x64
 80049c2:	fb00 f303 	mul.w	r3, r0, r3
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	3332      	adds	r3, #50	@ 0x32
 80049cc:	4a15      	ldr	r2, [pc, #84]	@ (8004a24 <UART_SetConfig+0x118>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049d8:	4419      	add	r1, r3
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009a      	lsls	r2, r3, #2
 80049e4:	441a      	add	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80049f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a24 <UART_SetConfig+0x118>)
 80049f2:	fba3 0302 	umull	r0, r3, r3, r2
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2064      	movs	r0, #100	@ 0x64
 80049fa:	fb00 f303 	mul.w	r3, r0, r3
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	3332      	adds	r3, #50	@ 0x32
 8004a04:	4a07      	ldr	r2, [pc, #28]	@ (8004a24 <UART_SetConfig+0x118>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	f003 020f 	and.w	r2, r3, #15
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	440a      	add	r2, r1
 8004a16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40013800 	.word	0x40013800
 8004a24:	51eb851f 	.word	0x51eb851f

08004a28 <memset>:
 8004a28:	4603      	mov	r3, r0
 8004a2a:	4402      	add	r2, r0
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d100      	bne.n	8004a32 <memset+0xa>
 8004a30:	4770      	bx	lr
 8004a32:	f803 1b01 	strb.w	r1, [r3], #1
 8004a36:	e7f9      	b.n	8004a2c <memset+0x4>

08004a38 <__libc_init_array>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	2600      	movs	r6, #0
 8004a3c:	4d0c      	ldr	r5, [pc, #48]	@ (8004a70 <__libc_init_array+0x38>)
 8004a3e:	4c0d      	ldr	r4, [pc, #52]	@ (8004a74 <__libc_init_array+0x3c>)
 8004a40:	1b64      	subs	r4, r4, r5
 8004a42:	10a4      	asrs	r4, r4, #2
 8004a44:	42a6      	cmp	r6, r4
 8004a46:	d109      	bne.n	8004a5c <__libc_init_array+0x24>
 8004a48:	f000 f81a 	bl	8004a80 <_init>
 8004a4c:	2600      	movs	r6, #0
 8004a4e:	4d0a      	ldr	r5, [pc, #40]	@ (8004a78 <__libc_init_array+0x40>)
 8004a50:	4c0a      	ldr	r4, [pc, #40]	@ (8004a7c <__libc_init_array+0x44>)
 8004a52:	1b64      	subs	r4, r4, r5
 8004a54:	10a4      	asrs	r4, r4, #2
 8004a56:	42a6      	cmp	r6, r4
 8004a58:	d105      	bne.n	8004a66 <__libc_init_array+0x2e>
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}
 8004a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a60:	4798      	blx	r3
 8004a62:	3601      	adds	r6, #1
 8004a64:	e7ee      	b.n	8004a44 <__libc_init_array+0xc>
 8004a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6a:	4798      	blx	r3
 8004a6c:	3601      	adds	r6, #1
 8004a6e:	e7f2      	b.n	8004a56 <__libc_init_array+0x1e>
 8004a70:	08005344 	.word	0x08005344
 8004a74:	08005344 	.word	0x08005344
 8004a78:	08005344 	.word	0x08005344
 8004a7c:	08005348 	.word	0x08005348

08004a80 <_init>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	bf00      	nop
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr

08004a8c <_fini>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr
