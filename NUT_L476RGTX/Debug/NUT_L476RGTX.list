
NUT_L476RGTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  08007734  08007734  00008734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ffc  08007ffc  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ffc  08007ffc  00008ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008004  08008004  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008004  08008004  00009004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008008  08008008  00009008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800800c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045f0  2000005c  08008068  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000464c  08008068  0000a64c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014326  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b19  00000000  00000000  0001e3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00020ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0b  00000000  00000000  000220b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c08  00000000  00000000  00022ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d3d  00000000  00000000  0004aacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f40ca  00000000  00000000  00062808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001568d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad0  00000000  00000000  00156918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800771c 	.word	0x0800771c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	0800771c 	.word	0x0800771c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f003 fabc 	bl	8003a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f811 	bl	80004e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f96e 	bl	80007a4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004c8:	f000 f85c 	bl	8000584 <MX_CAN1_Init>
  MX_I2C2_Init();
 80004cc:	f000 f890 	bl	80005f0 <MX_I2C2_Init>
  MX_SPI2_Init();
 80004d0:	f000 f8ce 	bl	8000670 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80004d4:	f000 f906 	bl	80006e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f934 	bl	8000744 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	vNut_Init();
 80004dc:	f000 fe16 	bl	800110c <vNut_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		vNut_loop();
 80004e0:	f000 faae 	bl	8000a40 <vNut_loop>
 80004e4:	e7fc      	b.n	80004e0 <main+0x28>

080004e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b096      	sub	sp, #88	@ 0x58
 80004ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2244      	movs	r2, #68	@ 0x44
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f007 f8e4 	bl	80076c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000508:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800050c:	f004 f828 	bl	8004560 <HAL_PWREx_ControlVoltageScaling>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000516:	f000 f9bf 	bl	8000898 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800051a:	2301      	movs	r3, #1
 800051c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800051e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000522:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	2302      	movs	r3, #2
 8000526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000528:	2303      	movs	r3, #3
 800052a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000530:	2314      	movs	r3, #20
 8000532:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000534:	2307      	movs	r3, #7
 8000536:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000538:	2302      	movs	r3, #2
 800053a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800053c:	2302      	movs	r3, #2
 800053e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4618      	mov	r0, r3
 8000546:	f004 f861 	bl	800460c <HAL_RCC_OscConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000550:	f000 f9a2 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	230f      	movs	r3, #15
 8000556:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	2303      	movs	r3, #3
 800055a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	2104      	movs	r1, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f004 fc29 	bl	8004dc4 <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000578:	f000 f98e 	bl	8000898 <Error_Handler>
  }
}
 800057c:	bf00      	nop
 800057e:	3758      	adds	r7, #88	@ 0x58
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000588:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_CAN1_Init+0x64>)
 800058a:	4a18      	ldr	r2, [pc, #96]	@ (80005ec <MX_CAN1_Init+0x68>)
 800058c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <MX_CAN1_Init+0x64>)
 8000590:	2210      	movs	r2, #16
 8000592:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000594:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_CAN1_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800059a:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <MX_CAN1_Init+0x64>)
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005ae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005b0:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005be:	2200      	movs	r2, #0
 80005c0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005d4:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <MX_CAN1_Init+0x64>)
 80005d6:	f003 fac7 	bl	8003b68 <HAL_CAN_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005e0:	f000 f95a 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000078 	.word	0x20000078
 80005ec:	40006400 	.word	0x40006400

080005f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <MX_I2C2_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000668 <MX_I2C2_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F12981;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <MX_I2C2_Init+0x74>)
 80005fc:	4a1b      	ldr	r2, [pc, #108]	@ (800066c <MX_I2C2_Init+0x7c>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000600:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <MX_I2C2_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000606:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <MX_I2C2_Init+0x74>)
 8000608:	2201      	movs	r2, #1
 800060a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <MX_I2C2_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000612:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <MX_I2C2_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_I2C2_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_I2C2_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_I2C2_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800062a:	480e      	ldr	r0, [pc, #56]	@ (8000664 <MX_I2C2_Init+0x74>)
 800062c:	f003 fe58 	bl	80042e0 <HAL_I2C_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000636:	f000 f92f 	bl	8000898 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	4809      	ldr	r0, [pc, #36]	@ (8000664 <MX_I2C2_Init+0x74>)
 800063e:	f003 feea 	bl	8004416 <HAL_I2CEx_ConfigAnalogFilter>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000648:	f000 f926 	bl	8000898 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_I2C2_Init+0x74>)
 8000650:	f003 ff2c 	bl	80044ac <HAL_I2CEx_ConfigDigitalFilter>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800065a:	f000 f91d 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000a0 	.word	0x200000a0
 8000668:	40005800 	.word	0x40005800
 800066c:	00f12981 	.word	0x00f12981

08000670 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000674:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_SPI2_Init+0x6c>)
 8000676:	4a1a      	ldr	r2, [pc, #104]	@ (80006e0 <MX_SPI2_Init+0x70>)
 8000678:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800067a:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <MX_SPI2_Init+0x6c>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_SPI2_Init+0x6c>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_SPI2_Init+0x6c>)
 8000688:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800068c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_SPI2_Init+0x6c>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_SPI2_Init+0x6c>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <MX_SPI2_Init+0x6c>)
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_SPI2_Init+0x6c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_SPI2_Init+0x6c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <MX_SPI2_Init+0x6c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_SPI2_Init+0x6c>)
 80006b6:	2207      	movs	r2, #7
 80006b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <MX_SPI2_Init+0x6c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_SPI2_Init+0x6c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_SPI2_Init+0x6c>)
 80006c8:	f005 fa5c 	bl	8005b84 <HAL_SPI_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80006d2:	f000 f8e1 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000f4 	.word	0x200000f4
 80006e0:	40003800 	.word	0x40003800

080006e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_USART1_UART_Init+0x58>)
 80006ea:	4a15      	ldr	r2, [pc, #84]	@ (8000740 <MX_USART1_UART_Init+0x5c>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ee:	4b13      	ldr	r3, [pc, #76]	@ (800073c <MX_USART1_UART_Init+0x58>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_USART1_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_USART1_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_USART1_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_USART1_UART_Init+0x58>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_USART1_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_USART1_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <MX_USART1_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_USART1_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_USART1_UART_Init+0x58>)
 8000728:	f006 f958 	bl	80069dc <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f8b1 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000158 	.word	0x20000158
 8000740:	40013800 	.word	0x40013800

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_USART2_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	@ (80007a0 <MX_USART2_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_USART2_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_USART2_UART_Init+0x58>)
 8000788:	f006 f928 	bl	80069dc <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f881 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001e0 	.word	0x200001e0
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	4b34      	ldr	r3, [pc, #208]	@ (800088c <MX_GPIO_Init+0xe8>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a33      	ldr	r2, [pc, #204]	@ (800088c <MX_GPIO_Init+0xe8>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b31      	ldr	r3, [pc, #196]	@ (800088c <MX_GPIO_Init+0xe8>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <MX_GPIO_Init+0xe8>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a2d      	ldr	r2, [pc, #180]	@ (800088c <MX_GPIO_Init+0xe8>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <MX_GPIO_Init+0xe8>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b28      	ldr	r3, [pc, #160]	@ (800088c <MX_GPIO_Init+0xe8>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a27      	ldr	r2, [pc, #156]	@ (800088c <MX_GPIO_Init+0xe8>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b25      	ldr	r3, [pc, #148]	@ (800088c <MX_GPIO_Init+0xe8>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b22      	ldr	r3, [pc, #136]	@ (800088c <MX_GPIO_Init+0xe8>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a21      	ldr	r2, [pc, #132]	@ (800088c <MX_GPIO_Init+0xe8>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_GPIO_Init+0xe8>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GP_01_Pin|GP_02_Pin|GP_03_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000820:	481b      	ldr	r0, [pc, #108]	@ (8000890 <MX_GPIO_Init+0xec>)
 8000822:	f003 fd45 	bl	80042b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_KEY_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2160      	movs	r1, #96	@ 0x60
 800082a:	481a      	ldr	r0, [pc, #104]	@ (8000894 <MX_GPIO_Init+0xf0>)
 800082c:	f003 fd40 	bl	80042b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CSN_Pin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin;
 8000830:	2302      	movs	r3, #2
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CSN_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000846:	f003 fb71 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : GP_01_Pin GP_02_Pin GP_03_Pin */
  GPIO_InitStruct.Pin = GP_01_Pin|GP_02_Pin|GP_03_Pin;
 800084a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480b      	ldr	r0, [pc, #44]	@ (8000890 <MX_GPIO_Init+0xec>)
 8000864:	f003 fb62 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_KEY_Pin LED1_Pin */
  GPIO_InitStruct.Pin = USR_KEY_Pin|LED1_Pin;
 8000868:	2360      	movs	r3, #96	@ 0x60
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_GPIO_Init+0xf0>)
 8000880:	f003 fb54 	bl	8003f2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	@ 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	48000800 	.word	0x48000800
 8000894:	48000400 	.word	0x48000400

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <_uNutComm_DecodeHeader>:
void _vNutComm_SPI_Enable(void);
void _vNutComm_I2C_Enable(void);
void _vNutComm_CAN_Enable(void);

/* Decode header */
uint32_t _uNutComm_DecodeHeader() {
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint32_t length;
	uint8_t i;
	uint16_t command;
	/* Decode the header */
	command = rx_header[0];
 80008aa:	4b44      	ldr	r3, [pc, #272]	@ (80009bc <_uNutComm_DecodeHeader+0x118>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	80bb      	strh	r3, [r7, #4]
	command <<= 8;
 80008b0:	88bb      	ldrh	r3, [r7, #4]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	80bb      	strh	r3, [r7, #4]
	command |= rx_header[1];
 80008b6:	4b41      	ldr	r3, [pc, #260]	@ (80009bc <_uNutComm_DecodeHeader+0x118>)
 80008b8:	785b      	ldrb	r3, [r3, #1]
 80008ba:	461a      	mov	r2, r3
 80008bc:	88bb      	ldrh	r3, [r7, #4]
 80008be:	4313      	orrs	r3, r2
 80008c0:	80bb      	strh	r3, [r7, #4]
	length = rx_header[4];
 80008c2:	4b3e      	ldr	r3, [pc, #248]	@ (80009bc <_uNutComm_DecodeHeader+0x118>)
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	603b      	str	r3, [r7, #0]
	length <<= 8;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	603b      	str	r3, [r7, #0]
	length |= rx_header[5];
 80008ce:	4b3b      	ldr	r3, [pc, #236]	@ (80009bc <_uNutComm_DecodeHeader+0x118>)
 80008d0:	795b      	ldrb	r3, [r3, #5]
 80008d2:	461a      	mov	r2, r3
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	603b      	str	r3, [r7, #0]
	length <<= 8;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	021b      	lsls	r3, r3, #8
 80008de:	603b      	str	r3, [r7, #0]
	length |= rx_header[6];
 80008e0:	4b36      	ldr	r3, [pc, #216]	@ (80009bc <_uNutComm_DecodeHeader+0x118>)
 80008e2:	799b      	ldrb	r3, [r3, #6]
 80008e4:	461a      	mov	r2, r3
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	603b      	str	r3, [r7, #0]
	length <<= 8;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	603b      	str	r3, [r7, #0]
	length |= rx_header[7];
 80008f2:	4b32      	ldr	r3, [pc, #200]	@ (80009bc <_uNutComm_DecodeHeader+0x118>)
 80008f4:	79db      	ldrb	r3, [r3, #7]
 80008f6:	461a      	mov	r2, r3
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	603b      	str	r3, [r7, #0]
	/* Parse command */
	cmd_program = 0;
 80008fe:	4b30      	ldr	r3, [pc, #192]	@ (80009c0 <_uNutComm_DecodeHeader+0x11c>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
	for (i = 0; i < sizeof(sys_cmd) / 2; i++) {
 8000904:	2300      	movs	r3, #0
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	e013      	b.n	8000932 <_uNutComm_DecodeHeader+0x8e>
		if (cmd_program)
 800090a:	4b2d      	ldr	r3, [pc, #180]	@ (80009c0 <_uNutComm_DecodeHeader+0x11c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d113      	bne.n	800093a <_uNutComm_DecodeHeader+0x96>
			break;
		if (sys_cmd[i] == command)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4a2b      	ldr	r2, [pc, #172]	@ (80009c4 <_uNutComm_DecodeHeader+0x120>)
 8000916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091a:	88ba      	ldrh	r2, [r7, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	d105      	bne.n	800092c <_uNutComm_DecodeHeader+0x88>
			cmd_program = sys_cmd_prog[i];	// set the program
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	4a29      	ldr	r2, [pc, #164]	@ (80009c8 <_uNutComm_DecodeHeader+0x124>)
 8000924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000928:	4a25      	ldr	r2, [pc, #148]	@ (80009c0 <_uNutComm_DecodeHeader+0x11c>)
 800092a:	6013      	str	r3, [r2, #0]
	for (i = 0; i < sizeof(sys_cmd) / 2; i++) {
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	3301      	adds	r3, #1
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d9e8      	bls.n	800090a <_uNutComm_DecodeHeader+0x66>
 8000938:	e000      	b.n	800093c <_uNutComm_DecodeHeader+0x98>
			break;
 800093a:	bf00      	nop
	}
	for (i = 0; i < 255; i++) {		// just scan all TODO need to fix this
 800093c:	2300      	movs	r3, #0
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	e019      	b.n	8000976 <_uNutComm_DecodeHeader+0xd2>
		if (cmd_program)
 8000942:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <_uNutComm_DecodeHeader+0x11c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d119      	bne.n	800097e <_uNutComm_DecodeHeader+0xda>
			break;
		if (user_cmd[i] == command)
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4a1f      	ldr	r2, [pc, #124]	@ (80009cc <_uNutComm_DecodeHeader+0x128>)
 800094e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000952:	88ba      	ldrh	r2, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	d105      	bne.n	8000964 <_uNutComm_DecodeHeader+0xc0>
			cmd_program = user_cmd_prog[i];	// set the program
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4a1d      	ldr	r2, [pc, #116]	@ (80009d0 <_uNutComm_DecodeHeader+0x12c>)
 800095c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000960:	4a17      	ldr	r2, [pc, #92]	@ (80009c0 <_uNutComm_DecodeHeader+0x11c>)
 8000962:	6013      	str	r3, [r2, #0]
		if (user_cmd[i] == 0)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <_uNutComm_DecodeHeader+0x128>)
 8000968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d008      	beq.n	8000982 <_uNutComm_DecodeHeader+0xde>
	for (i = 0; i < 255; i++) {		// just scan all TODO need to fix this
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	3301      	adds	r3, #1
 8000974:	71fb      	strb	r3, [r7, #7]
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2bff      	cmp	r3, #255	@ 0xff
 800097a:	d1e2      	bne.n	8000942 <_uNutComm_DecodeHeader+0x9e>
 800097c:	e002      	b.n	8000984 <_uNutComm_DecodeHeader+0xe0>
			break;
 800097e:	bf00      	nop
 8000980:	e000      	b.n	8000984 <_uNutComm_DecodeHeader+0xe0>
			break;
 8000982:	bf00      	nop
	}
	/* If the command is not found, then continue to receive the payload if possible */
	if (!cmd_program) {
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <_uNutComm_DecodeHeader+0x11c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d105      	bne.n	8000998 <_uNutComm_DecodeHeader+0xf4>
		status = NUT_WARNING;
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <_uNutComm_DecodeHeader+0x130>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
		error = NUT_ERROR_CMD_UNKNOWN;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <_uNutComm_DecodeHeader+0x134>)
 8000994:	2206      	movs	r2, #6
 8000996:	701a      	strb	r2, [r3, #0]
	}
	if (length > NUT_BUFFER_SIZE) {
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800099e:	d905      	bls.n	80009ac <_uNutComm_DecodeHeader+0x108>
		status = NUT_ERROR;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <_uNutComm_DecodeHeader+0x130>)
 80009a2:	2202      	movs	r2, #2
 80009a4:	701a      	strb	r2, [r3, #0]
		error = NUT_ERROR_PAYLOAD_SIZE;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <_uNutComm_DecodeHeader+0x134>)
 80009a8:	2203      	movs	r2, #3
 80009aa:	701a      	strb	r2, [r3, #0]
	}
	return length;
 80009ac:	683b      	ldr	r3, [r7, #0]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20001278 	.word	0x20001278
 80009c0:	20000268 	.word	0x20000268
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000004 	.word	0x20000004
 80009cc:	20000028 	.word	0x20000028
 80009d0:	20000038 	.word	0x20000038
 80009d4:	2000026c 	.word	0x2000026c
 80009d8:	2000026d 	.word	0x2000026d

080009dc <_Nut_Command_ECHO>:
	// no need to check for wake up
}

/* System command program definitions */
NutStatus_e _Nut_Command_ECHO(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	603b      	str	r3, [r7, #0]
	uint32_t i;
	*result_length = received_data_length;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	68ba      	ldr	r2, [r7, #8]
 80009ee:	601a      	str	r2, [r3, #0]
	for (i = 0; i < received_data_length; i++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e00a      	b.n	8000a0c <_Nut_Command_ECHO+0x30>
		result_buffer_ptr[i] = received_data_ptr[i];
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	441a      	add	r2, r3
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	440b      	add	r3, r1
 8000a02:	7812      	ldrb	r2, [r2, #0]
 8000a04:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < received_data_length; i++)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d3f0      	bcc.n	80009f6 <_Nut_Command_ECHO+0x1a>
	return NUT_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	371c      	adds	r7, #28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <_vNutComm_Init>:

/* Initializes communication interfaces */
void _vNutComm_Init() {
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	/* Constrain the size of each burst */
	comm_max_batch_size = (65535 > NUT_BUFFER_SIZE) ? NUT_BUFFER_SIZE : 65535;
 8000a28:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <_vNutComm_Init+0x18>)
 8000a2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a2e:	801a      	strh	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20002280 	.word	0x20002280

08000a40 <vNut_loop>:

/* Continuously check for signs of communication */
void vNut_loop() {
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b089      	sub	sp, #36	@ 0x24
 8000a44:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef retstatus = HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	72fb      	strb	r3, [r7, #11]
	uint32_t length;
	uint8_t *tempptr;
	uint32_t response_length = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
	uint32_t data_length;
	uint32_t i;

	/* Check UART */
	if (NUT_UART.Instance->ISR & UART_FLAG_RXNE) {
 8000a4e:	4b9d      	ldr	r3, [pc, #628]	@ (8000cc4 <vNut_loop+0x284>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	f003 0320 	and.w	r3, r3, #32
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	f000 8176 	beq.w	8000d4a <vNut_loop+0x30a>
		/* Record the first byte of header */
		rx_header[0] = (uint8_t) NUT_UART.Instance->RDR;
 8000a5e:	4b99      	ldr	r3, [pc, #612]	@ (8000cc4 <vNut_loop+0x284>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b97      	ldr	r3, [pc, #604]	@ (8000cc8 <vNut_loop+0x288>)
 8000a6a:	701a      	strb	r2, [r3, #0]
		/* Disable other interfaces */
		_vNutComm_SPI_Disable();
 8000a6c:	f000 fbdc 	bl	8001228 <_vNutComm_SPI_Disable>
		_vNutComm_I2C_Disable();
 8000a70:	f000 fbea 	bl	8001248 <_vNutComm_I2C_Disable>
		_vNutComm_CAN_Disable();
 8000a74:	f000 fbf8 	bl	8001268 <_vNutComm_CAN_Disable>
		/* Finish receiving the header */
		retstatus = HAL_UART_Receive(&NUT_UART, rx_header + 1, 7, 100);
 8000a78:	4994      	ldr	r1, [pc, #592]	@ (8000ccc <vNut_loop+0x28c>)
 8000a7a:	2364      	movs	r3, #100	@ 0x64
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	4891      	ldr	r0, [pc, #580]	@ (8000cc4 <vNut_loop+0x284>)
 8000a80:	f006 f883 	bl	8006b8a <HAL_UART_Receive>
 8000a84:	4603      	mov	r3, r0
 8000a86:	72fb      	strb	r3, [r7, #11]
		if (retstatus == HAL_TIMEOUT) {
 8000a88:	7afb      	ldrb	r3, [r7, #11]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d10c      	bne.n	8000aa8 <vNut_loop+0x68>
			status = NUT_WARNING;
 8000a8e:	4b90      	ldr	r3, [pc, #576]	@ (8000cd0 <vNut_loop+0x290>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
			error = NUT_ERROR_TIMEOUT;
 8000a94:	4b8f      	ldr	r3, [pc, #572]	@ (8000cd4 <vNut_loop+0x294>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
			/* Enable other interfaces */
			_vNutComm_SPI_Enable();
 8000a9a:	f000 fc0d 	bl	80012b8 <_vNutComm_SPI_Enable>
			_vNutComm_I2C_Enable();
 8000a9e:	f000 fc23 	bl	80012e8 <_vNutComm_I2C_Enable>
			_vNutComm_CAN_Enable();
 8000aa2:	f000 fc39 	bl	8001318 <_vNutComm_CAN_Enable>
			return;
 8000aa6:	e321      	b.n	80010ec <vNut_loop+0x6ac>
		}
		if (retstatus == HAL_BUSY) {
 8000aa8:	7afb      	ldrb	r3, [r7, #11]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d10c      	bne.n	8000ac8 <vNut_loop+0x88>
			status = NUT_WARNING;
 8000aae:	4b88      	ldr	r3, [pc, #544]	@ (8000cd0 <vNut_loop+0x290>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	701a      	strb	r2, [r3, #0]
			error = NUT_ERROR_BUSY;
 8000ab4:	4b87      	ldr	r3, [pc, #540]	@ (8000cd4 <vNut_loop+0x294>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	701a      	strb	r2, [r3, #0]
			/* Enable other interfaces */
			_vNutComm_SPI_Enable();
 8000aba:	f000 fbfd 	bl	80012b8 <_vNutComm_SPI_Enable>
			_vNutComm_I2C_Enable();
 8000abe:	f000 fc13 	bl	80012e8 <_vNutComm_I2C_Enable>
			_vNutComm_CAN_Enable();
 8000ac2:	f000 fc29 	bl	8001318 <_vNutComm_CAN_Enable>
			return;
 8000ac6:	e311      	b.n	80010ec <vNut_loop+0x6ac>
		}
		if (retstatus != HAL_OK) {
 8000ac8:	7afb      	ldrb	r3, [r7, #11]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00c      	beq.n	8000ae8 <vNut_loop+0xa8>
			status = NUT_WARNING;
 8000ace:	4b80      	ldr	r3, [pc, #512]	@ (8000cd0 <vNut_loop+0x290>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
			error = NUT_ERROR_UNKNOWN;
 8000ad4:	4b7f      	ldr	r3, [pc, #508]	@ (8000cd4 <vNut_loop+0x294>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
			/* Enable other interfaces */
			_vNutComm_SPI_Enable();
 8000ada:	f000 fbed 	bl	80012b8 <_vNutComm_SPI_Enable>
			_vNutComm_I2C_Enable();
 8000ade:	f000 fc03 	bl	80012e8 <_vNutComm_I2C_Enable>
			_vNutComm_CAN_Enable();
 8000ae2:	f000 fc19 	bl	8001318 <_vNutComm_CAN_Enable>
			return;
 8000ae6:	e301      	b.n	80010ec <vNut_loop+0x6ac>
		}
		/* Decode header */
		length = _uNutComm_DecodeHeader();
 8000ae8:	f7ff fedc 	bl	80008a4 <_uNutComm_DecodeHeader>
 8000aec:	6178      	str	r0, [r7, #20]
		/* If ERROR occurred, prepare to send error package */
		if (status == NUT_ERROR) {
 8000aee:	4b78      	ldr	r3, [pc, #480]	@ (8000cd0 <vNut_loop+0x290>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d137      	bne.n	8000b66 <vNut_loop+0x126>
			/* Wait until the other side to finish transmission */
			while (length) {
 8000af6:	e021      	b.n	8000b3c <vNut_loop+0xfc>
				if (length < comm_max_batch_size) {
 8000af8:	4b77      	ldr	r3, [pc, #476]	@ (8000cd8 <vNut_loop+0x298>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d20a      	bcs.n	8000b1a <vNut_loop+0xda>
					HAL_UART_Receive(&NUT_UART, rx_header, length, 1000);
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0c:	496e      	ldr	r1, [pc, #440]	@ (8000cc8 <vNut_loop+0x288>)
 8000b0e:	486d      	ldr	r0, [pc, #436]	@ (8000cc4 <vNut_loop+0x284>)
 8000b10:	f006 f83b 	bl	8006b8a <HAL_UART_Receive>
					length = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e010      	b.n	8000b3c <vNut_loop+0xfc>
				} else {
					if (HAL_UART_Receive(&NUT_UART, rx_header, comm_max_batch_size, 1000) == HAL_TIMEOUT)
 8000b1a:	4b6f      	ldr	r3, [pc, #444]	@ (8000cd8 <vNut_loop+0x298>)
 8000b1c:	881a      	ldrh	r2, [r3, #0]
 8000b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b22:	4969      	ldr	r1, [pc, #420]	@ (8000cc8 <vNut_loop+0x288>)
 8000b24:	4867      	ldr	r0, [pc, #412]	@ (8000cc4 <vNut_loop+0x284>)
 8000b26:	f006 f830 	bl	8006b8a <HAL_UART_Receive>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d009      	beq.n	8000b44 <vNut_loop+0x104>
						break;	// also break on timeout
					length -= comm_max_batch_size;
 8000b30:	4b69      	ldr	r3, [pc, #420]	@ (8000cd8 <vNut_loop+0x298>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	1a9b      	subs	r3, r3, r2
 8000b3a:	617b      	str	r3, [r7, #20]
			while (length) {
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1da      	bne.n	8000af8 <vNut_loop+0xb8>
 8000b42:	e000      	b.n	8000b46 <vNut_loop+0x106>
						break;	// also break on timeout
 8000b44:	bf00      	nop
				}
			}
			/* Send error package */
			error_header[1] = NUT_ERROR_PAYLOAD_SIZE;
 8000b46:	4b65      	ldr	r3, [pc, #404]	@ (8000cdc <vNut_loop+0x29c>)
 8000b48:	2203      	movs	r2, #3
 8000b4a:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&NUT_UART, error_header, 6, 100);
 8000b4c:	2364      	movs	r3, #100	@ 0x64
 8000b4e:	2206      	movs	r2, #6
 8000b50:	4962      	ldr	r1, [pc, #392]	@ (8000cdc <vNut_loop+0x29c>)
 8000b52:	485c      	ldr	r0, [pc, #368]	@ (8000cc4 <vNut_loop+0x284>)
 8000b54:	f005 ff90 	bl	8006a78 <HAL_UART_Transmit>
			/* And just return */
			/* Enable other interfaces */
			_vNutComm_SPI_Enable();
 8000b58:	f000 fbae 	bl	80012b8 <_vNutComm_SPI_Enable>
			_vNutComm_I2C_Enable();
 8000b5c:	f000 fbc4 	bl	80012e8 <_vNutComm_I2C_Enable>
			_vNutComm_CAN_Enable();
 8000b60:	f000 fbda 	bl	8001318 <_vNutComm_CAN_Enable>
			return;
 8000b64:	e2c2      	b.n	80010ec <vNut_loop+0x6ac>
		}
		/* Receive the payload */
		data_length = length;
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	607b      	str	r3, [r7, #4]
		tempptr = rx_buffer;
 8000b6a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ce0 <vNut_loop+0x2a0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	613b      	str	r3, [r7, #16]
		while (length) {
 8000b70:	e03d      	b.n	8000bee <vNut_loop+0x1ae>
			if (length < comm_max_batch_size) {
 8000b72:	4b59      	ldr	r3, [pc, #356]	@ (8000cd8 <vNut_loop+0x298>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d20a      	bcs.n	8000b94 <vNut_loop+0x154>
				HAL_UART_Receive(&NUT_UART, tempptr, length, 1000);
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b86:	6939      	ldr	r1, [r7, #16]
 8000b88:	484e      	ldr	r0, [pc, #312]	@ (8000cc4 <vNut_loop+0x284>)
 8000b8a:	f005 fffe 	bl	8006b8a <HAL_UART_Receive>
				length = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e02c      	b.n	8000bee <vNut_loop+0x1ae>
			} else {
				if (HAL_UART_Receive(&NUT_UART, tempptr, comm_max_batch_size, 1000) == HAL_TIMEOUT) {
 8000b94:	4b50      	ldr	r3, [pc, #320]	@ (8000cd8 <vNut_loop+0x298>)
 8000b96:	881a      	ldrh	r2, [r3, #0]
 8000b98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b9c:	6939      	ldr	r1, [r7, #16]
 8000b9e:	4849      	ldr	r0, [pc, #292]	@ (8000cc4 <vNut_loop+0x284>)
 8000ba0:	f005 fff3 	bl	8006b8a <HAL_UART_Receive>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d115      	bne.n	8000bd6 <vNut_loop+0x196>
					status = NUT_ERROR;
 8000baa:	4b49      	ldr	r3, [pc, #292]	@ (8000cd0 <vNut_loop+0x290>)
 8000bac:	2202      	movs	r2, #2
 8000bae:	701a      	strb	r2, [r3, #0]
					error = NUT_ERROR_TIMEOUT;
 8000bb0:	4b48      	ldr	r3, [pc, #288]	@ (8000cd4 <vNut_loop+0x294>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
					/* Send error package on timeout */
					error_header[1] = NUT_ERROR_TIMEOUT;
 8000bb6:	4b49      	ldr	r3, [pc, #292]	@ (8000cdc <vNut_loop+0x29c>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	705a      	strb	r2, [r3, #1]
					HAL_UART_Transmit(&NUT_UART, error_header, 6, 100);
 8000bbc:	2364      	movs	r3, #100	@ 0x64
 8000bbe:	2206      	movs	r2, #6
 8000bc0:	4946      	ldr	r1, [pc, #280]	@ (8000cdc <vNut_loop+0x29c>)
 8000bc2:	4840      	ldr	r0, [pc, #256]	@ (8000cc4 <vNut_loop+0x284>)
 8000bc4:	f005 ff58 	bl	8006a78 <HAL_UART_Transmit>
					/* And just return */
					/* Enable other interfaces */
					_vNutComm_SPI_Enable();
 8000bc8:	f000 fb76 	bl	80012b8 <_vNutComm_SPI_Enable>
					_vNutComm_I2C_Enable();
 8000bcc:	f000 fb8c 	bl	80012e8 <_vNutComm_I2C_Enable>
					_vNutComm_CAN_Enable();
 8000bd0:	f000 fba2 	bl	8001318 <_vNutComm_CAN_Enable>
					return;
 8000bd4:	e28a      	b.n	80010ec <vNut_loop+0x6ac>
				}
				tempptr += comm_max_batch_size;
 8000bd6:	4b40      	ldr	r3, [pc, #256]	@ (8000cd8 <vNut_loop+0x298>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4413      	add	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
				length -= comm_max_batch_size;
 8000be2:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd8 <vNut_loop+0x298>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	1a9b      	subs	r3, r3, r2
 8000bec:	617b      	str	r3, [r7, #20]
		while (length) {
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1be      	bne.n	8000b72 <vNut_loop+0x132>
			}
		}
		/* Process the command and give feedback */
		if (cmd_program) {
 8000bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ce4 <vNut_loop+0x2a4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 8096 	beq.w	8000d2a <vNut_loop+0x2ea>
			status = cmd_program(rx_buffer, data_length, tx_buffer, &response_length, NUT_BUFFER_SIZE);
 8000bfe:	4b39      	ldr	r3, [pc, #228]	@ (8000ce4 <vNut_loop+0x2a4>)
 8000c00:	681c      	ldr	r4, [r3, #0]
 8000c02:	4b37      	ldr	r3, [pc, #220]	@ (8000ce0 <vNut_loop+0x2a0>)
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	4b38      	ldr	r3, [pc, #224]	@ (8000ce8 <vNut_loop+0x2a8>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c10:	9100      	str	r1, [sp, #0]
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	47a0      	blx	r4
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <vNut_loop+0x290>)
 8000c1c:	701a      	strb	r2, [r3, #0]
			/* Send response package according to response length */
			if (response_length > NUT_BUFFER_SIZE) {
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c24:	d90f      	bls.n	8000c46 <vNut_loop+0x206>
				error_header[1] = NUT_ERROR_PAYLOAD_SIZE;
 8000c26:	4b2d      	ldr	r3, [pc, #180]	@ (8000cdc <vNut_loop+0x29c>)
 8000c28:	2203      	movs	r2, #3
 8000c2a:	705a      	strb	r2, [r3, #1]
				HAL_UART_Transmit(&NUT_UART, error_header, 6, 100);
 8000c2c:	2364      	movs	r3, #100	@ 0x64
 8000c2e:	2206      	movs	r2, #6
 8000c30:	492a      	ldr	r1, [pc, #168]	@ (8000cdc <vNut_loop+0x29c>)
 8000c32:	4824      	ldr	r0, [pc, #144]	@ (8000cc4 <vNut_loop+0x284>)
 8000c34:	f005 ff20 	bl	8006a78 <HAL_UART_Transmit>
				/* Enable other interfaces */
				_vNutComm_SPI_Enable();
 8000c38:	f000 fb3e 	bl	80012b8 <_vNutComm_SPI_Enable>
				_vNutComm_I2C_Enable();
 8000c3c:	f000 fb54 	bl	80012e8 <_vNutComm_I2C_Enable>
				_vNutComm_CAN_Enable();
 8000c40:	f000 fb6a 	bl	8001318 <_vNutComm_CAN_Enable>
				return;
 8000c44:	e252      	b.n	80010ec <vNut_loop+0x6ac>
			} else {
				/* Prepare header */
				if (status == NUT_OK) {
 8000c46:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <vNut_loop+0x290>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d106      	bne.n	8000c5c <vNut_loop+0x21c>
					tx_header[0] = NUT_OK;
 8000c4e:	4b27      	ldr	r3, [pc, #156]	@ (8000cec <vNut_loop+0x2ac>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					tx_header[1] = 0;
 8000c54:	4b25      	ldr	r3, [pc, #148]	@ (8000cec <vNut_loop+0x2ac>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	705a      	strb	r2, [r3, #1]
 8000c5a:	e005      	b.n	8000c68 <vNut_loop+0x228>
				} else {
					tx_header[0] = NUT_ERROR;
 8000c5c:	4b23      	ldr	r3, [pc, #140]	@ (8000cec <vNut_loop+0x2ac>)
 8000c5e:	2202      	movs	r2, #2
 8000c60:	701a      	strb	r2, [r3, #0]
					tx_header[1] = NUT_ERROR_USER_CODE;
 8000c62:	4b22      	ldr	r3, [pc, #136]	@ (8000cec <vNut_loop+0x2ac>)
 8000c64:	2204      	movs	r2, #4
 8000c66:	705a      	strb	r2, [r3, #1]
				}
				tx_header[2] = 0x0FF & (response_length >> 24);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	0e1b      	lsrs	r3, r3, #24
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cec <vNut_loop+0x2ac>)
 8000c70:	709a      	strb	r2, [r3, #2]
				tx_header[3] = 0x0FF & (response_length >> 16);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	0c1b      	lsrs	r3, r3, #16
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <vNut_loop+0x2ac>)
 8000c7a:	70da      	strb	r2, [r3, #3]
				tx_header[4] = 0x0FF & (response_length >> 8);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	0a1b      	lsrs	r3, r3, #8
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <vNut_loop+0x2ac>)
 8000c84:	711a      	strb	r2, [r3, #4]
				tx_header[5] = 0x0FF & (response_length);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <vNut_loop+0x2ac>)
 8000c8c:	715a      	strb	r2, [r3, #5]
				/* Send the header */
				HAL_UART_Transmit(&NUT_UART, tx_header, 6, 100);
 8000c8e:	2364      	movs	r3, #100	@ 0x64
 8000c90:	2206      	movs	r2, #6
 8000c92:	4916      	ldr	r1, [pc, #88]	@ (8000cec <vNut_loop+0x2ac>)
 8000c94:	480b      	ldr	r0, [pc, #44]	@ (8000cc4 <vNut_loop+0x284>)
 8000c96:	f005 feef 	bl	8006a78 <HAL_UART_Transmit>
				/* Then send the payload */
				tempptr = tx_buffer;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <vNut_loop+0x2a8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
				while (response_length) {
 8000ca0:	e039      	b.n	8000d16 <vNut_loop+0x2d6>
					if (response_length < comm_max_batch_size) {
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <vNut_loop+0x298>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d920      	bls.n	8000cf0 <vNut_loop+0x2b0>
						HAL_UART_Transmit(&NUT_UART, tempptr, response_length, 1000);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb6:	6939      	ldr	r1, [r7, #16]
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <vNut_loop+0x284>)
 8000cba:	f005 fedd 	bl	8006a78 <HAL_UART_Transmit>
						response_length = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	e028      	b.n	8000d16 <vNut_loop+0x2d6>
 8000cc4:	20000158 	.word	0x20000158
 8000cc8:	20001278 	.word	0x20001278
 8000ccc:	20001279 	.word	0x20001279
 8000cd0:	2000026c 	.word	0x2000026c
 8000cd4:	2000026d 	.word	0x2000026d
 8000cd8:	20002280 	.word	0x20002280
 8000cdc:	20000014 	.word	0x20000014
 8000ce0:	20000010 	.word	0x20000010
 8000ce4:	20000268 	.word	0x20000268
 8000ce8:	2000000c 	.word	0x2000000c
 8000cec:	20000270 	.word	0x20000270
					} else {
						HAL_UART_Transmit(&NUT_UART, tempptr, comm_max_batch_size, 1000);
 8000cf0:	4b9e      	ldr	r3, [pc, #632]	@ (8000f6c <vNut_loop+0x52c>)
 8000cf2:	881a      	ldrh	r2, [r3, #0]
 8000cf4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf8:	6939      	ldr	r1, [r7, #16]
 8000cfa:	489d      	ldr	r0, [pc, #628]	@ (8000f70 <vNut_loop+0x530>)
 8000cfc:	f005 febc 	bl	8006a78 <HAL_UART_Transmit>
						tempptr += comm_max_batch_size;
 8000d00:	4b9a      	ldr	r3, [pc, #616]	@ (8000f6c <vNut_loop+0x52c>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4413      	add	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
						response_length -= comm_max_batch_size;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	4a97      	ldr	r2, [pc, #604]	@ (8000f6c <vNut_loop+0x52c>)
 8000d10:	8812      	ldrh	r2, [r2, #0]
 8000d12:	1a9b      	subs	r3, r3, r2
 8000d14:	603b      	str	r3, [r7, #0]
				while (response_length) {
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1c2      	bne.n	8000ca2 <vNut_loop+0x262>
					}
				}
				/* Enable other interfaces */
				_vNutComm_SPI_Enable();
 8000d1c:	f000 facc 	bl	80012b8 <_vNutComm_SPI_Enable>
				_vNutComm_I2C_Enable();
 8000d20:	f000 fae2 	bl	80012e8 <_vNutComm_I2C_Enable>
				_vNutComm_CAN_Enable();
 8000d24:	f000 faf8 	bl	8001318 <_vNutComm_CAN_Enable>
				return;
 8000d28:	e1e0      	b.n	80010ec <vNut_loop+0x6ac>
			}
		}
		/* Command not found, return error */
		else {
			error_header[1] = NUT_ERROR_CMD_UNKNOWN;
 8000d2a:	4b92      	ldr	r3, [pc, #584]	@ (8000f74 <vNut_loop+0x534>)
 8000d2c:	2206      	movs	r2, #6
 8000d2e:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit(&NUT_UART, error_header, 6, 100);
 8000d30:	2364      	movs	r3, #100	@ 0x64
 8000d32:	2206      	movs	r2, #6
 8000d34:	498f      	ldr	r1, [pc, #572]	@ (8000f74 <vNut_loop+0x534>)
 8000d36:	488e      	ldr	r0, [pc, #568]	@ (8000f70 <vNut_loop+0x530>)
 8000d38:	f005 fe9e 	bl	8006a78 <HAL_UART_Transmit>
			/* Enable other interfaces */
			_vNutComm_SPI_Enable();
 8000d3c:	f000 fabc 	bl	80012b8 <_vNutComm_SPI_Enable>
			_vNutComm_I2C_Enable();
 8000d40:	f000 fad2 	bl	80012e8 <_vNutComm_I2C_Enable>
			_vNutComm_CAN_Enable();
 8000d44:	f000 fae8 	bl	8001318 <_vNutComm_CAN_Enable>
			return;
 8000d48:	e1d0      	b.n	80010ec <vNut_loop+0x6ac>
		}
	}

	/* Check SPI */
//	else if (0) {
	else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_RESET) {
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d50:	f003 fa96 	bl	8004280 <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f040 81c8 	bne.w	80010ec <vNut_loop+0x6ac>
		/* Clear Internal SS */
		NUT_SPI.Instance->CR1 &= ~SPI_CR1_SSI;
 8000d5c:	4b86      	ldr	r3, [pc, #536]	@ (8000f78 <vNut_loop+0x538>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b85      	ldr	r3, [pc, #532]	@ (8000f78 <vNut_loop+0x538>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000d6a:	601a      	str	r2, [r3, #0]
		/* Disable other interfaces */
		_vNutComm_UART_Disable();
 8000d6c:	f000 fa4c 	bl	8001208 <_vNutComm_UART_Disable>
		_vNutComm_I2C_Disable();
 8000d70:	f000 fa6a 	bl	8001248 <_vNutComm_I2C_Disable>
		_vNutComm_CAN_Disable();
 8000d74:	f000 fa78 	bl	8001268 <_vNutComm_CAN_Disable>
		/* Poll for header */
		for (i = 0; i < 8;) {
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	e01f      	b.n	8000dbe <vNut_loop+0x37e>
			retstatus = HAL_SPI_Receive(&NUT_SPI, rx_header + i, 1, 10);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4a7e      	ldr	r2, [pc, #504]	@ (8000f7c <vNut_loop+0x53c>)
 8000d82:	1899      	adds	r1, r3, r2
 8000d84:	230a      	movs	r3, #10
 8000d86:	2201      	movs	r2, #1
 8000d88:	487b      	ldr	r0, [pc, #492]	@ (8000f78 <vNut_loop+0x538>)
 8000d8a:	f005 f914 	bl	8005fb6 <HAL_SPI_Receive>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	72fb      	strb	r3, [r7, #11]
			if (retstatus == HAL_OK) {
 8000d92:	7afb      	ldrb	r3, [r7, #11]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d103      	bne.n	8000da0 <vNut_loop+0x360>
				i++;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	e00e      	b.n	8000dbe <vNut_loop+0x37e>
			}
			/* if CS is released midway (in case of timeout), block if CS is held low */
			else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8000da0:	2102      	movs	r1, #2
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da6:	f003 fa6b 	bl	8004280 <HAL_GPIO_ReadPin>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d106      	bne.n	8000dbe <vNut_loop+0x37e>
				status = NUT_WARNING;
 8000db0:	4b73      	ldr	r3, [pc, #460]	@ (8000f80 <vNut_loop+0x540>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
				error = NUT_ERROR_SPI_ABORTED;
 8000db6:	4b73      	ldr	r3, [pc, #460]	@ (8000f84 <vNut_loop+0x544>)
 8000db8:	2205      	movs	r2, #5
 8000dba:	701a      	strb	r2, [r3, #0]
				goto Fuck_SPI;
 8000dbc:	e17e      	b.n	80010bc <vNut_loop+0x67c>
		for (i = 0; i < 8;) {
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b07      	cmp	r3, #7
 8000dc2:	d9dc      	bls.n	8000d7e <vNut_loop+0x33e>
			}
		}
		/* Decode header */
		length = _uNutComm_DecodeHeader();
 8000dc4:	f7ff fd6e 	bl	80008a4 <_uNutComm_DecodeHeader>
 8000dc8:	6178      	str	r0, [r7, #20]
		/* If ERROR occurred, prepare to send error package */
		if (status == NUT_ERROR) {
 8000dca:	4b6d      	ldr	r3, [pc, #436]	@ (8000f80 <vNut_loop+0x540>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d14f      	bne.n	8000e72 <vNut_loop+0x432>
			/* Wait until the other side to finish transmission */
			for (i = 0; i < length;) {
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	e01e      	b.n	8000e16 <vNut_loop+0x3d6>
				retstatus = HAL_SPI_Receive(&NUT_SPI, rx_buffer, 1, 10);
 8000dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8000f88 <vNut_loop+0x548>)
 8000dda:	6819      	ldr	r1, [r3, #0]
 8000ddc:	230a      	movs	r3, #10
 8000dde:	2201      	movs	r2, #1
 8000de0:	4865      	ldr	r0, [pc, #404]	@ (8000f78 <vNut_loop+0x538>)
 8000de2:	f005 f8e8 	bl	8005fb6 <HAL_SPI_Receive>
 8000de6:	4603      	mov	r3, r0
 8000de8:	72fb      	strb	r3, [r7, #11]
				if (retstatus == HAL_OK) {
 8000dea:	7afb      	ldrb	r3, [r7, #11]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d103      	bne.n	8000df8 <vNut_loop+0x3b8>
					i++;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3301      	adds	r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	e00e      	b.n	8000e16 <vNut_loop+0x3d6>
				}
				/* if CS is released midway (in case of timeout), block if CS is held low */
				else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8000df8:	2102      	movs	r1, #2
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfe:	f003 fa3f 	bl	8004280 <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d106      	bne.n	8000e16 <vNut_loop+0x3d6>
					status = NUT_WARNING;
 8000e08:	4b5d      	ldr	r3, [pc, #372]	@ (8000f80 <vNut_loop+0x540>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
					error = NUT_ERROR_SPI_ABORTED;
 8000e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8000f84 <vNut_loop+0x544>)
 8000e10:	2205      	movs	r2, #5
 8000e12:	701a      	strb	r2, [r3, #0]
					goto Fuck_SPI;
 8000e14:	e152      	b.n	80010bc <vNut_loop+0x67c>
			for (i = 0; i < length;) {
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d3dc      	bcc.n	8000dd8 <vNut_loop+0x398>
				}
			}
			/* Send error package */
			error_header[1] = NUT_ERROR_PAYLOAD_SIZE;
 8000e1e:	4b55      	ldr	r3, [pc, #340]	@ (8000f74 <vNut_loop+0x534>)
 8000e20:	2203      	movs	r2, #3
 8000e22:	705a      	strb	r2, [r3, #1]
			for (i = 0; i < 6;) {
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	e01f      	b.n	8000e6a <vNut_loop+0x42a>
				retstatus = HAL_SPI_Transmit(&NUT_SPI, error_header + i, 1, 10);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4a51      	ldr	r2, [pc, #324]	@ (8000f74 <vNut_loop+0x534>)
 8000e2e:	1899      	adds	r1, r3, r2
 8000e30:	230a      	movs	r3, #10
 8000e32:	2201      	movs	r2, #1
 8000e34:	4850      	ldr	r0, [pc, #320]	@ (8000f78 <vNut_loop+0x538>)
 8000e36:	f004 ff48 	bl	8005cca <HAL_SPI_Transmit>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	72fb      	strb	r3, [r7, #11]
				if (retstatus == HAL_OK) {
 8000e3e:	7afb      	ldrb	r3, [r7, #11]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d103      	bne.n	8000e4c <vNut_loop+0x40c>
					i++;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3301      	adds	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	e00e      	b.n	8000e6a <vNut_loop+0x42a>
				}
				/* if CS is released midway (in case of timeout), block if CS is held low */
				else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e52:	f003 fa15 	bl	8004280 <HAL_GPIO_ReadPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d106      	bne.n	8000e6a <vNut_loop+0x42a>
					status = NUT_WARNING;
 8000e5c:	4b48      	ldr	r3, [pc, #288]	@ (8000f80 <vNut_loop+0x540>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
					error = NUT_ERROR_SPI_ABORTED;
 8000e62:	4b48      	ldr	r3, [pc, #288]	@ (8000f84 <vNut_loop+0x544>)
 8000e64:	2205      	movs	r2, #5
 8000e66:	701a      	strb	r2, [r3, #0]
					goto Fuck_SPI;
 8000e68:	e128      	b.n	80010bc <vNut_loop+0x67c>
			for (i = 0; i < 6;) {
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2b05      	cmp	r3, #5
 8000e6e:	d9dc      	bls.n	8000e2a <vNut_loop+0x3ea>
				}
			}
			/* And just return */
			goto Fuck_SPI;
 8000e70:	e124      	b.n	80010bc <vNut_loop+0x67c>
		}
		/* Receive the payload */
		data_length = length;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	607b      	str	r3, [r7, #4]
		tempptr = rx_buffer;
 8000e76:	4b44      	ldr	r3, [pc, #272]	@ (8000f88 <vNut_loop+0x548>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]
		for (i = 0; length;) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	e023      	b.n	8000eca <vNut_loop+0x48a>
			retstatus = HAL_SPI_Receive(&NUT_SPI, rx_buffer + i, 1, 10);
 8000e82:	4b41      	ldr	r3, [pc, #260]	@ (8000f88 <vNut_loop+0x548>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	18d1      	adds	r1, r2, r3
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	483a      	ldr	r0, [pc, #232]	@ (8000f78 <vNut_loop+0x538>)
 8000e90:	f005 f891 	bl	8005fb6 <HAL_SPI_Receive>
 8000e94:	4603      	mov	r3, r0
 8000e96:	72fb      	strb	r3, [r7, #11]
			if (retstatus == HAL_OK) {
 8000e98:	7afb      	ldrb	r3, [r7, #11]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <vNut_loop+0x46c>
				length--;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
				i++;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	e00e      	b.n	8000eca <vNut_loop+0x48a>
			}
			/* if CS is released midway (in case of timeout), block if CS is held low */
			else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8000eac:	2102      	movs	r1, #2
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb2:	f003 f9e5 	bl	8004280 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d106      	bne.n	8000eca <vNut_loop+0x48a>
				status = NUT_WARNING;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	@ (8000f80 <vNut_loop+0x540>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
				error = NUT_ERROR_SPI_ABORTED;
 8000ec2:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <vNut_loop+0x544>)
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	701a      	strb	r2, [r3, #0]
				goto Fuck_SPI;
 8000ec8:	e0f8      	b.n	80010bc <vNut_loop+0x67c>
		for (i = 0; length;) {
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1d8      	bne.n	8000e82 <vNut_loop+0x442>
			}
		}
		/* Process the command and give feedback */
		if (cmd_program) {
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f8c <vNut_loop+0x54c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80c7 	beq.w	8001068 <vNut_loop+0x628>
			status = cmd_program(rx_buffer, data_length, tx_buffer, &response_length, NUT_BUFFER_SIZE);
 8000eda:	4b2c      	ldr	r3, [pc, #176]	@ (8000f8c <vNut_loop+0x54c>)
 8000edc:	681c      	ldr	r4, [r3, #0]
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <vNut_loop+0x548>)
 8000ee0:	6818      	ldr	r0, [r3, #0]
 8000ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f90 <vNut_loop+0x550>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eec:	9100      	str	r1, [sp, #0]
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	47a0      	blx	r4
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <vNut_loop+0x540>)
 8000ef8:	701a      	strb	r2, [r3, #0]
			/* Send response package according to response length */
			if (response_length > NUT_BUFFER_SIZE) {
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f00:	d929      	bls.n	8000f56 <vNut_loop+0x516>
				error_header[1] = NUT_ERROR_PAYLOAD_SIZE;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <vNut_loop+0x534>)
 8000f04:	2203      	movs	r2, #3
 8000f06:	705a      	strb	r2, [r3, #1]
				for (i = 0; i < 6;) {
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e01f      	b.n	8000f4e <vNut_loop+0x50e>
					retstatus = HAL_SPI_Transmit(&NUT_SPI, error_header + i, 1, 10);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4a18      	ldr	r2, [pc, #96]	@ (8000f74 <vNut_loop+0x534>)
 8000f12:	1899      	adds	r1, r3, r2
 8000f14:	230a      	movs	r3, #10
 8000f16:	2201      	movs	r2, #1
 8000f18:	4817      	ldr	r0, [pc, #92]	@ (8000f78 <vNut_loop+0x538>)
 8000f1a:	f004 fed6 	bl	8005cca <HAL_SPI_Transmit>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	72fb      	strb	r3, [r7, #11]
					if (retstatus == HAL_OK) {
 8000f22:	7afb      	ldrb	r3, [r7, #11]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d103      	bne.n	8000f30 <vNut_loop+0x4f0>
						i++;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	e00e      	b.n	8000f4e <vNut_loop+0x50e>
					}
					/* if CS is released midway (in case of timeout), block if CS is held low */
					else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8000f30:	2102      	movs	r1, #2
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f36:	f003 f9a3 	bl	8004280 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d106      	bne.n	8000f4e <vNut_loop+0x50e>
						status = NUT_WARNING;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <vNut_loop+0x540>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
						error = NUT_ERROR_SPI_ABORTED;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <vNut_loop+0x544>)
 8000f48:	2205      	movs	r2, #5
 8000f4a:	701a      	strb	r2, [r3, #0]
						goto Fuck_SPI;
 8000f4c:	e0b6      	b.n	80010bc <vNut_loop+0x67c>
				for (i = 0; i < 6;) {
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	d9dc      	bls.n	8000f0e <vNut_loop+0x4ce>
					}
				}
				goto Fuck_SPI;
 8000f54:	e0b2      	b.n	80010bc <vNut_loop+0x67c>
			} else {
				/* Prepare header */
				if (status == NUT_OK) {
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <vNut_loop+0x540>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d11c      	bne.n	8000f98 <vNut_loop+0x558>
					tx_header[0] = NUT_OK;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <vNut_loop+0x554>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
					tx_header[1] = 0;
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <vNut_loop+0x554>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	705a      	strb	r2, [r3, #1]
 8000f6a:	e01b      	b.n	8000fa4 <vNut_loop+0x564>
 8000f6c:	20002280 	.word	0x20002280
 8000f70:	20000158 	.word	0x20000158
 8000f74:	20000014 	.word	0x20000014
 8000f78:	200000f4 	.word	0x200000f4
 8000f7c:	20001278 	.word	0x20001278
 8000f80:	2000026c 	.word	0x2000026c
 8000f84:	2000026d 	.word	0x2000026d
 8000f88:	20000010 	.word	0x20000010
 8000f8c:	20000268 	.word	0x20000268
 8000f90:	2000000c 	.word	0x2000000c
 8000f94:	20000270 	.word	0x20000270
				} else {
					tx_header[0] = NUT_ERROR;
 8000f98:	4b56      	ldr	r3, [pc, #344]	@ (80010f4 <vNut_loop+0x6b4>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
					tx_header[1] = NUT_ERROR_USER_CODE;
 8000f9e:	4b55      	ldr	r3, [pc, #340]	@ (80010f4 <vNut_loop+0x6b4>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	705a      	strb	r2, [r3, #1]
				}
				tx_header[2] = 0x0FF & (response_length >> 24);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	0e1b      	lsrs	r3, r3, #24
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b52      	ldr	r3, [pc, #328]	@ (80010f4 <vNut_loop+0x6b4>)
 8000fac:	709a      	strb	r2, [r3, #2]
				tx_header[3] = 0x0FF & (response_length >> 16);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	0c1b      	lsrs	r3, r3, #16
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b4f      	ldr	r3, [pc, #316]	@ (80010f4 <vNut_loop+0x6b4>)
 8000fb6:	70da      	strb	r2, [r3, #3]
				tx_header[4] = 0x0FF & (response_length >> 8);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b4d      	ldr	r3, [pc, #308]	@ (80010f4 <vNut_loop+0x6b4>)
 8000fc0:	711a      	strb	r2, [r3, #4]
				tx_header[5] = 0x0FF & (response_length);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b4b      	ldr	r3, [pc, #300]	@ (80010f4 <vNut_loop+0x6b4>)
 8000fc8:	715a      	strb	r2, [r3, #5]
				/* Send the header */
				for (i = 0; i < 6;) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e01f      	b.n	8001010 <vNut_loop+0x5d0>
					retstatus = HAL_SPI_Transmit(&NUT_SPI, tx_header + i, 1, 10);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4a48      	ldr	r2, [pc, #288]	@ (80010f4 <vNut_loop+0x6b4>)
 8000fd4:	1899      	adds	r1, r3, r2
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4847      	ldr	r0, [pc, #284]	@ (80010f8 <vNut_loop+0x6b8>)
 8000fdc:	f004 fe75 	bl	8005cca <HAL_SPI_Transmit>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	72fb      	strb	r3, [r7, #11]
					if (retstatus == HAL_OK) {
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <vNut_loop+0x5b2>
						i++;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3301      	adds	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e00e      	b.n	8001010 <vNut_loop+0x5d0>
					}
					/* if CS is released midway (in case of timeout), block if CS is held low */
					else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff8:	f003 f942 	bl	8004280 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d106      	bne.n	8001010 <vNut_loop+0x5d0>
						status = NUT_WARNING;
 8001002:	4b3e      	ldr	r3, [pc, #248]	@ (80010fc <vNut_loop+0x6bc>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
						error = NUT_ERROR_SPI_ABORTED;
 8001008:	4b3d      	ldr	r3, [pc, #244]	@ (8001100 <vNut_loop+0x6c0>)
 800100a:	2205      	movs	r2, #5
 800100c:	701a      	strb	r2, [r3, #0]
						goto Fuck_SPI;
 800100e:	e055      	b.n	80010bc <vNut_loop+0x67c>
				for (i = 0; i < 6;) {
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d9dc      	bls.n	8000fd0 <vNut_loop+0x590>
					}
				}
				/* Then send the payload */
				for (i = 0; i < response_length;) {
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e020      	b.n	800105e <vNut_loop+0x61e>
					retstatus = HAL_SPI_Transmit(&NUT_SPI, tx_buffer + i, 1, 10);
 800101c:	4b39      	ldr	r3, [pc, #228]	@ (8001104 <vNut_loop+0x6c4>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	18d1      	adds	r1, r2, r3
 8001024:	230a      	movs	r3, #10
 8001026:	2201      	movs	r2, #1
 8001028:	4833      	ldr	r0, [pc, #204]	@ (80010f8 <vNut_loop+0x6b8>)
 800102a:	f004 fe4e 	bl	8005cca <HAL_SPI_Transmit>
 800102e:	4603      	mov	r3, r0
 8001030:	72fb      	strb	r3, [r7, #11]
					if (retstatus == HAL_OK) {
 8001032:	7afb      	ldrb	r3, [r7, #11]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d103      	bne.n	8001040 <vNut_loop+0x600>
						i++;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3301      	adds	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e00e      	b.n	800105e <vNut_loop+0x61e>
					}
					/* if CS is released midway (in case of timeout), block if CS is held low */
					else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8001040:	2102      	movs	r1, #2
 8001042:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001046:	f003 f91b 	bl	8004280 <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	d106      	bne.n	800105e <vNut_loop+0x61e>
						status = NUT_WARNING;
 8001050:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <vNut_loop+0x6bc>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
						error = NUT_ERROR_SPI_ABORTED;
 8001056:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <vNut_loop+0x6c0>)
 8001058:	2205      	movs	r2, #5
 800105a:	701a      	strb	r2, [r3, #0]
						goto Fuck_SPI;
 800105c:	e02e      	b.n	80010bc <vNut_loop+0x67c>
				for (i = 0; i < response_length;) {
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	429a      	cmp	r2, r3
 8001064:	d3da      	bcc.n	800101c <vNut_loop+0x5dc>
					}
				}
				goto Fuck_SPI;
 8001066:	e029      	b.n	80010bc <vNut_loop+0x67c>
			}
		}
		/* Command not found, return error */
		else {
			error_header[1] = NUT_ERROR_CMD_UNKNOWN;
 8001068:	4b27      	ldr	r3, [pc, #156]	@ (8001108 <vNut_loop+0x6c8>)
 800106a:	2206      	movs	r2, #6
 800106c:	705a      	strb	r2, [r3, #1]
			for (i = 0; i < 6;) {
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e01f      	b.n	80010b4 <vNut_loop+0x674>
				retstatus = HAL_SPI_Transmit(&NUT_SPI, error_header + i, 1, 10);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4a24      	ldr	r2, [pc, #144]	@ (8001108 <vNut_loop+0x6c8>)
 8001078:	1899      	adds	r1, r3, r2
 800107a:	230a      	movs	r3, #10
 800107c:	2201      	movs	r2, #1
 800107e:	481e      	ldr	r0, [pc, #120]	@ (80010f8 <vNut_loop+0x6b8>)
 8001080:	f004 fe23 	bl	8005cca <HAL_SPI_Transmit>
 8001084:	4603      	mov	r3, r0
 8001086:	72fb      	strb	r3, [r7, #11]
				if (retstatus == HAL_OK) {
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d103      	bne.n	8001096 <vNut_loop+0x656>
					i++;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3301      	adds	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e00e      	b.n	80010b4 <vNut_loop+0x674>
				}
				/* if CS is released midway (in case of timeout), block if CS is held low */
				else if (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_SET) {
 8001096:	2102      	movs	r1, #2
 8001098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109c:	f003 f8f0 	bl	8004280 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d106      	bne.n	80010b4 <vNut_loop+0x674>
					status = NUT_WARNING;
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <vNut_loop+0x6bc>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
					error = NUT_ERROR_SPI_ABORTED;
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <vNut_loop+0x6c0>)
 80010ae:	2205      	movs	r2, #5
 80010b0:	701a      	strb	r2, [r3, #0]
					goto Fuck_SPI;
 80010b2:	e003      	b.n	80010bc <vNut_loop+0x67c>
			for (i = 0; i < 6;) {
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d9dc      	bls.n	8001074 <vNut_loop+0x634>
				}
			}
			Fuck_SPI:
 80010ba:	bf00      	nop
			/* Wait until CSn releases */
			while (HAL_GPIO_ReadPin(NUT_SPI_CS_PORT, NUT_SPI_CS_PIN) == GPIO_PIN_RESET)
 80010bc:	bf00      	nop
 80010be:	2102      	movs	r1, #2
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c4:	f003 f8dc 	bl	8004280 <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f7      	beq.n	80010be <vNut_loop+0x67e>
				;
			/* Set Internal SS */
			NUT_SPI.Instance->CR1 |= SPI_CR1_SSI;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <vNut_loop+0x6b8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <vNut_loop+0x6b8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010dc:	601a      	str	r2, [r3, #0]
			/* Enable other interfaces */
			_vNutComm_UART_Enable();
 80010de:	f000 f8d3 	bl	8001288 <_vNutComm_UART_Enable>
			_vNutComm_I2C_Enable();
 80010e2:	f000 f901 	bl	80012e8 <_vNutComm_I2C_Enable>
			_vNutComm_CAN_Enable();
 80010e6:	f000 f917 	bl	8001318 <_vNutComm_CAN_Enable>
			return;
 80010ea:	bf00      	nop

	/* Check I2C */
	else if (1) {
		// TODO
	}
}
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd90      	pop	{r4, r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000270 	.word	0x20000270
 80010f8:	200000f4 	.word	0x200000f4
 80010fc:	2000026c 	.word	0x2000026c
 8001100:	2000026d 	.word	0x2000026d
 8001104:	2000000c 	.word	0x2000000c
 8001108:	20000014 	.word	0x20000014

0800110c <vNut_Init>:

void vNut_Init() {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	_vNutComm_Init();
 8001110:	f7ff fc88 	bl	8000a24 <_vNutComm_Init>
	vNut_LED(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f000 f835 	bl	8001184 <vNut_LED>
	HAL_Delay(200);
 800111a:	20c8      	movs	r0, #200	@ 0xc8
 800111c:	f002 fd00 	bl	8003b20 <HAL_Delay>
	vNut_LED(0);
 8001120:	2000      	movs	r0, #0
 8001122:	f000 f82f 	bl	8001184 <vNut_LED>
	HAL_Delay(200);
 8001126:	20c8      	movs	r0, #200	@ 0xc8
 8001128:	f002 fcfa 	bl	8003b20 <HAL_Delay>
	User_Init();
 800112c:	f002 fb82 	bl	8003834 <User_Init>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <vNut_Quiet>:

void vNut_Quiet() {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	_vNutComm_UART_Disable();
 8001138:	f000 f866 	bl	8001208 <_vNutComm_UART_Disable>
	_vNutComm_SPI_Disable();
 800113c:	f000 f874 	bl	8001228 <_vNutComm_SPI_Disable>
	_vNutComm_I2C_Disable();
 8001140:	f000 f882 	bl	8001248 <_vNutComm_I2C_Disable>
	_vNutComm_CAN_Disable();
 8001144:	f000 f890 	bl	8001268 <_vNutComm_CAN_Disable>
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;	// disable SysTick
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <vNut_Quiet+0x24>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a02      	ldr	r2, [pc, #8]	@ (8001158 <vNut_Quiet+0x24>)
 800114e:	f023 0302 	bic.w	r3, r3, #2
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	e000e010 	.word	0xe000e010

0800115c <vNut_unQuiet>:

void vNut_unQuiet() {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;	// enable SysTick
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <vNut_unQuiet+0x24>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a06      	ldr	r2, [pc, #24]	@ (8001180 <vNut_unQuiet+0x24>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	6013      	str	r3, [r2, #0]
	_vNutComm_UART_Enable();
 800116c:	f000 f88c 	bl	8001288 <_vNutComm_UART_Enable>
	_vNutComm_SPI_Enable();
 8001170:	f000 f8a2 	bl	80012b8 <_vNutComm_SPI_Enable>
	_vNutComm_I2C_Enable();
 8001174:	f000 f8b8 	bl	80012e8 <_vNutComm_I2C_Enable>
	_vNutComm_CAN_Enable();
 8001178:	f000 f8ce 	bl	8001318 <_vNutComm_CAN_Enable>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	e000e010 	.word	0xe000e010

08001184 <vNut_LED>:

/* Pin Manipulation */

void vNut_LED(uint8_t on) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NUT_LED_PORT, NUT_LED_PIN, on ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf0c      	ite	eq
 8001194:	2301      	moveq	r3, #1
 8001196:	2300      	movne	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	2140      	movs	r1, #64	@ 0x40
 800119e:	4803      	ldr	r0, [pc, #12]	@ (80011ac <vNut_LED+0x28>)
 80011a0:	f003 f886 	bl	80042b0 <HAL_GPIO_WritePin>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	48000400 	.word	0x48000400

080011b0 <vNut_IO_1>:

void vNut_IO_1(uint8_t set) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NUT_IO1_PORT, NUT_IO1_PIN, set ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	2180      	movs	r1, #128	@ 0x80
 80011ca:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <vNut_IO_1+0x28>)
 80011cc:	f003 f870 	bl	80042b0 <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	48000800 	.word	0x48000800

080011dc <vNut_IO_USER>:

void vNut_IO_3(uint8_t set) {
	HAL_GPIO_WritePin(NUT_IO3_PORT, NUT_IO3_PIN, set ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

void vNut_IO_USER(uint8_t set) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NUT_IO_USER_PORT, NUT_IO_USER_PIN, set ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	4803      	ldr	r0, [pc, #12]	@ (8001204 <vNut_IO_USER+0x28>)
 80011f8:	f003 f85a 	bl	80042b0 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	48000800 	.word	0x48000800

08001208 <_vNutComm_UART_Disable>:

/* Stop CLK of peripheral */
inline void _vNutComm_UART_Disable() {
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	__HAL_RCC_USART1_CLK_DISABLE();
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <_vNutComm_UART_Disable+0x1c>)
 800120e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <_vNutComm_UART_Disable+0x1c>)
 8001212:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001216:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000

08001228 <_vNutComm_SPI_Disable>:
inline void _vNutComm_SPI_Disable() {
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	__HAL_RCC_SPI1_CLK_DISABLE();
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <_vNutComm_SPI_Disable+0x1c>)
 800122e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <_vNutComm_SPI_Disable+0x1c>)
 8001232:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001236:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <_vNutComm_I2C_Disable>:
inline void _vNutComm_I2C_Disable() {
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
	__HAL_RCC_I2C1_CLK_DISABLE();
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <_vNutComm_I2C_Disable+0x1c>)
 800124e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <_vNutComm_I2C_Disable+0x1c>)
 8001252:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001256:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <_vNutComm_CAN_Disable>:
inline void _vNutComm_CAN_Disable() {
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
	__HAL_RCC_CAN1_CLK_DISABLE();
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <_vNutComm_CAN_Disable+0x1c>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <_vNutComm_CAN_Disable+0x1c>)
 8001272:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001276:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <_vNutComm_UART_Enable>:

/* Resume CLK of peripheral */
inline void _vNutComm_UART_Enable() {
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
	__HAL_RCC_USART1_CLK_ENABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <_vNutComm_UART_Enable+0x2c>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001292:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <_vNutComm_UART_Enable+0x2c>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001298:	6613      	str	r3, [r2, #96]	@ 0x60
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <_vNutComm_UART_Enable+0x2c>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <_vNutComm_SPI_Enable>:
inline void _vNutComm_SPI_Enable() {
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
	__HAL_RCC_SPI1_CLK_ENABLE();
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <_vNutComm_SPI_Enable+0x2c>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c2:	4a08      	ldr	r2, [pc, #32]	@ (80012e4 <_vNutComm_SPI_Enable+0x2c>)
 80012c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <_vNutComm_SPI_Enable+0x2c>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <_vNutComm_I2C_Enable>:
inline void _vNutComm_I2C_Enable() {
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
	__HAL_RCC_I2C1_CLK_ENABLE();
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <_vNutComm_I2C_Enable+0x2c>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f2:	4a08      	ldr	r2, [pc, #32]	@ (8001314 <_vNutComm_I2C_Enable+0x2c>)
 80012f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <_vNutComm_I2C_Enable+0x2c>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000

08001318 <_vNutComm_CAN_Enable>:
inline void _vNutComm_CAN_Enable() {
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
	__HAL_RCC_CAN1_CLK_ENABLE();
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <_vNutComm_CAN_Enable+0x2c>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <_vNutComm_CAN_Enable+0x2c>)
 8001324:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001328:	6593      	str	r3, [r2, #88]	@ 0x58
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <_vNutComm_CAN_Enable+0x2c>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <HAL_MspInit+0x44>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001352:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <HAL_MspInit+0x44>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6613      	str	r3, [r2, #96]	@ 0x60
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <HAL_MspInit+0x44>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_MspInit+0x44>)
 8001368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136a:	4a08      	ldr	r2, [pc, #32]	@ (800138c <HAL_MspInit+0x44>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001370:	6593      	str	r3, [r2, #88]	@ 0x58
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_MspInit+0x44>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	@ 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a18      	ldr	r2, [pc, #96]	@ (8001410 <HAL_CAN_MspInit+0x80>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d129      	bne.n	8001406 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_CAN_MspInit+0x84>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b6:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_CAN_MspInit+0x84>)
 80013b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_CAN_MspInit+0x84>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_CAN_MspInit+0x84>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a11      	ldr	r2, [pc, #68]	@ (8001414 <HAL_CAN_MspInit+0x84>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <HAL_CAN_MspInit+0x84>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013f4:	2309      	movs	r3, #9
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001402:	f002 fd93 	bl	8003f2c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	@ 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40006400 	.word	0x40006400
 8001414:	40021000 	.word	0x40021000

08001418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0ac      	sub	sp, #176	@ 0xb0
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2288      	movs	r2, #136	@ 0x88
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f006 f942 	bl	80076c2 <memset>
  if(hi2c->Instance==I2C2)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a21      	ldr	r2, [pc, #132]	@ (80014c8 <HAL_I2C_MspInit+0xb0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d13b      	bne.n	80014c0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fed9 	bl	800520c <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001460:	f7ff fa1a 	bl	8000898 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <HAL_I2C_MspInit+0xb4>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	4a18      	ldr	r2, [pc, #96]	@ (80014cc <HAL_I2C_MspInit+0xb4>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <HAL_I2C_MspInit+0xb4>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800147c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001484:	2312      	movs	r3, #18
 8001486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001496:	2304      	movs	r3, #4
 8001498:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014a0:	4619      	mov	r1, r3
 80014a2:	480b      	ldr	r0, [pc, #44]	@ (80014d0 <HAL_I2C_MspInit+0xb8>)
 80014a4:	f002 fd42 	bl	8003f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_I2C_MspInit+0xb4>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_I2C_MspInit+0xb4>)
 80014ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_I2C_MspInit+0xb4>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80014c0:	bf00      	nop
 80014c2:	37b0      	adds	r7, #176	@ 0xb0
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40005800 	.word	0x40005800
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48000400 	.word	0x48000400

080014d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <HAL_SPI_MspInit+0x7c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d128      	bne.n	8001548 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fa:	4a16      	ldr	r2, [pc, #88]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001500:	6593      	str	r3, [r2, #88]	@ 0x58
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001526:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001538:	2305      	movs	r3, #5
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <HAL_SPI_MspInit+0x84>)
 8001544:	f002 fcf2 	bl	8003f2c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40003800 	.word	0x40003800
 8001554:	40021000 	.word	0x40021000
 8001558:	48000400 	.word	0x48000400

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0ae      	sub	sp, #184	@ 0xb8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	2288      	movs	r2, #136	@ 0x88
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f006 f8a0 	bl	80076c2 <memset>
  if(huart->Instance==USART1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a43      	ldr	r2, [pc, #268]	@ (8001694 <HAL_UART_MspInit+0x138>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d13d      	bne.n	8001608 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800158c:	2301      	movs	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001590:	2300      	movs	r3, #0
 8001592:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fe37 	bl	800520c <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a4:	f7ff f978 	bl	8000898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ac:	4a3a      	ldr	r2, [pc, #232]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 80015ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80015b4:	4b38      	ldr	r3, [pc, #224]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c4:	4a34      	ldr	r2, [pc, #208]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015cc:	4b32      	ldr	r3, [pc, #200]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015d8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015f2:	2307      	movs	r3, #7
 80015f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015fc:	4619      	mov	r1, r3
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001602:	f002 fc93 	bl	8003f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001606:	e040      	b.n	800168a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a23      	ldr	r2, [pc, #140]	@ (800169c <HAL_UART_MspInit+0x140>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d13b      	bne.n	800168a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001612:	2302      	movs	r3, #2
 8001614:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001616:	2300      	movs	r3, #0
 8001618:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4618      	mov	r0, r3
 8001620:	f003 fdf4 	bl	800520c <HAL_RCCEx_PeriphCLKConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800162a:	f7ff f935 	bl	8000898 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800162e:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	4a19      	ldr	r2, [pc, #100]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 8001634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001638:	6593      	str	r3, [r2, #88]	@ 0x58
 800163a:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	4a13      	ldr	r2, [pc, #76]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800165e:	230c      	movs	r3, #12
 8001660:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001676:	2307      	movs	r3, #7
 8001678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001680:	4619      	mov	r1, r3
 8001682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001686:	f002 fc51 	bl	8003f2c <HAL_GPIO_Init>
}
 800168a:	bf00      	nop
 800168c:	37b8      	adds	r7, #184	@ 0xb8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40013800 	.word	0x40013800
 8001698:	40021000 	.word	0x40021000
 800169c:	40004400 	.word	0x40004400

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <NMI_Handler+0x4>

080016a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <MemManage_Handler+0x4>

080016b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f6:	f002 f9f3 	bl	8003ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <SystemInit+0x20>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170a:	4a05      	ldr	r2, [pc, #20]	@ (8001720 <SystemInit+0x20>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001724:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800175c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001728:	f7ff ffea 	bl	8001700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800172c:	480c      	ldr	r0, [pc, #48]	@ (8001760 <LoopForever+0x6>)
  ldr r1, =_edata
 800172e:	490d      	ldr	r1, [pc, #52]	@ (8001764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001730:	4a0d      	ldr	r2, [pc, #52]	@ (8001768 <LoopForever+0xe>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001744:	4c0a      	ldr	r4, [pc, #40]	@ (8001770 <LoopForever+0x16>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001752:	f005 ffbf 	bl	80076d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001756:	f7fe feaf 	bl	80004b8 <main>

0800175a <LoopForever>:

LoopForever:
    b LoopForever
 800175a:	e7fe      	b.n	800175a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800175c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001764:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001768:	0800800c 	.word	0x0800800c
  ldr r2, =_sbss
 800176c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001770:	2000464c 	.word	0x2000464c

08001774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <ADC1_2_IRQHandler>
	...

08001778 <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8001778:	b480      	push	{r7}
 800177a:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 800177e:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8001786:	2301      	movs	r3, #1
 8001788:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 800178c:	e02f      	b.n	80017ee <aes_gen_tables+0x76>
    {
        pow[i] = x;
 800178e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001792:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001796:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 800179a:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 800179e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 80017a2:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80017a6:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80017aa:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80017ae:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 80017b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = MBEDTLS_BYTE_0( x ^ XTIME( x ) );
 80017b6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80017ba:	b25a      	sxtb	r2, r3
 80017bc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80017c8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80017cc:	2900      	cmp	r1, #0
 80017ce:	d001      	beq.n	80017d4 <aes_gen_tables+0x5c>
 80017d0:	211b      	movs	r1, #27
 80017d2:	e000      	b.n	80017d6 <aes_gen_tables+0x5e>
 80017d4:	2100      	movs	r1, #0
 80017d6:	404b      	eors	r3, r1
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	4053      	eors	r3, r2
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 256; i++ )
 80017e4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80017e8:	3301      	adds	r3, #1
 80017ea:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80017ee:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80017f2:	2bff      	cmp	r3, #255	@ 0xff
 80017f4:	ddcb      	ble.n	800178e <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80017fc:	2301      	movs	r3, #1
 80017fe:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8001802:	e01d      	b.n	8001840 <aes_gen_tables+0xc8>
    {
        RCON[i] = (uint32_t) x;
 8001804:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8001808:	49d6      	ldr	r1, [pc, #856]	@ (8001b64 <aes_gen_tables+0x3ec>)
 800180a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = MBEDTLS_BYTE_0( XTIME( x ) );
 8001812:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	b25b      	sxtb	r3, r3
 800181a:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 800181e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001822:	2a00      	cmp	r2, #0
 8001824:	d001      	beq.n	800182a <aes_gen_tables+0xb2>
 8001826:	221b      	movs	r2, #27
 8001828:	e000      	b.n	800182c <aes_gen_tables+0xb4>
 800182a:	2200      	movs	r2, #0
 800182c:	4053      	eors	r3, r2
 800182e:	b25b      	sxtb	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8001836:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800183a:	3301      	adds	r3, #1
 800183c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8001840:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001844:	2b09      	cmp	r3, #9
 8001846:	dddd      	ble.n	8001804 <aes_gen_tables+0x8c>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8001848:	4bc7      	ldr	r3, [pc, #796]	@ (8001b68 <aes_gen_tables+0x3f0>)
 800184a:	2263      	movs	r2, #99	@ 0x63
 800184c:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 800184e:	4bc7      	ldr	r3, [pc, #796]	@ (8001b6c <aes_gen_tables+0x3f4>)
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

    for( i = 1; i < 256; i++ )
 8001856:	2301      	movs	r3, #1
 8001858:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 800185c:	e07e      	b.n	800195c <aes_gen_tables+0x1e4>
    {
        x = pow[255 - log[i]];
 800185e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001862:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001866:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 800186a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186e:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8001872:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001876:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800187a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        y  = x; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8001882:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001886:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 800188a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	b25a      	sxtb	r2, r3
 8001892:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001896:	11db      	asrs	r3, r3, #7
 8001898:	b25b      	sxtb	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b25b      	sxtb	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 80018a4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80018a8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80018ac:	4053      	eors	r3, r2
 80018ae:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 80018b2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	b25a      	sxtb	r2, r3
 80018ba:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80018be:	11db      	asrs	r3, r3, #7
 80018c0:	b25b      	sxtb	r3, r3
 80018c2:	4313      	orrs	r3, r2
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 80018cc:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80018d0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80018d4:	4053      	eors	r3, r2
 80018d6:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 80018da:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	b25a      	sxtb	r2, r3
 80018e2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80018e6:	11db      	asrs	r3, r3, #7
 80018e8:	b25b      	sxtb	r3, r3
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 80018f4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80018f8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80018fc:	4053      	eors	r3, r2
 80018fe:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8001902:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	b25a      	sxtb	r2, r3
 800190a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800190e:	11db      	asrs	r3, r3, #7
 8001910:	b25b      	sxtb	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b25b      	sxtb	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y ^ 0x63;
 800191c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001920:	f083 0363 	eor.w	r3, r3, #99	@ 0x63
 8001924:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8001928:	4053      	eors	r3, r2
 800192a:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        FSb[i] = (unsigned char) x;
 800192e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001932:	b2d9      	uxtb	r1, r3
 8001934:	4a8c      	ldr	r2, [pc, #560]	@ (8001b68 <aes_gen_tables+0x3f0>)
 8001936:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800193a:	4413      	add	r3, r2
 800193c:	460a      	mov	r2, r1
 800193e:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8001940:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001944:	b2d9      	uxtb	r1, r3
 8001946:	4a89      	ldr	r2, [pc, #548]	@ (8001b6c <aes_gen_tables+0x3f4>)
 8001948:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800194c:	4413      	add	r3, r2
 800194e:	460a      	mov	r2, r1
 8001950:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 8001952:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001956:	3301      	adds	r3, #1
 8001958:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 800195c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001960:	2bff      	cmp	r3, #255	@ 0xff
 8001962:	f77f af7c 	ble.w	800185e <aes_gen_tables+0xe6>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 800196c:	e13b      	b.n	8001be6 <aes_gen_tables+0x46e>
    {
        x = FSb[i];
 800196e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b68 <aes_gen_tables+0x3f0>)
 8001970:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001974:	4413      	add	r3, r2
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
        y = MBEDTLS_BYTE_0( XTIME( x ) );
 800197c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	b25b      	sxtb	r3, r3
 8001984:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8001988:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800198c:	2a00      	cmp	r2, #0
 800198e:	d001      	beq.n	8001994 <aes_gen_tables+0x21c>
 8001990:	221b      	movs	r2, #27
 8001992:	e000      	b.n	8001996 <aes_gen_tables+0x21e>
 8001994:	2200      	movs	r2, #0
 8001996:	4053      	eors	r3, r2
 8001998:	b25b      	sxtb	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        z = MBEDTLS_BYTE_0( y ^ x );
 80019a0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80019a4:	b25a      	sxtb	r2, r3
 80019a6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80019aa:	b25b      	sxtb	r3, r3
 80019ac:	4053      	eors	r3, r2
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 80019b6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80019ba:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 80019bc:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80019c0:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 80019c2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80019c6:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 80019c8:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 80019ca:	f8d7 3800 	ldr.w	r3, [r7, #2048]	@ 0x800
 80019ce:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 80019d0:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 80019d2:	4967      	ldr	r1, [pc, #412]	@ (8001b70 <aes_gen_tables+0x3f8>)
 80019d4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 80019dc:	4a64      	ldr	r2, [pc, #400]	@ (8001b70 <aes_gen_tables+0x3f8>)
 80019de:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	ea4f 6233 	mov.w	r2, r3, ror #24
 80019ea:	4962      	ldr	r1, [pc, #392]	@ (8001b74 <aes_gen_tables+0x3fc>)
 80019ec:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80019f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 80019f4:	4a5f      	ldr	r2, [pc, #380]	@ (8001b74 <aes_gen_tables+0x3fc>)
 80019f6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	ea4f 6233 	mov.w	r2, r3, ror #24
 8001a02:	495d      	ldr	r1, [pc, #372]	@ (8001b78 <aes_gen_tables+0x400>)
 8001a04:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 8001a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8001b78 <aes_gen_tables+0x400>)
 8001a0e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a16:	ea4f 6233 	mov.w	r2, r3, ror #24
 8001a1a:	4958      	ldr	r1, [pc, #352]	@ (8001b7c <aes_gen_tables+0x404>)
 8001a1c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 8001a24:	4a51      	ldr	r2, [pc, #324]	@ (8001b6c <aes_gen_tables+0x3f4>)
 8001a26:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001a32:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d020      	beq.n	8001a7c <aes_gen_tables+0x304>
 8001a3a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001a3e:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001a42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a44:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001a48:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001a4c:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8001a50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a54:	441a      	add	r2, r3
 8001a56:	4b4a      	ldr	r3, [pc, #296]	@ (8001b80 <aes_gen_tables+0x408>)
 8001a58:	fb83 1302 	smull	r1, r3, r3, r2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	11d9      	asrs	r1, r3, #7
 8001a60:	17d3      	asrs	r3, r2, #31
 8001a62:	1ac9      	subs	r1, r1, r3
 8001a64:	460b      	mov	r3, r1
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	1a5b      	subs	r3, r3, r1
 8001a6a:	1ad1      	subs	r1, r2, r3
 8001a6c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001a70:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001a74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	e000      	b.n	8001a7e <aes_gen_tables+0x306>
 8001a7c:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8001a7e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d020      	beq.n	8001ac8 <aes_gen_tables+0x350>
 8001a86:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001a8a:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001a8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a90:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001a94:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001a98:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8001a9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001aa0:	441a      	add	r2, r3
 8001aa2:	4b37      	ldr	r3, [pc, #220]	@ (8001b80 <aes_gen_tables+0x408>)
 8001aa4:	fb83 1302 	smull	r1, r3, r3, r2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	11d9      	asrs	r1, r3, #7
 8001aac:	17d3      	asrs	r3, r2, #31
 8001aae:	1ac9      	subs	r1, r1, r3
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	1a5b      	subs	r3, r3, r1
 8001ab6:	1ad1      	subs	r1, r2, r3
 8001ab8:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001abc:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001ac0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	e000      	b.n	8001aca <aes_gen_tables+0x352>
 8001ac8:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001aca:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8001acc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <aes_gen_tables+0x39e>
 8001ad4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001ad8:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ade:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001ae2:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001ae6:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8001aea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001aee:	441a      	add	r2, r3
 8001af0:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <aes_gen_tables+0x408>)
 8001af2:	fb83 1302 	smull	r1, r3, r3, r2
 8001af6:	4413      	add	r3, r2
 8001af8:	11d9      	asrs	r1, r3, #7
 8001afa:	17d3      	asrs	r3, r2, #31
 8001afc:	1ac9      	subs	r1, r1, r3
 8001afe:	460b      	mov	r3, r1
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	1a5b      	subs	r3, r3, r1
 8001b04:	1ad1      	subs	r1, r2, r3
 8001b06:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001b0a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001b0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b12:	041b      	lsls	r3, r3, #16
 8001b14:	e000      	b.n	8001b18 <aes_gen_tables+0x3a0>
 8001b16:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8001b18:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8001b1a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d030      	beq.n	8001b84 <aes_gen_tables+0x40c>
 8001b22:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001b26:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b2c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001b30:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8001b34:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8001b38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b3c:	441a      	add	r2, r3
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <aes_gen_tables+0x408>)
 8001b40:	fb83 1302 	smull	r1, r3, r3, r2
 8001b44:	4413      	add	r3, r2
 8001b46:	11d9      	asrs	r1, r3, #7
 8001b48:	17d3      	asrs	r3, r2, #31
 8001b4a:	1ac9      	subs	r1, r1, r3
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	1a5b      	subs	r3, r3, r1
 8001b52:	1ad1      	subs	r1, r2, r3
 8001b54:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001b58:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001b5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b60:	061b      	lsls	r3, r3, #24
 8001b62:	e010      	b.n	8001b86 <aes_gen_tables+0x40e>
 8001b64:	20004484 	.word	0x20004484
 8001b68:	20002284 	.word	0x20002284
 8001b6c:	20003384 	.word	0x20003384
 8001b70:	20002384 	.word	0x20002384
 8001b74:	20002784 	.word	0x20002784
 8001b78:	20002b84 	.word	0x20002b84
 8001b7c:	20002f84 	.word	0x20002f84
 8001b80:	80808081 	.word	0x80808081
 8001b84:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8001b86:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8001b8a:	491d      	ldr	r1, [pc, #116]	@ (8001c00 <aes_gen_tables+0x488>)
 8001b8c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 8001b94:	4a1a      	ldr	r2, [pc, #104]	@ (8001c00 <aes_gen_tables+0x488>)
 8001b96:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	ea4f 6233 	mov.w	r2, r3, ror #24
 8001ba2:	4918      	ldr	r1, [pc, #96]	@ (8001c04 <aes_gen_tables+0x48c>)
 8001ba4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 8001bac:	4a15      	ldr	r2, [pc, #84]	@ (8001c04 <aes_gen_tables+0x48c>)
 8001bae:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb6:	ea4f 6233 	mov.w	r2, r3, ror #24
 8001bba:	4913      	ldr	r1, [pc, #76]	@ (8001c08 <aes_gen_tables+0x490>)
 8001bbc:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 8001bc4:	4a10      	ldr	r2, [pc, #64]	@ (8001c08 <aes_gen_tables+0x490>)
 8001bc6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bce:	ea4f 6233 	mov.w	r2, r3, ror #24
 8001bd2:	490e      	ldr	r1, [pc, #56]	@ (8001c0c <aes_gen_tables+0x494>)
 8001bd4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 8001bdc:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001be0:	3301      	adds	r3, #1
 8001be2:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8001be6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001bea:	2bff      	cmp	r3, #255	@ 0xff
 8001bec:	f77f aebf 	ble.w	800196e <aes_gen_tables+0x1f6>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	f607 0714 	addw	r7, r7, #2068	@ 0x814
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	20003484 	.word	0x20003484
 8001c04:	20003884 	.word	0x20003884
 8001c08:	20003c84 	.word	0x20003c84
 8001c0c:	20004084 	.word	0x20004084

08001c10 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8001c18:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f005 fd4f 	bl	80076c2 <memset>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8001c3a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f001 fde4 	bl	800380c <mbedtls_platform_zeroize>
 8001c44:	e000      	b.n	8001c48 <mbedtls_aes_free+0x1c>
        return;
 8001c46:	bf00      	nop
}
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c62:	d012      	beq.n	8001c8a <mbedtls_aes_setkey_enc+0x3a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c6a:	d812      	bhi.n	8001c92 <mbedtls_aes_setkey_enc+0x42>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b80      	cmp	r3, #128	@ 0x80
 8001c70:	d003      	beq.n	8001c7a <mbedtls_aes_setkey_enc+0x2a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c76:	d004      	beq.n	8001c82 <mbedtls_aes_setkey_enc+0x32>
 8001c78:	e00b      	b.n	8001c92 <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	220a      	movs	r2, #10
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e00a      	b.n	8001c98 <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	220c      	movs	r2, #12
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e006      	b.n	8001c98 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	220e      	movs	r2, #14
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	e002      	b.n	8001c98 <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8001c92:	f06f 031f 	mvn.w	r3, #31
 8001c96:	e1c7      	b.n	8002028 <mbedtls_aes_setkey_enc+0x3d8>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8001c98:	4b8d      	ldr	r3, [pc, #564]	@ (8001ed0 <mbedtls_aes_setkey_enc+0x280>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d104      	bne.n	8001caa <mbedtls_aes_setkey_enc+0x5a>
    {
        aes_gen_tables();
 8001ca0:	f7ff fd6a 	bl	8001778 <aes_gen_tables>
        aes_init_done = 1;
 8001ca4:	4b8a      	ldr	r3, [pc, #552]	@ (8001ed0 <mbedtls_aes_setkey_enc+0x280>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3308      	adds	r3, #8
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e027      	b.n	8001d0c <mbedtls_aes_setkey_enc+0xbc>
    {
        RK[i] = MBEDTLS_GET_UINT32_LE( key, i << 2 );
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	3301      	adds	r3, #1
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	ea41 0203 	orr.w	r2, r1, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	440b      	add	r3, r1
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	041b      	lsls	r3, r3, #16
 8001ce8:	ea42 0103 	orr.w	r1, r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	061a      	lsls	r2, r3, #24
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	6938      	ldr	r0, [r7, #16]
 8001d00:	4403      	add	r3, r0
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d3d2      	bcc.n	8001cbc <mbedtls_aes_setkey_enc+0x6c>
    }

    switch( ctx->nr )
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b0e      	cmp	r3, #14
 8001d1c:	f000 80d4 	beq.w	8001ec8 <mbedtls_aes_setkey_enc+0x278>
 8001d20:	2b0e      	cmp	r3, #14
 8001d22:	f300 8180 	bgt.w	8002026 <mbedtls_aes_setkey_enc+0x3d6>
 8001d26:	2b0a      	cmp	r3, #10
 8001d28:	d002      	beq.n	8001d30 <mbedtls_aes_setkey_enc+0xe0>
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d05c      	beq.n	8001de8 <mbedtls_aes_setkey_enc+0x198>
 8001d2e:	e17a      	b.n	8002026 <mbedtls_aes_setkey_enc+0x3d6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	e054      	b.n	8001de0 <mbedtls_aes_setkey_enc+0x190>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4966      	ldr	r1, [pc, #408]	@ (8001ed4 <mbedtls_aes_setkey_enc+0x284>)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d42:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	320c      	adds	r2, #12
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	0a12      	lsrs	r2, r2, #8
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4a61      	ldr	r2, [pc, #388]	@ (8001ed8 <mbedtls_aes_setkey_enc+0x288>)
 8001d52:	5c52      	ldrb	r2, [r2, r1]
                RK[4]  = RK[0] ^ RCON[i] ^
 8001d54:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	330c      	adds	r3, #12
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4619      	mov	r1, r3
 8001d62:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed8 <mbedtls_aes_setkey_enc+0x288>)
 8001d64:	5c5b      	ldrb	r3, [r3, r1]
 8001d66:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 8001d68:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	330c      	adds	r3, #12
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0e1b      	lsrs	r3, r3, #24
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4619      	mov	r1, r3
 8001d76:	4b58      	ldr	r3, [pc, #352]	@ (8001ed8 <mbedtls_aes_setkey_enc+0x288>)
 8001d78:	5c5b      	ldrb	r3, [r3, r1]
 8001d7a:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 8001d7c:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[3] ) ] << 24 );
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	330c      	adds	r3, #12
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b53      	ldr	r3, [pc, #332]	@ (8001ed8 <mbedtls_aes_setkey_enc+0x288>)
 8001d8c:	5c9b      	ldrb	r3, [r3, r2]
 8001d8e:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 8001d94:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8001d96:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	6819      	ldr	r1, [r3, #0]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	3310      	adds	r3, #16
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	3314      	adds	r3, #20
 8001da8:	404a      	eors	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	3308      	adds	r3, #8
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	3314      	adds	r3, #20
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	3318      	adds	r3, #24
 8001dbc:	404a      	eors	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	330c      	adds	r3, #12
 8001dc4:	6819      	ldr	r1, [r3, #0]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	3318      	adds	r3, #24
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	331c      	adds	r3, #28
 8001dd0:	404a      	eors	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	3310      	adds	r3, #16
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b09      	cmp	r3, #9
 8001de4:	d9a7      	bls.n	8001d36 <mbedtls_aes_setkey_enc+0xe6>
            }
            break;
 8001de6:	e11e      	b.n	8002026 <mbedtls_aes_setkey_enc+0x3d6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e068      	b.n	8001ec0 <mbedtls_aes_setkey_enc+0x270>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4938      	ldr	r1, [pc, #224]	@ (8001ed4 <mbedtls_aes_setkey_enc+0x284>)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dfa:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	3214      	adds	r2, #20
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	0a12      	lsrs	r2, r2, #8
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	4611      	mov	r1, r2
 8001e08:	4a33      	ldr	r2, [pc, #204]	@ (8001ed8 <mbedtls_aes_setkey_enc+0x288>)
 8001e0a:	5c52      	ldrb	r2, [r2, r1]
                RK[6]  = RK[0] ^ RCON[i] ^
 8001e0c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	3314      	adds	r3, #20
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0c1b      	lsrs	r3, r3, #16
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed8 <mbedtls_aes_setkey_enc+0x288>)
 8001e1c:	5c5b      	ldrb	r3, [r3, r1]
 8001e1e:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 8001e20:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	3314      	adds	r3, #20
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0e1b      	lsrs	r3, r3, #24
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <mbedtls_aes_setkey_enc+0x288>)
 8001e30:	5c5b      	ldrb	r3, [r3, r1]
 8001e32:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 8001e34:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[5] ) ] << 24 );
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	3314      	adds	r3, #20
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b25      	ldr	r3, [pc, #148]	@ (8001ed8 <mbedtls_aes_setkey_enc+0x288>)
 8001e44:	5c9b      	ldrb	r3, [r3, r2]
 8001e46:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8001e4c:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 8001e4e:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	3304      	adds	r3, #4
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	3318      	adds	r3, #24
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	331c      	adds	r3, #28
 8001e60:	404a      	eors	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	3308      	adds	r3, #8
 8001e68:	6819      	ldr	r1, [r3, #0]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	331c      	adds	r3, #28
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	3320      	adds	r3, #32
 8001e74:	404a      	eors	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	330c      	adds	r3, #12
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	3320      	adds	r3, #32
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	3324      	adds	r3, #36	@ 0x24
 8001e88:	404a      	eors	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	3310      	adds	r3, #16
 8001e90:	6819      	ldr	r1, [r3, #0]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	3324      	adds	r3, #36	@ 0x24
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	3328      	adds	r3, #40	@ 0x28
 8001e9c:	404a      	eors	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	3314      	adds	r3, #20
 8001ea4:	6819      	ldr	r1, [r3, #0]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	3328      	adds	r3, #40	@ 0x28
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	332c      	adds	r3, #44	@ 0x2c
 8001eb0:	404a      	eors	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	3318      	adds	r3, #24
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b07      	cmp	r3, #7
 8001ec4:	d993      	bls.n	8001dee <mbedtls_aes_setkey_enc+0x19e>
            }
            break;
 8001ec6:	e0ae      	b.n	8002026 <mbedtls_aes_setkey_enc+0x3d6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e0a6      	b.n	800201c <mbedtls_aes_setkey_enc+0x3cc>
 8001ece:	bf00      	nop
 8001ed0:	200044ac 	.word	0x200044ac
 8001ed4:	20004484 	.word	0x20004484
 8001ed8:	20002284 	.word	0x20002284
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4953      	ldr	r1, [pc, #332]	@ (8002030 <mbedtls_aes_setkey_enc+0x3e0>)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ee8:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	321c      	adds	r2, #28
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	0a12      	lsrs	r2, r2, #8
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4a4f      	ldr	r2, [pc, #316]	@ (8002034 <mbedtls_aes_setkey_enc+0x3e4>)
 8001ef8:	5c52      	ldrb	r2, [r2, r1]
                RK[8]  = RK[0] ^ RCON[i] ^
 8001efa:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	331c      	adds	r3, #28
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0c1b      	lsrs	r3, r3, #16
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	4619      	mov	r1, r3
 8001f08:	4b4a      	ldr	r3, [pc, #296]	@ (8002034 <mbedtls_aes_setkey_enc+0x3e4>)
 8001f0a:	5c5b      	ldrb	r3, [r3, r1]
 8001f0c:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 8001f0e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	331c      	adds	r3, #28
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	0e1b      	lsrs	r3, r3, #24
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4b45      	ldr	r3, [pc, #276]	@ (8002034 <mbedtls_aes_setkey_enc+0x3e4>)
 8001f1e:	5c5b      	ldrb	r3, [r3, r1]
 8001f20:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 8001f22:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[7] ) ] << 24 );
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	331c      	adds	r3, #28
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b40      	ldr	r3, [pc, #256]	@ (8002034 <mbedtls_aes_setkey_enc+0x3e4>)
 8001f32:	5c9b      	ldrb	r3, [r3, r2]
 8001f34:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8001f3a:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 8001f3c:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	3304      	adds	r3, #4
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	3320      	adds	r3, #32
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	3324      	adds	r3, #36	@ 0x24
 8001f4e:	404a      	eors	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	3308      	adds	r3, #8
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	3324      	adds	r3, #36	@ 0x24
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	3328      	adds	r3, #40	@ 0x28
 8001f62:	404a      	eors	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	330c      	adds	r3, #12
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	3328      	adds	r3, #40	@ 0x28
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	332c      	adds	r3, #44	@ 0x2c
 8001f76:	404a      	eors	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	3310      	adds	r3, #16
 8001f7e:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	322c      	adds	r2, #44	@ 0x2c
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002034 <mbedtls_aes_setkey_enc+0x3e4>)
 8001f8c:	5c52      	ldrb	r2, [r2, r1]
                RK[12] = RK[4] ^
 8001f8e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	332c      	adds	r3, #44	@ 0x2c
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <mbedtls_aes_setkey_enc+0x3e4>)
 8001f9e:	5c5b      	ldrb	r3, [r3, r1]
 8001fa0:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 8001fa2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	332c      	adds	r3, #44	@ 0x2c
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <mbedtls_aes_setkey_enc+0x3e4>)
 8001fb2:	5c5b      	ldrb	r3, [r3, r1]
 8001fb4:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 8001fb6:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[11] ) ] << 24 );
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	332c      	adds	r3, #44	@ 0x2c
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0e1b      	lsrs	r3, r3, #24
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <mbedtls_aes_setkey_enc+0x3e4>)
 8001fc8:	5c9b      	ldrb	r3, [r3, r2]
 8001fca:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 8001fd0:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8001fd2:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	3314      	adds	r3, #20
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	3330      	adds	r3, #48	@ 0x30
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	3334      	adds	r3, #52	@ 0x34
 8001fe4:	404a      	eors	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	3318      	adds	r3, #24
 8001fec:	6819      	ldr	r1, [r3, #0]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	3334      	adds	r3, #52	@ 0x34
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	3338      	adds	r3, #56	@ 0x38
 8001ff8:	404a      	eors	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	331c      	adds	r3, #28
 8002000:	6819      	ldr	r1, [r3, #0]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	3338      	adds	r3, #56	@ 0x38
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	333c      	adds	r3, #60	@ 0x3c
 800200c:	404a      	eors	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	3320      	adds	r3, #32
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b06      	cmp	r3, #6
 8002020:	f67f af5c 	bls.w	8001edc <mbedtls_aes_setkey_enc+0x28c>
            }
            break;
 8002024:	bf00      	nop
    }

    return( 0 );
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20004484 	.word	0x20004484
 8002034:	20002284 	.word	0x20002284

08002038 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b0d0      	sub	sp, #320	@ 0x140
 800203c:	af00      	add	r7, sp, #0
 800203e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002042:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002046:	6018      	str	r0, [r3, #0]
 8002048:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800204c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002050:	6019      	str	r1, [r3, #0]
 8002052:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002056:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800205a:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fdd5 	bl	8001c10 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8002066:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800206a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3308      	adds	r3, #8
 8002072:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8002076:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800207a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8002084:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8002086:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800208a:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800208e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002092:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002096:	f107 0014 	add.w	r0, r7, #20
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	6819      	ldr	r1, [r3, #0]
 800209e:	f7ff fdd7 	bl	8001c50 <mbedtls_aes_setkey_enc>
 80020a2:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 80020a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 80e2 	bne.w	8002274 <mbedtls_aes_setkey_dec+0x23c>
        goto exit;

    ctx->nr = cty.nr;
 80020b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020be:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80020c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4413      	add	r3, r2
 80020de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 80020e2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80020e6:	1d13      	adds	r3, r2, #4
 80020e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80020ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80020f0:	1d19      	adds	r1, r3, #4
 80020f2:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80020fa:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80020fe:	1d13      	adds	r3, r2, #4
 8002100:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002104:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002108:	1d19      	adds	r1, r3, #4
 800210a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8002112:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8002116:	1d13      	adds	r3, r2, #4
 8002118:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800211c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002120:	1d19      	adds	r1, r3, #4
 8002122:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800212a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800212e:	1d13      	adds	r3, r2, #4
 8002130:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002134:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002138:	1d19      	adds	r1, r3, #4
 800213a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8002142:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002146:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3b01      	subs	r3, #1
 8002150:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002154:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002158:	3b20      	subs	r3, #32
 800215a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800215e:	e054      	b.n	800220a <mbedtls_aes_setkey_dec+0x1d2>
    {
        for( j = 0; j < 4; j++, SK++ )
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002166:	e042      	b.n	80021ee <mbedtls_aes_setkey_dec+0x1b6>
        {
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8002168:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	4b47      	ldr	r3, [pc, #284]	@ (8002290 <mbedtls_aes_setkey_dec+0x258>)
 8002174:	5c9b      	ldrb	r3, [r3, r2]
 8002176:	461a      	mov	r2, r3
 8002178:	4b46      	ldr	r3, [pc, #280]	@ (8002294 <mbedtls_aes_setkey_dec+0x25c>)
 800217a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 800217e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	b2db      	uxtb	r3, r3
 8002188:	4619      	mov	r1, r3
 800218a:	4b41      	ldr	r3, [pc, #260]	@ (8002290 <mbedtls_aes_setkey_dec+0x258>)
 800218c:	5c5b      	ldrb	r3, [r3, r1]
 800218e:	4619      	mov	r1, r3
 8002190:	4b41      	ldr	r3, [pc, #260]	@ (8002298 <mbedtls_aes_setkey_dec+0x260>)
 8002192:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8002196:	405a      	eors	r2, r3
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 8002198:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0c1b      	lsrs	r3, r3, #16
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4619      	mov	r1, r3
 80021a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002290 <mbedtls_aes_setkey_dec+0x258>)
 80021a6:	5c5b      	ldrb	r3, [r3, r1]
 80021a8:	4619      	mov	r1, r3
 80021aa:	4b3c      	ldr	r3, [pc, #240]	@ (800229c <mbedtls_aes_setkey_dec+0x264>)
 80021ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 80021b0:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ MBEDTLS_BYTE_3( *SK ) ] );
 80021b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	0e1b      	lsrs	r3, r3, #24
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	4b33      	ldr	r3, [pc, #204]	@ (8002290 <mbedtls_aes_setkey_dec+0x258>)
 80021c2:	5c9b      	ldrb	r3, [r3, r2]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b36      	ldr	r3, [pc, #216]	@ (80022a0 <mbedtls_aes_setkey_dec+0x268>)
 80021c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 80021cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80021d0:	1d18      	adds	r0, r3, #4
 80021d2:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 80021d6:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 80021d8:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 80021da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80021de:	3301      	adds	r3, #1
 80021e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80021e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80021e8:	3304      	adds	r3, #4
 80021ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80021ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	ddb8      	ble.n	8002168 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80021f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80021fa:	3b01      	subs	r3, #1
 80021fc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002200:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002204:	3b20      	subs	r3, #32
 8002206:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800220a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800220e:	2b00      	cmp	r3, #0
 8002210:	dca6      	bgt.n	8002160 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 8002212:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8002216:	1d13      	adds	r3, r2, #4
 8002218:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800221c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002220:	1d19      	adds	r1, r3, #4
 8002222:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800222a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800222e:	1d13      	adds	r3, r2, #4
 8002230:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002234:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002238:	1d19      	adds	r1, r3, #4
 800223a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8002242:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8002246:	1d13      	adds	r3, r2, #4
 8002248:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800224c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002250:	1d19      	adds	r1, r3, #4
 8002252:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800225a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800225e:	1d13      	adds	r3, r2, #4
 8002260:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002264:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002268:	1d19      	adds	r1, r3, #4
 800226a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e000      	b.n	8002276 <mbedtls_aes_setkey_dec+0x23e>
        goto exit;
 8002274:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fcd6 	bl	8001c2c <mbedtls_aes_free>

    return( ret );
 8002280:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 8002284:	4618      	mov	r0, r3
 8002286:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20002284 	.word	0x20002284
 8002294:	20003484 	.word	0x20003484
 8002298:	20003884 	.word	0x20003884
 800229c:	20003c84 	.word	0x20003c84
 80022a0:	20004084 	.word	0x20004084

080022a4 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08e      	sub	sp, #56	@ 0x38
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	633b      	str	r3, [r7, #48]	@ 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	3301      	adds	r3, #1
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	431a      	orrs	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3302      	adds	r3, #2
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	431a      	orrs	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	3303      	adds	r3, #3
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	061b      	lsls	r3, r3, #24
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022de:	1d1a      	adds	r2, r3, #4
 80022e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4053      	eors	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3304      	adds	r3, #4
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3305      	adds	r3, #5
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	431a      	orrs	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	3306      	adds	r3, #6
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	041b      	lsls	r3, r3, #16
 8002304:	431a      	orrs	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	3307      	adds	r3, #7
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002314:	1d1a      	adds	r2, r3, #4
 8002316:	633a      	str	r2, [r7, #48]	@ 0x30
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	4053      	eors	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	3308      	adds	r3, #8
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	3309      	adds	r3, #9
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	431a      	orrs	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	330a      	adds	r3, #10
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	041b      	lsls	r3, r3, #16
 800233a:	431a      	orrs	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	330b      	adds	r3, #11
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	061b      	lsls	r3, r3, #24
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234a:	1d1a      	adds	r2, r3, #4
 800234c:	633a      	str	r2, [r7, #48]	@ 0x30
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	4053      	eors	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	330c      	adds	r3, #12
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	330d      	adds	r3, #13
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	431a      	orrs	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	330e      	adds	r3, #14
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	041b      	lsls	r3, r3, #16
 8002370:	431a      	orrs	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	330f      	adds	r3, #15
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	4313      	orrs	r3, r2
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002380:	1d1a      	adds	r2, r3, #4
 8002382:	633a      	str	r2, [r7, #48]	@ 0x30
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	4053      	eors	r3, r2
 800238a:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	105b      	asrs	r3, r3, #1
 8002392:	3b01      	subs	r3, #1
 8002394:	637b      	str	r3, [r7, #52]	@ 0x34
 8002396:	e122      	b.n	80025de <mbedtls_internal_aes_encrypt+0x33a>
    {
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239a:	1d1a      	adds	r2, r3, #4
 800239c:	633a      	str	r2, [r7, #48]	@ 0x30
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	4619      	mov	r1, r3
 80023a6:	4bb0      	ldr	r3, [pc, #704]	@ (8002668 <mbedtls_internal_aes_encrypt+0x3c4>)
 80023a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023ac:	405a      	eors	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	4619      	mov	r1, r3
 80023b6:	4bad      	ldr	r3, [pc, #692]	@ (800266c <mbedtls_internal_aes_encrypt+0x3c8>)
 80023b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023bc:	405a      	eors	r2, r3
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	4619      	mov	r1, r3
 80023c6:	4baa      	ldr	r3, [pc, #680]	@ (8002670 <mbedtls_internal_aes_encrypt+0x3cc>)
 80023c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023cc:	405a      	eors	r2, r3
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	0e1b      	lsrs	r3, r3, #24
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4619      	mov	r1, r3
 80023d6:	4ba7      	ldr	r3, [pc, #668]	@ (8002674 <mbedtls_internal_aes_encrypt+0x3d0>)
 80023d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023dc:	4053      	eors	r3, r2
 80023de:	623b      	str	r3, [r7, #32]
 80023e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e2:	1d1a      	adds	r2, r3, #4
 80023e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	4b9e      	ldr	r3, [pc, #632]	@ (8002668 <mbedtls_internal_aes_encrypt+0x3c4>)
 80023f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023f4:	405a      	eors	r2, r3
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	4619      	mov	r1, r3
 80023fe:	4b9b      	ldr	r3, [pc, #620]	@ (800266c <mbedtls_internal_aes_encrypt+0x3c8>)
 8002400:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002404:	405a      	eors	r2, r3
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4619      	mov	r1, r3
 800240e:	4b98      	ldr	r3, [pc, #608]	@ (8002670 <mbedtls_internal_aes_encrypt+0x3cc>)
 8002410:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002414:	405a      	eors	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	0e1b      	lsrs	r3, r3, #24
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	4b95      	ldr	r3, [pc, #596]	@ (8002674 <mbedtls_internal_aes_encrypt+0x3d0>)
 8002420:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002424:	4053      	eors	r3, r2
 8002426:	627b      	str	r3, [r7, #36]	@ 0x24
 8002428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242a:	1d1a      	adds	r2, r3, #4
 800242c:	633a      	str	r2, [r7, #48]	@ 0x30
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	4619      	mov	r1, r3
 8002436:	4b8c      	ldr	r3, [pc, #560]	@ (8002668 <mbedtls_internal_aes_encrypt+0x3c4>)
 8002438:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800243c:	405a      	eors	r2, r3
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	b2db      	uxtb	r3, r3
 8002444:	4619      	mov	r1, r3
 8002446:	4b89      	ldr	r3, [pc, #548]	@ (800266c <mbedtls_internal_aes_encrypt+0x3c8>)
 8002448:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800244c:	405a      	eors	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	b2db      	uxtb	r3, r3
 8002454:	4619      	mov	r1, r3
 8002456:	4b86      	ldr	r3, [pc, #536]	@ (8002670 <mbedtls_internal_aes_encrypt+0x3cc>)
 8002458:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800245c:	405a      	eors	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	0e1b      	lsrs	r3, r3, #24
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	4b83      	ldr	r3, [pc, #524]	@ (8002674 <mbedtls_internal_aes_encrypt+0x3d0>)
 8002468:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800246c:	4053      	eors	r3, r2
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002472:	1d1a      	adds	r2, r3, #4
 8002474:	633a      	str	r2, [r7, #48]	@ 0x30
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	4619      	mov	r1, r3
 800247e:	4b7a      	ldr	r3, [pc, #488]	@ (8002668 <mbedtls_internal_aes_encrypt+0x3c4>)
 8002480:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002484:	405a      	eors	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	b2db      	uxtb	r3, r3
 800248c:	4619      	mov	r1, r3
 800248e:	4b77      	ldr	r3, [pc, #476]	@ (800266c <mbedtls_internal_aes_encrypt+0x3c8>)
 8002490:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002494:	405a      	eors	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4619      	mov	r1, r3
 800249e:	4b74      	ldr	r3, [pc, #464]	@ (8002670 <mbedtls_internal_aes_encrypt+0x3cc>)
 80024a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024a4:	405a      	eors	r2, r3
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	0e1b      	lsrs	r3, r3, #24
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4619      	mov	r1, r3
 80024ae:	4b71      	ldr	r3, [pc, #452]	@ (8002674 <mbedtls_internal_aes_encrypt+0x3d0>)
 80024b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024b4:	4053      	eors	r3, r2
 80024b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 80024b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ba:	1d1a      	adds	r2, r3, #4
 80024bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	4619      	mov	r1, r3
 80024c6:	4b68      	ldr	r3, [pc, #416]	@ (8002668 <mbedtls_internal_aes_encrypt+0x3c4>)
 80024c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024cc:	405a      	eors	r2, r3
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	4619      	mov	r1, r3
 80024d6:	4b65      	ldr	r3, [pc, #404]	@ (800266c <mbedtls_internal_aes_encrypt+0x3c8>)
 80024d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024dc:	405a      	eors	r2, r3
 80024de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4619      	mov	r1, r3
 80024e6:	4b62      	ldr	r3, [pc, #392]	@ (8002670 <mbedtls_internal_aes_encrypt+0x3cc>)
 80024e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024ec:	405a      	eors	r2, r3
 80024ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f0:	0e1b      	lsrs	r3, r3, #24
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002674 <mbedtls_internal_aes_encrypt+0x3d0>)
 80024f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024fc:	4053      	eors	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002502:	1d1a      	adds	r2, r3, #4
 8002504:	633a      	str	r2, [r7, #48]	@ 0x30
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4619      	mov	r1, r3
 800250e:	4b56      	ldr	r3, [pc, #344]	@ (8002668 <mbedtls_internal_aes_encrypt+0x3c4>)
 8002510:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002514:	405a      	eors	r2, r3
 8002516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4619      	mov	r1, r3
 800251e:	4b53      	ldr	r3, [pc, #332]	@ (800266c <mbedtls_internal_aes_encrypt+0x3c8>)
 8002520:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002524:	405a      	eors	r2, r3
 8002526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	b2db      	uxtb	r3, r3
 800252c:	4619      	mov	r1, r3
 800252e:	4b50      	ldr	r3, [pc, #320]	@ (8002670 <mbedtls_internal_aes_encrypt+0x3cc>)
 8002530:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002534:	405a      	eors	r2, r3
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	0e1b      	lsrs	r3, r3, #24
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4619      	mov	r1, r3
 800253e:	4b4d      	ldr	r3, [pc, #308]	@ (8002674 <mbedtls_internal_aes_encrypt+0x3d0>)
 8002540:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002544:	4053      	eors	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254a:	1d1a      	adds	r2, r3, #4
 800254c:	633a      	str	r2, [r7, #48]	@ 0x30
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4619      	mov	r1, r3
 8002556:	4b44      	ldr	r3, [pc, #272]	@ (8002668 <mbedtls_internal_aes_encrypt+0x3c4>)
 8002558:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800255c:	405a      	eors	r2, r3
 800255e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	4b41      	ldr	r3, [pc, #260]	@ (800266c <mbedtls_internal_aes_encrypt+0x3c8>)
 8002568:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800256c:	405a      	eors	r2, r3
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	0c1b      	lsrs	r3, r3, #16
 8002572:	b2db      	uxtb	r3, r3
 8002574:	4619      	mov	r1, r3
 8002576:	4b3e      	ldr	r3, [pc, #248]	@ (8002670 <mbedtls_internal_aes_encrypt+0x3cc>)
 8002578:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800257c:	405a      	eors	r2, r3
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	0e1b      	lsrs	r3, r3, #24
 8002582:	b2db      	uxtb	r3, r3
 8002584:	4619      	mov	r1, r3
 8002586:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <mbedtls_internal_aes_encrypt+0x3d0>)
 8002588:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800258c:	4053      	eors	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002592:	1d1a      	adds	r2, r3, #4
 8002594:	633a      	str	r2, [r7, #48]	@ 0x30
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259a:	b2db      	uxtb	r3, r3
 800259c:	4619      	mov	r1, r3
 800259e:	4b32      	ldr	r3, [pc, #200]	@ (8002668 <mbedtls_internal_aes_encrypt+0x3c4>)
 80025a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025a4:	405a      	eors	r2, r3
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	4619      	mov	r1, r3
 80025ae:	4b2f      	ldr	r3, [pc, #188]	@ (800266c <mbedtls_internal_aes_encrypt+0x3c8>)
 80025b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025b4:	405a      	eors	r2, r3
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4619      	mov	r1, r3
 80025be:	4b2c      	ldr	r3, [pc, #176]	@ (8002670 <mbedtls_internal_aes_encrypt+0x3cc>)
 80025c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025c4:	405a      	eors	r2, r3
 80025c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c8:	0e1b      	lsrs	r3, r3, #24
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4619      	mov	r1, r3
 80025ce:	4b29      	ldr	r3, [pc, #164]	@ (8002674 <mbedtls_internal_aes_encrypt+0x3d0>)
 80025d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025d4:	4053      	eors	r3, r2
 80025d6:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80025d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025da:	3b01      	subs	r3, #1
 80025dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80025de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f73f aed9 	bgt.w	8002398 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	1d1a      	adds	r2, r3, #4
 80025ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	4619      	mov	r1, r3
 80025f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002668 <mbedtls_internal_aes_encrypt+0x3c4>)
 80025f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025fa:	405a      	eors	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	b2db      	uxtb	r3, r3
 8002602:	4619      	mov	r1, r3
 8002604:	4b19      	ldr	r3, [pc, #100]	@ (800266c <mbedtls_internal_aes_encrypt+0x3c8>)
 8002606:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800260a:	405a      	eors	r2, r3
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	0c1b      	lsrs	r3, r3, #16
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4619      	mov	r1, r3
 8002614:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <mbedtls_internal_aes_encrypt+0x3cc>)
 8002616:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800261a:	405a      	eors	r2, r3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	0e1b      	lsrs	r3, r3, #24
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4619      	mov	r1, r3
 8002624:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <mbedtls_internal_aes_encrypt+0x3d0>)
 8002626:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800262a:	4053      	eors	r3, r2
 800262c:	623b      	str	r3, [r7, #32]
 800262e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002630:	1d1a      	adds	r2, r3, #4
 8002632:	633a      	str	r2, [r7, #48]	@ 0x30
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4619      	mov	r1, r3
 800263c:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <mbedtls_internal_aes_encrypt+0x3c4>)
 800263e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002642:	405a      	eors	r2, r3
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	4b07      	ldr	r3, [pc, #28]	@ (800266c <mbedtls_internal_aes_encrypt+0x3c8>)
 800264e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002652:	405a      	eors	r2, r3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	0c1b      	lsrs	r3, r3, #16
 8002658:	b2db      	uxtb	r3, r3
 800265a:	4619      	mov	r1, r3
 800265c:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <mbedtls_internal_aes_encrypt+0x3cc>)
 800265e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002662:	405a      	eors	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	e007      	b.n	8002678 <mbedtls_internal_aes_encrypt+0x3d4>
 8002668:	20002384 	.word	0x20002384
 800266c:	20002784 	.word	0x20002784
 8002670:	20002b84 	.word	0x20002b84
 8002674:	20002f84 	.word	0x20002f84
 8002678:	0e1b      	lsrs	r3, r3, #24
 800267a:	b2db      	uxtb	r3, r3
 800267c:	4619      	mov	r1, r3
 800267e:	4b9f      	ldr	r3, [pc, #636]	@ (80028fc <mbedtls_internal_aes_encrypt+0x658>)
 8002680:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002684:	4053      	eors	r3, r2
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268a:	1d1a      	adds	r2, r3, #4
 800268c:	633a      	str	r2, [r7, #48]	@ 0x30
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4619      	mov	r1, r3
 8002696:	4b9a      	ldr	r3, [pc, #616]	@ (8002900 <mbedtls_internal_aes_encrypt+0x65c>)
 8002698:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800269c:	405a      	eors	r2, r3
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	4619      	mov	r1, r3
 80026a6:	4b97      	ldr	r3, [pc, #604]	@ (8002904 <mbedtls_internal_aes_encrypt+0x660>)
 80026a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026ac:	405a      	eors	r2, r3
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	4619      	mov	r1, r3
 80026b6:	4b94      	ldr	r3, [pc, #592]	@ (8002908 <mbedtls_internal_aes_encrypt+0x664>)
 80026b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026bc:	405a      	eors	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	0e1b      	lsrs	r3, r3, #24
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4619      	mov	r1, r3
 80026c6:	4b8d      	ldr	r3, [pc, #564]	@ (80028fc <mbedtls_internal_aes_encrypt+0x658>)
 80026c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026cc:	4053      	eors	r3, r2
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d2:	1d1a      	adds	r2, r3, #4
 80026d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	4b88      	ldr	r3, [pc, #544]	@ (8002900 <mbedtls_internal_aes_encrypt+0x65c>)
 80026e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026e4:	405a      	eors	r2, r3
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4619      	mov	r1, r3
 80026ee:	4b85      	ldr	r3, [pc, #532]	@ (8002904 <mbedtls_internal_aes_encrypt+0x660>)
 80026f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026f4:	405a      	eors	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <mbedtls_internal_aes_encrypt+0x664>)
 8002700:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002704:	405a      	eors	r2, r3
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	0e1b      	lsrs	r3, r3, #24
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	4b7b      	ldr	r3, [pc, #492]	@ (80028fc <mbedtls_internal_aes_encrypt+0x658>)
 8002710:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002714:	4053      	eors	r3, r2
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c

    t.X[0] = *RK++ ^ \
 8002718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271a:	1d1a      	adds	r2, r3, #4
 800271c:	633a      	str	r2, [r7, #48]	@ 0x30
 800271e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8002720:	6a3a      	ldr	r2, [r7, #32]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	4611      	mov	r1, r2
 8002726:	4a79      	ldr	r2, [pc, #484]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 8002728:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 800272a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4619      	mov	r1, r3
 8002734:	4b75      	ldr	r3, [pc, #468]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 8002736:	5c5b      	ldrb	r3, [r3, r1]
 8002738:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 800273a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 800273c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273e:	0c1b      	lsrs	r3, r3, #16
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4619      	mov	r1, r3
 8002744:	4b71      	ldr	r3, [pc, #452]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 8002746:	5c5b      	ldrb	r3, [r3, r1]
 8002748:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 800274a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 800274c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274e:	0e1b      	lsrs	r3, r3, #24
 8002750:	b2db      	uxtb	r3, r3
 8002752:	4619      	mov	r1, r3
 8002754:	4b6d      	ldr	r3, [pc, #436]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 8002756:	5c5b      	ldrb	r3, [r3, r1]
 8002758:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 800275a:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 800275c:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 800275e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002760:	1d1a      	adds	r2, r3, #4
 8002762:	633a      	str	r2, [r7, #48]	@ 0x30
 8002764:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8002766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	4611      	mov	r1, r2
 800276c:	4a67      	ldr	r2, [pc, #412]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 800276e:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8002770:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8002772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	b2db      	uxtb	r3, r3
 8002778:	4619      	mov	r1, r3
 800277a:	4b64      	ldr	r3, [pc, #400]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 800277c:	5c5b      	ldrb	r3, [r3, r1]
 800277e:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8002780:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8002782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	b2db      	uxtb	r3, r3
 8002788:	4619      	mov	r1, r3
 800278a:	4b60      	ldr	r3, [pc, #384]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 800278c:	5c5b      	ldrb	r3, [r3, r1]
 800278e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8002790:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	0e1b      	lsrs	r3, r3, #24
 8002796:	b2db      	uxtb	r3, r3
 8002798:	4619      	mov	r1, r3
 800279a:	4b5c      	ldr	r3, [pc, #368]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 800279c:	5c5b      	ldrb	r3, [r3, r1]
 800279e:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 80027a0:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 80027a2:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 80027a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a6:	1d1a      	adds	r2, r3, #4
 80027a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80027aa:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 80027ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	4611      	mov	r1, r2
 80027b2:	4a56      	ldr	r2, [pc, #344]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 80027b4:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 80027b6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 80027b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4619      	mov	r1, r3
 80027c0:	4b52      	ldr	r3, [pc, #328]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 80027c2:	5c5b      	ldrb	r3, [r3, r1]
 80027c4:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 80027c6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	0c1b      	lsrs	r3, r3, #16
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	4619      	mov	r1, r3
 80027d0:	4b4e      	ldr	r3, [pc, #312]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 80027d2:	5c5b      	ldrb	r3, [r3, r1]
 80027d4:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 80027d6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	0e1b      	lsrs	r3, r3, #24
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4619      	mov	r1, r3
 80027e0:	4b4a      	ldr	r3, [pc, #296]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 80027e2:	5c5b      	ldrb	r3, [r3, r1]
 80027e4:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 80027e6:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 80027e8:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 80027ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ec:	1d1a      	adds	r2, r3, #4
 80027ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80027f0:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 80027f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	4611      	mov	r1, r2
 80027f8:	4a44      	ldr	r2, [pc, #272]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 80027fa:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 80027fc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	b2db      	uxtb	r3, r3
 8002804:	4619      	mov	r1, r3
 8002806:	4b41      	ldr	r3, [pc, #260]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 8002808:	5c5b      	ldrb	r3, [r3, r1]
 800280a:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 800280c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	b2db      	uxtb	r3, r3
 8002814:	4619      	mov	r1, r3
 8002816:	4b3d      	ldr	r3, [pc, #244]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 8002818:	5c5b      	ldrb	r3, [r3, r1]
 800281a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 800281c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 800281e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002820:	0e1b      	lsrs	r3, r3, #24
 8002822:	b2db      	uxtb	r3, r3
 8002824:	4619      	mov	r1, r3
 8002826:	4b39      	ldr	r3, [pc, #228]	@ (800290c <mbedtls_internal_aes_encrypt+0x668>)
 8002828:	5c5b      	ldrb	r3, [r3, r1]
 800282a:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 800282c:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 800282e:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	0a1a      	lsrs	r2, r3, #8
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3301      	adds	r3, #1
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	0c1a      	lsrs	r2, r3, #16
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3302      	adds	r3, #2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	0e1a      	lsrs	r2, r3, #24
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3303      	adds	r3, #3
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3304      	adds	r3, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	0a1a      	lsrs	r2, r3, #8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3305      	adds	r3, #5
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	0c1a      	lsrs	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3306      	adds	r3, #6
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	0e1a      	lsrs	r2, r3, #24
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3307      	adds	r3, #7
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3308      	adds	r3, #8
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	0a1a      	lsrs	r2, r3, #8
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3309      	adds	r3, #9
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	0c1a      	lsrs	r2, r3, #16
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	330a      	adds	r3, #10
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	0e1a      	lsrs	r2, r3, #24
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	330b      	adds	r3, #11
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	330c      	adds	r3, #12
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	0a1a      	lsrs	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	330d      	adds	r3, #13
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	0c1a      	lsrs	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	330e      	adds	r3, #14
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	0e1a      	lsrs	r2, r3, #24
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	330f      	adds	r3, #15
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 80028e6:	f107 0310 	add.w	r3, r7, #16
 80028ea:	2120      	movs	r1, #32
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 ff8d 	bl	800380c <mbedtls_platform_zeroize>

    return( 0 );
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3738      	adds	r7, #56	@ 0x38
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20002f84 	.word	0x20002f84
 8002900:	20002384 	.word	0x20002384
 8002904:	20002784 	.word	0x20002784
 8002908:	20002b84 	.word	0x20002b84
 800290c:	20002284 	.word	0x20002284

08002910 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08e      	sub	sp, #56	@ 0x38
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	633b      	str	r3, [r7, #48]	@ 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	3301      	adds	r3, #1
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	431a      	orrs	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3302      	adds	r3, #2
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	041b      	lsls	r3, r3, #16
 800293a:	431a      	orrs	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	3303      	adds	r3, #3
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	061b      	lsls	r3, r3, #24
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294a:	1d1a      	adds	r2, r3, #4
 800294c:	633a      	str	r2, [r7, #48]	@ 0x30
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4053      	eors	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	3304      	adds	r3, #4
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	3305      	adds	r3, #5
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	431a      	orrs	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	3306      	adds	r3, #6
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	3307      	adds	r3, #7
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	061b      	lsls	r3, r3, #24
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002980:	1d1a      	adds	r2, r3, #4
 8002982:	633a      	str	r2, [r7, #48]	@ 0x30
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	4053      	eors	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3308      	adds	r3, #8
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	3309      	adds	r3, #9
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	431a      	orrs	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	330a      	adds	r3, #10
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	041b      	lsls	r3, r3, #16
 80029a6:	431a      	orrs	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	330b      	adds	r3, #11
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	061b      	lsls	r3, r3, #24
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b6:	1d1a      	adds	r2, r3, #4
 80029b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	4053      	eors	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	330c      	adds	r3, #12
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	330d      	adds	r3, #13
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	431a      	orrs	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	330e      	adds	r3, #14
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	431a      	orrs	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	330f      	adds	r3, #15
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ec:	1d1a      	adds	r2, r3, #4
 80029ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4053      	eors	r3, r2
 80029f6:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	105b      	asrs	r3, r3, #1
 80029fe:	3b01      	subs	r3, #1
 8002a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a02:	e122      	b.n	8002c4a <mbedtls_internal_aes_decrypt+0x33a>
    {
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a06:	1d1a      	adds	r2, r3, #4
 8002a08:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	4619      	mov	r1, r3
 8002a12:	4bb0      	ldr	r3, [pc, #704]	@ (8002cd4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002a14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a18:	405a      	eors	r2, r3
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	4619      	mov	r1, r3
 8002a22:	4bad      	ldr	r3, [pc, #692]	@ (8002cd8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002a24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a28:	405a      	eors	r2, r3
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4619      	mov	r1, r3
 8002a32:	4baa      	ldr	r3, [pc, #680]	@ (8002cdc <mbedtls_internal_aes_decrypt+0x3cc>)
 8002a34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a38:	405a      	eors	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	0e1b      	lsrs	r3, r3, #24
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4619      	mov	r1, r3
 8002a42:	4ba7      	ldr	r3, [pc, #668]	@ (8002ce0 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002a44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a48:	4053      	eors	r3, r2
 8002a4a:	623b      	str	r3, [r7, #32]
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4e:	1d1a      	adds	r2, r3, #4
 8002a50:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4b9e      	ldr	r3, [pc, #632]	@ (8002cd4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002a5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a60:	405a      	eors	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4b9b      	ldr	r3, [pc, #620]	@ (8002cd8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002a6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a70:	405a      	eors	r2, r3
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4b98      	ldr	r3, [pc, #608]	@ (8002cdc <mbedtls_internal_aes_decrypt+0x3cc>)
 8002a7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a80:	405a      	eors	r2, r3
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	0e1b      	lsrs	r3, r3, #24
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4b95      	ldr	r3, [pc, #596]	@ (8002ce0 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002a8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a90:	4053      	eors	r3, r2
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a96:	1d1a      	adds	r2, r3, #4
 8002a98:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4b8c      	ldr	r3, [pc, #560]	@ (8002cd4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002aa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002aa8:	405a      	eors	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4b89      	ldr	r3, [pc, #548]	@ (8002cd8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002ab4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ab8:	405a      	eors	r2, r3
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4b86      	ldr	r3, [pc, #536]	@ (8002cdc <mbedtls_internal_aes_decrypt+0x3cc>)
 8002ac4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ac8:	405a      	eors	r2, r3
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	0e1b      	lsrs	r3, r3, #24
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4b83      	ldr	r3, [pc, #524]	@ (8002ce0 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002ad4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ad8:	4053      	eors	r3, r2
 8002ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ade:	1d1a      	adds	r2, r3, #4
 8002ae0:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4b7a      	ldr	r3, [pc, #488]	@ (8002cd4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002aec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002af0:	405a      	eors	r2, r3
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4619      	mov	r1, r3
 8002afa:	4b77      	ldr	r3, [pc, #476]	@ (8002cd8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002afc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b00:	405a      	eors	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4b74      	ldr	r3, [pc, #464]	@ (8002cdc <mbedtls_internal_aes_decrypt+0x3cc>)
 8002b0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b10:	405a      	eors	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	0e1b      	lsrs	r3, r3, #24
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4b71      	ldr	r3, [pc, #452]	@ (8002ce0 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002b1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b20:	4053      	eors	r3, r2
 8002b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8002b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b26:	1d1a      	adds	r2, r3, #4
 8002b28:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	4619      	mov	r1, r3
 8002b32:	4b68      	ldr	r3, [pc, #416]	@ (8002cd4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002b34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b38:	405a      	eors	r2, r3
 8002b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	4619      	mov	r1, r3
 8002b42:	4b65      	ldr	r3, [pc, #404]	@ (8002cd8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002b44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b48:	405a      	eors	r2, r3
 8002b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	4619      	mov	r1, r3
 8002b52:	4b62      	ldr	r3, [pc, #392]	@ (8002cdc <mbedtls_internal_aes_decrypt+0x3cc>)
 8002b54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b58:	405a      	eors	r2, r3
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	0e1b      	lsrs	r3, r3, #24
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	4619      	mov	r1, r3
 8002b62:	4b5f      	ldr	r3, [pc, #380]	@ (8002ce0 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002b64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b68:	4053      	eors	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	1d1a      	adds	r2, r3, #4
 8002b70:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4b56      	ldr	r3, [pc, #344]	@ (8002cd4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002b7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b80:	405a      	eors	r2, r3
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	0a1b      	lsrs	r3, r3, #8
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4b53      	ldr	r3, [pc, #332]	@ (8002cd8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002b8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b90:	405a      	eors	r2, r3
 8002b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4b50      	ldr	r3, [pc, #320]	@ (8002cdc <mbedtls_internal_aes_decrypt+0x3cc>)
 8002b9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ba0:	405a      	eors	r2, r3
 8002ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba4:	0e1b      	lsrs	r3, r3, #24
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce0 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002bac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002bb0:	4053      	eors	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	1d1a      	adds	r2, r3, #4
 8002bb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4b44      	ldr	r3, [pc, #272]	@ (8002cd4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002bc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002bc8:	405a      	eors	r2, r3
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4b41      	ldr	r3, [pc, #260]	@ (8002cd8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002bd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002bd8:	405a      	eors	r2, r3
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	4619      	mov	r1, r3
 8002be2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cdc <mbedtls_internal_aes_decrypt+0x3cc>)
 8002be4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002be8:	405a      	eors	r2, r3
 8002bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bec:	0e1b      	lsrs	r3, r3, #24
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce0 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002bf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002bf8:	4053      	eors	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfe:	1d1a      	adds	r2, r3, #4
 8002c00:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4b32      	ldr	r3, [pc, #200]	@ (8002cd4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002c0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c10:	405a      	eors	r2, r3
 8002c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002c1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c20:	405a      	eors	r2, r3
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cdc <mbedtls_internal_aes_decrypt+0x3cc>)
 8002c2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c30:	405a      	eors	r2, r3
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	0e1b      	lsrs	r3, r3, #24
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4b29      	ldr	r3, [pc, #164]	@ (8002ce0 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002c3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c40:	4053      	eors	r3, r2
 8002c42:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8002c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c46:	3b01      	subs	r3, #1
 8002c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f73f aed9 	bgt.w	8002a04 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	1d1a      	adds	r2, r3, #4
 8002c56:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002c62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c66:	405a      	eors	r2, r3
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002c72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c76:	405a      	eors	r2, r3
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <mbedtls_internal_aes_decrypt+0x3cc>)
 8002c82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c86:	405a      	eors	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	0e1b      	lsrs	r3, r3, #24
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4b13      	ldr	r3, [pc, #76]	@ (8002ce0 <mbedtls_internal_aes_decrypt+0x3d0>)
 8002c92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c96:	4053      	eors	r3, r2
 8002c98:	623b      	str	r3, [r7, #32]
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9c:	1d1a      	adds	r2, r3, #4
 8002c9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8002caa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cae:	405a      	eors	r2, r3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4b07      	ldr	r3, [pc, #28]	@ (8002cd8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8002cba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cbe:	405a      	eors	r2, r3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	0c1b      	lsrs	r3, r3, #16
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <mbedtls_internal_aes_decrypt+0x3cc>)
 8002cca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cce:	405a      	eors	r2, r3
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	e007      	b.n	8002ce4 <mbedtls_internal_aes_decrypt+0x3d4>
 8002cd4:	20003484 	.word	0x20003484
 8002cd8:	20003884 	.word	0x20003884
 8002cdc:	20003c84 	.word	0x20003c84
 8002ce0:	20004084 	.word	0x20004084
 8002ce4:	0e1b      	lsrs	r3, r3, #24
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4b9f      	ldr	r3, [pc, #636]	@ (8002f68 <mbedtls_internal_aes_decrypt+0x658>)
 8002cec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cf0:	4053      	eors	r3, r2
 8002cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf6:	1d1a      	adds	r2, r3, #4
 8002cf8:	633a      	str	r2, [r7, #48]	@ 0x30
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	4619      	mov	r1, r3
 8002d02:	4b9a      	ldr	r3, [pc, #616]	@ (8002f6c <mbedtls_internal_aes_decrypt+0x65c>)
 8002d04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d08:	405a      	eors	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	4619      	mov	r1, r3
 8002d12:	4b97      	ldr	r3, [pc, #604]	@ (8002f70 <mbedtls_internal_aes_decrypt+0x660>)
 8002d14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d18:	405a      	eors	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	0c1b      	lsrs	r3, r3, #16
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	4619      	mov	r1, r3
 8002d22:	4b94      	ldr	r3, [pc, #592]	@ (8002f74 <mbedtls_internal_aes_decrypt+0x664>)
 8002d24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d28:	405a      	eors	r2, r3
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	0e1b      	lsrs	r3, r3, #24
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	4619      	mov	r1, r3
 8002d32:	4b8d      	ldr	r3, [pc, #564]	@ (8002f68 <mbedtls_internal_aes_decrypt+0x658>)
 8002d34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d38:	4053      	eors	r3, r2
 8002d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3e:	1d1a      	adds	r2, r3, #4
 8002d40:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4b88      	ldr	r3, [pc, #544]	@ (8002f6c <mbedtls_internal_aes_decrypt+0x65c>)
 8002d4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d50:	405a      	eors	r2, r3
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4b85      	ldr	r3, [pc, #532]	@ (8002f70 <mbedtls_internal_aes_decrypt+0x660>)
 8002d5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d60:	405a      	eors	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4b82      	ldr	r3, [pc, #520]	@ (8002f74 <mbedtls_internal_aes_decrypt+0x664>)
 8002d6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d70:	405a      	eors	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	0e1b      	lsrs	r3, r3, #24
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f68 <mbedtls_internal_aes_decrypt+0x658>)
 8002d7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d80:	4053      	eors	r3, r2
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c

    t.X[0] = *RK++ ^ \
 8002d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d86:	1d1a      	adds	r2, r3, #4
 8002d88:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d8a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8002d8c:	6a3a      	ldr	r2, [r7, #32]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	4611      	mov	r1, r2
 8002d92:	4a79      	ldr	r2, [pc, #484]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002d94:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 8002d96:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8002d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4b75      	ldr	r3, [pc, #468]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002da2:	5c5b      	ldrb	r3, [r3, r1]
 8002da4:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8002da6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8002da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002daa:	0c1b      	lsrs	r3, r3, #16
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	4619      	mov	r1, r3
 8002db0:	4b71      	ldr	r3, [pc, #452]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002db2:	5c5b      	ldrb	r3, [r3, r1]
 8002db4:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8002db6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	0e1b      	lsrs	r3, r3, #24
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4b6d      	ldr	r3, [pc, #436]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002dc2:	5c5b      	ldrb	r3, [r3, r1]
 8002dc4:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8002dc6:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8002dc8:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 8002dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dcc:	1d1a      	adds	r2, r3, #4
 8002dce:	633a      	str	r2, [r7, #48]	@ 0x30
 8002dd0:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8002dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4a67      	ldr	r2, [pc, #412]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002dda:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8002ddc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	4619      	mov	r1, r3
 8002de6:	4b64      	ldr	r3, [pc, #400]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002de8:	5c5b      	ldrb	r3, [r3, r1]
 8002dea:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8002dec:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8002dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	4619      	mov	r1, r3
 8002df6:	4b60      	ldr	r3, [pc, #384]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002df8:	5c5b      	ldrb	r3, [r3, r1]
 8002dfa:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 8002dfc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 8002dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e00:	0e1b      	lsrs	r3, r3, #24
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4619      	mov	r1, r3
 8002e06:	4b5c      	ldr	r3, [pc, #368]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002e08:	5c5b      	ldrb	r3, [r3, r1]
 8002e0a:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8002e0c:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8002e0e:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 8002e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e12:	1d1a      	adds	r2, r3, #4
 8002e14:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e16:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8002e18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4a56      	ldr	r2, [pc, #344]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002e20:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8002e22:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4b52      	ldr	r3, [pc, #328]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002e2e:	5c5b      	ldrb	r3, [r3, r1]
 8002e30:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8002e32:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4b4e      	ldr	r3, [pc, #312]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002e3e:	5c5b      	ldrb	r3, [r3, r1]
 8002e40:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8002e42:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 8002e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e46:	0e1b      	lsrs	r3, r3, #24
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002e4e:	5c5b      	ldrb	r3, [r3, r1]
 8002e50:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8002e52:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8002e54:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 8002e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e58:	1d1a      	adds	r2, r3, #4
 8002e5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e5c:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8002e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	4611      	mov	r1, r2
 8002e64:	4a44      	ldr	r2, [pc, #272]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002e66:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 8002e68:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8002e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	4619      	mov	r1, r3
 8002e72:	4b41      	ldr	r3, [pc, #260]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002e74:	5c5b      	ldrb	r3, [r3, r1]
 8002e76:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8002e78:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	4619      	mov	r1, r3
 8002e82:	4b3d      	ldr	r3, [pc, #244]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002e84:	5c5b      	ldrb	r3, [r3, r1]
 8002e86:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8002e88:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	0e1b      	lsrs	r3, r3, #24
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	4619      	mov	r1, r3
 8002e92:	4b39      	ldr	r3, [pc, #228]	@ (8002f78 <mbedtls_internal_aes_decrypt+0x668>)
 8002e94:	5c5b      	ldrb	r3, [r3, r1]
 8002e96:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 8002e98:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 8002e9a:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	0a1a      	lsrs	r2, r3, #8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	0c1a      	lsrs	r2, r3, #16
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	0e1a      	lsrs	r2, r3, #24
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3303      	adds	r3, #3
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	0a1a      	lsrs	r2, r3, #8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3305      	adds	r3, #5
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	0c1a      	lsrs	r2, r3, #16
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3306      	adds	r3, #6
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	0e1a      	lsrs	r2, r3, #24
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3307      	adds	r3, #7
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3308      	adds	r3, #8
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	0a1a      	lsrs	r2, r3, #8
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3309      	adds	r3, #9
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	0c1a      	lsrs	r2, r3, #16
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	330a      	adds	r3, #10
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	0e1a      	lsrs	r2, r3, #24
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	330b      	adds	r3, #11
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	0a1a      	lsrs	r2, r3, #8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	330d      	adds	r3, #13
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	0c1a      	lsrs	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	330e      	adds	r3, #14
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	0e1a      	lsrs	r2, r3, #24
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	330f      	adds	r3, #15
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8002f52:	f107 0310 	add.w	r3, r7, #16
 8002f56:	2120      	movs	r1, #32
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fc57 	bl	800380c <mbedtls_platform_zeroize>

    return( 0 );
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3738      	adds	r7, #56	@ 0x38
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20004084 	.word	0x20004084
 8002f6c:	20003484 	.word	0x20003484
 8002f70:	20003884 	.word	0x20003884
 8002f74:	20003c84 	.word	0x20003c84
 8002f78:	20003384 	.word	0x20003384

08002f7c <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d106      	bne.n	8002f9e <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff f985 	bl	80022a4 <mbedtls_internal_aes_encrypt>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	e005      	b.n	8002faa <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f7ff fcb4 	bl	8002910 <mbedtls_internal_aes_decrypt>
 8002fa8:	4603      	mov	r3, r0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <mbedtls_des_init>:
    {                                                   \
        uint32_t t = (a); (a) = (b); (b) = t; t = 0;    \
    } while( 0 )

void mbedtls_des_init( mbedtls_des_context *ctx )
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_des_context ) );
 8002fba:	2280      	movs	r2, #128	@ 0x80
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f004 fb7f 	bl	80076c2 <memset>
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <mbedtls_des_setkey>:
    return( 0 );
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey( uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t X, Y, T;

    X = MBEDTLS_GET_UINT32_BE( key, 0 );
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	061a      	lsls	r2, r3, #24
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	041b      	lsls	r3, r3, #16
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	3302      	adds	r3, #2
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	3203      	adds	r2, #3
 8002ff4:	7812      	ldrb	r2, [r2, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
    Y = MBEDTLS_GET_UINT32_BE( key, 4 );
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	061a      	lsls	r2, r3, #24
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	3305      	adds	r3, #5
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	3306      	adds	r3, #6
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	4313      	orrs	r3, r2
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	3207      	adds	r2, #7
 800301a:	7812      	ldrb	r2, [r2, #0]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

    /*
     * Permuted Choice 1
     */
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	091a      	lsrs	r2, r3, #4
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4053      	eors	r3, r2
 8003028:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4053      	eors	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4053      	eors	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
    T =  ((Y      ) ^ X) & 0x10101010;  X ^= T; Y ^= (T      );
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4053      	eors	r3, r2
 8003046:	f003 3310 	and.w	r3, r3, #269488144	@ 0x10101010
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	4053      	eors	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4053      	eors	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]

    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	4a55      	ldr	r2, [pc, #340]	@ (80031b8 <mbedtls_des_setkey+0x1ec>)
 8003064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003068:	00da      	lsls	r2, r3, #3
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	4951      	ldr	r1, [pc, #324]	@ (80031b8 <mbedtls_des_setkey+0x1ec>)
 8003074:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	431a      	orrs	r2, r3
        | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	494c      	ldr	r1, [pc, #304]	@ (80031b8 <mbedtls_des_setkey+0x1ec>)
 8003086:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	431a      	orrs	r2, r3
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	0e1b      	lsrs	r3, r3, #24
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	4948      	ldr	r1, [pc, #288]	@ (80031b8 <mbedtls_des_setkey+0x1ec>)
 8003098:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800309c:	431a      	orrs	r2, r3
        | (LHs[ (X >>  5) & 0xF] << 7) | (LHs[ (X >> 13) & 0xF ] << 6)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	4944      	ldr	r1, [pc, #272]	@ (80031b8 <mbedtls_des_setkey+0x1ec>)
 80030a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030ac:	01db      	lsls	r3, r3, #7
 80030ae:	431a      	orrs	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	0b5b      	lsrs	r3, r3, #13
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	493f      	ldr	r1, [pc, #252]	@ (80031b8 <mbedtls_des_setkey+0x1ec>)
 80030ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030be:	019b      	lsls	r3, r3, #6
 80030c0:	431a      	orrs	r2, r3
        | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	0d5b      	lsrs	r3, r3, #21
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	493b      	ldr	r1, [pc, #236]	@ (80031b8 <mbedtls_des_setkey+0x1ec>)
 80030cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030d0:	015b      	lsls	r3, r3, #5
 80030d2:	431a      	orrs	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	0f5b      	lsrs	r3, r3, #29
 80030d8:	4937      	ldr	r1, [pc, #220]	@ (80031b8 <mbedtls_des_setkey+0x1ec>)
 80030da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030de:	011b      	lsls	r3, r3, #4
    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]

    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	4a33      	ldr	r2, [pc, #204]	@ (80031bc <mbedtls_des_setkey+0x1f0>)
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	00da      	lsls	r2, r3, #3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	0a5b      	lsrs	r3, r3, #9
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	492f      	ldr	r1, [pc, #188]	@ (80031bc <mbedtls_des_setkey+0x1f0>)
 80030fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	0c5b      	lsrs	r3, r3, #17
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	492b      	ldr	r1, [pc, #172]	@ (80031bc <mbedtls_des_setkey+0x1f0>)
 8003110:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	431a      	orrs	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	0e5b      	lsrs	r3, r3, #25
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	4926      	ldr	r1, [pc, #152]	@ (80031bc <mbedtls_des_setkey+0x1f0>)
 8003122:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003126:	431a      	orrs	r2, r3
        | (RHs[ (Y >>  4) & 0xF] << 7) | (RHs[ (Y >> 12) & 0xF ] << 6)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	4922      	ldr	r1, [pc, #136]	@ (80031bc <mbedtls_des_setkey+0x1f0>)
 8003132:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003136:	01db      	lsls	r3, r3, #7
 8003138:	431a      	orrs	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	0b1b      	lsrs	r3, r3, #12
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	491e      	ldr	r1, [pc, #120]	@ (80031bc <mbedtls_des_setkey+0x1f0>)
 8003144:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	0d1b      	lsrs	r3, r3, #20
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	4919      	ldr	r1, [pc, #100]	@ (80031bc <mbedtls_des_setkey+0x1f0>)
 8003156:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800315a:	015b      	lsls	r3, r3, #5
 800315c:	431a      	orrs	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	0f1b      	lsrs	r3, r3, #28
 8003162:	4916      	ldr	r1, [pc, #88]	@ (80031bc <mbedtls_des_setkey+0x1f0>)
 8003164:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003168:	011b      	lsls	r3, r3, #4
    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

    X &= 0x0FFFFFFF;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003174:	613b      	str	r3, [r7, #16]
    Y &= 0x0FFFFFFF;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800317c:	60fb      	str	r3, [r7, #12]

    /*
     * calculate subkeys
     */
    for( i = 0; i < 16; i++ )
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e113      	b.n	80033ac <mbedtls_des_setkey+0x3e0>
    {
        if( i < 2 || i == 8 || i == 15 )
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b01      	cmp	r3, #1
 8003188:	dd05      	ble.n	8003196 <mbedtls_des_setkey+0x1ca>
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d002      	beq.n	8003196 <mbedtls_des_setkey+0x1ca>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	d114      	bne.n	80031c0 <mbedtls_des_setkey+0x1f4>
        {
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	005a      	lsls	r2, r3, #1
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	0edb      	lsrs	r3, r3, #27
 800319e:	4313      	orrs	r3, r2
 80031a0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80031a4:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	005a      	lsls	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	0edb      	lsrs	r3, r3, #27
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e013      	b.n	80031e0 <mbedtls_des_setkey+0x214>
 80031b8:	08007f7c 	.word	0x08007f7c
 80031bc:	08007fbc 	.word	0x08007fbc
        }
        else
        {
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	009a      	lsls	r2, r3, #2
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	0e9b      	lsrs	r3, r3, #26
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80031ce:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	009a      	lsls	r2, r3, #2
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	0e9b      	lsrs	r3, r3, #26
 80031d8:	4313      	orrs	r3, r2
 80031da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80031de:	60fb      	str	r3, [r7, #12]
        }

        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	f003 5210 	and.w	r2, r3, #603979776	@ 0x24000000
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	071b      	lsls	r3, r3, #28
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f0:	431a      	orrs	r2, r3
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	039b      	lsls	r3, r3, #14
 80031f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031fa:	431a      	orrs	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	049b      	lsls	r3, r3, #18
 8003200:	f003 7302 	and.w	r3, r3, #34078720	@ 0x2080000
 8003204:	431a      	orrs	r2, r3
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	019b      	lsls	r3, r3, #6
 800320a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800320e:	431a      	orrs	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	025b      	lsls	r3, r3, #9
 8003214:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003218:	431a      	orrs	r2, r3
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003222:	431a      	orrs	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	029b      	lsls	r3, r3, #10
 8003228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322c:	431a      	orrs	r2, r3
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	431a      	orrs	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	0a9b      	lsrs	r3, r3, #10
 800323c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003240:	431a      	orrs	r2, r3
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	0b5b      	lsrs	r3, r3, #13
 8003246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800324a:	431a      	orrs	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003254:	431a      	orrs	r2, r3
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	019b      	lsls	r3, r3, #6
 800325a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800325e:	431a      	orrs	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003268:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	0b9b      	lsrs	r3, r3, #14
 800326e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003272:	431a      	orrs	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327a:	431a      	orrs	r2, r3
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	431a      	orrs	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	0a9b      	lsrs	r3, r3, #10
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	431a      	orrs	r2, r3
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	08db      	lsrs	r3, r3, #3
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	431a      	orrs	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	0c9b      	lsrs	r3, r3, #18
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	431a      	orrs	r2, r3
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	0e9b      	lsrs	r3, r3, #26
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	ea42 0103 	orr.w	r1, r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	0e1b      	lsrs	r3, r3, #24
 80032b4:	f003 0201 	and.w	r2, r3, #1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	1d18      	adds	r0, r3, #4
 80032bc:	6078      	str	r0, [r7, #4]
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 80032be:	430a      	orrs	r2, r1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 80032c0:	601a      	str	r2, [r3, #0]

        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	03db      	lsls	r3, r3, #15
 80032c6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	045b      	lsls	r3, r3, #17
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d2:	431a      	orrs	r2, r3
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	029b      	lsls	r3, r3, #10
 80032d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032dc:	431a      	orrs	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	059b      	lsls	r3, r3, #22
 80032e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032e6:	431a      	orrs	r2, r3
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f0:	431a      	orrs	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032fa:	431a      	orrs	r2, r3
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003304:	431a      	orrs	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	02db      	lsls	r3, r3, #11
 800330a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800330e:	431a      	orrs	r2, r3
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003318:	431a      	orrs	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	099b      	lsrs	r3, r3, #6
 800331e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003322:	431a      	orrs	r2, r3
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	03db      	lsls	r3, r3, #15
 8003328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332c:	431a      	orrs	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003336:	431a      	orrs	r2, r3
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003340:	431a      	orrs	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800334a:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	0b99      	lsrs	r1, r3, #14
 8003350:	f640 0308 	movw	r3, #2056	@ 0x808
 8003354:	400b      	ands	r3, r1
 8003356:	431a      	orrs	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	0a5b      	lsrs	r3, r3, #9
 800335c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003360:	431a      	orrs	r2, r3
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	01db      	lsls	r3, r3, #7
 800336e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003372:	431a      	orrs	r2, r3
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	09db      	lsrs	r3, r3, #7
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	431a      	orrs	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	08db      	lsrs	r3, r3, #3
 8003382:	f003 0311 	and.w	r3, r3, #17
 8003386:	431a      	orrs	r2, r3
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	ea42 0103 	orr.w	r1, r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	0d5b      	lsrs	r3, r3, #21
 8003398:	f003 0202 	and.w	r2, r3, #2
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	1d18      	adds	r0, r3, #4
 80033a0:	6078      	str	r0, [r7, #4]
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 80033a2:	430a      	orrs	r2, r1
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 80033a4:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i++ )
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3301      	adds	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	f77f aee8 	ble.w	8003184 <mbedtls_des_setkey+0x1b8>
    }
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop

080033c4 <mbedtls_des_setkey_enc>:

/*
 * DES key schedule (56-bit, encryption)
 */
int mbedtls_des_setkey_enc( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
    mbedtls_des_setkey( ctx->sk, key );
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6839      	ldr	r1, [r7, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fdfa 	bl	8002fcc <mbedtls_des_setkey>

    return( 0 );
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <mbedtls_des_setkey_dec>:

/*
 * DES key schedule (56-bit, decryption)
 */
int mbedtls_des_setkey_dec( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
    int i;

    mbedtls_des_setkey( ctx->sk, key );
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fdeb 	bl	8002fcc <mbedtls_des_setkey>

    for( i = 0; i < 16; i += 2 )
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	e034      	b.n	8003466 <mbedtls_des_setkey_dec+0x84>
    {
        SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f1c3 021e 	rsb	r2, r3, #30
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f1c3 021e 	rsb	r2, r3, #30
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6939      	ldr	r1, [r7, #16]
 8003424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
        SWAP( ctx->sk[i + 1], ctx->sk[31 - i] );
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f1c3 011f 	rsb	r1, r3, #31
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f1c3 021f 	rsb	r2, r3, #31
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
    for( i = 0; i < 16; i += 2 )
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3302      	adds	r3, #2
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b0f      	cmp	r3, #15
 800346a:	ddc7      	ble.n	80033fc <mbedtls_des_setkey_dec+0x1a>
    }

    return( 0 );
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <mbedtls_des_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)
int mbedtls_des_crypt_ecb( mbedtls_des_context *ctx,
                    const unsigned char input[8],
                    unsigned char output[8] )
{
 8003478:	b480      	push	{r7}
 800347a:	b08b      	sub	sp, #44	@ 0x2c
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	61bb      	str	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE( input, 0 );
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	061a      	lsls	r2, r3, #24
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	3301      	adds	r3, #1
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	431a      	orrs	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	3302      	adds	r3, #2
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	4313      	orrs	r3, r2
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	3203      	adds	r2, #3
 80034a6:	7812      	ldrb	r2, [r2, #0]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	623b      	str	r3, [r7, #32]
    Y = MBEDTLS_GET_UINT32_BE( input, 4 );
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	3304      	adds	r3, #4
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	061a      	lsls	r2, r3, #24
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	3305      	adds	r3, #5
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	431a      	orrs	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	3306      	adds	r3, #6
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	4313      	orrs	r3, r2
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	3207      	adds	r2, #7
 80034cc:	7812      	ldrb	r2, [r2, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61fb      	str	r3, [r7, #28]

    DES_IP( X, Y );
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	091a      	lsrs	r2, r3, #4
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4053      	eors	r3, r2
 80034da:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	4053      	eors	r3, r2
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	6a3a      	ldr	r2, [r7, #32]
 80034ee:	4053      	eors	r3, r2
 80034f0:	623b      	str	r3, [r7, #32]
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	0c1a      	lsrs	r2, r3, #16
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4053      	eors	r3, r2
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	4053      	eors	r3, r2
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	6a3a      	ldr	r2, [r7, #32]
 800350c:	4053      	eors	r3, r2
 800350e:	623b      	str	r3, [r7, #32]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	089a      	lsrs	r2, r3, #2
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	4053      	eors	r3, r2
 8003518:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	6a3a      	ldr	r2, [r7, #32]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	4053      	eors	r3, r2
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	4053      	eors	r3, r2
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	0a1a      	lsrs	r2, r3, #8
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	4053      	eors	r3, r2
 8003538:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	6a3a      	ldr	r2, [r7, #32]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	4053      	eors	r3, r2
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	4053      	eors	r3, r2
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	6a3a      	ldr	r2, [r7, #32]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4053      	eors	r3, r2
 800355e:	f003 33aa 	and.w	r3, r3, #2863311530	@ 0xaaaaaaaa
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	4053      	eors	r3, r2
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	6a3a      	ldr	r2, [r7, #32]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	4053      	eors	r3, r2
 8003572:	623b      	str	r3, [r7, #32]
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800357a:	623b      	str	r3, [r7, #32]

    for( i = 0; i < 8; i++ )
 800357c:	2300      	movs	r3, #0
 800357e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003580:	e0a6      	b.n	80036d0 <mbedtls_des_crypt_ecb+0x258>
    {
        DES_ROUND( Y, X );
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	1d1a      	adds	r2, r3, #4
 8003586:	61ba      	str	r2, [r7, #24]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	4053      	eors	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003596:	4a95      	ldr	r2, [pc, #596]	@ (80037ec <mbedtls_des_crypt_ecb+0x374>)
 8003598:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035a4:	4992      	ldr	r1, [pc, #584]	@ (80037f0 <mbedtls_des_crypt_ecb+0x378>)
 80035a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035aa:	405a      	eors	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	0c1b      	lsrs	r3, r3, #16
 80035b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035b4:	498f      	ldr	r1, [pc, #572]	@ (80037f4 <mbedtls_des_crypt_ecb+0x37c>)
 80035b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035ba:	405a      	eors	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	0e1b      	lsrs	r3, r3, #24
 80035c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035c4:	498c      	ldr	r1, [pc, #560]	@ (80037f8 <mbedtls_des_crypt_ecb+0x380>)
 80035c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035ca:	4053      	eors	r3, r2
 80035cc:	6a3a      	ldr	r2, [r7, #32]
 80035ce:	4053      	eors	r3, r2
 80035d0:	623b      	str	r3, [r7, #32]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	1d1a      	adds	r2, r3, #4
 80035d6:	61ba      	str	r2, [r7, #24]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	ea4f 1333 	mov.w	r3, r3, ror #4
 80035e0:	4053      	eors	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035ea:	4a84      	ldr	r2, [pc, #528]	@ (80037fc <mbedtls_des_crypt_ecb+0x384>)
 80035ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035f8:	4981      	ldr	r1, [pc, #516]	@ (8003800 <mbedtls_des_crypt_ecb+0x388>)
 80035fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035fe:	405a      	eors	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	0c1b      	lsrs	r3, r3, #16
 8003604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003608:	497e      	ldr	r1, [pc, #504]	@ (8003804 <mbedtls_des_crypt_ecb+0x38c>)
 800360a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800360e:	405a      	eors	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	0e1b      	lsrs	r3, r3, #24
 8003614:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003618:	497b      	ldr	r1, [pc, #492]	@ (8003808 <mbedtls_des_crypt_ecb+0x390>)
 800361a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800361e:	4053      	eors	r3, r2
 8003620:	6a3a      	ldr	r2, [r7, #32]
 8003622:	4053      	eors	r3, r2
 8003624:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1d1a      	adds	r2, r3, #4
 800362a:	61ba      	str	r2, [r7, #24]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a3a      	ldr	r2, [r7, #32]
 8003630:	4053      	eors	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800363a:	4a6c      	ldr	r2, [pc, #432]	@ (80037ec <mbedtls_des_crypt_ecb+0x374>)
 800363c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003648:	4969      	ldr	r1, [pc, #420]	@ (80037f0 <mbedtls_des_crypt_ecb+0x378>)
 800364a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800364e:	405a      	eors	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	0c1b      	lsrs	r3, r3, #16
 8003654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003658:	4966      	ldr	r1, [pc, #408]	@ (80037f4 <mbedtls_des_crypt_ecb+0x37c>)
 800365a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800365e:	405a      	eors	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	0e1b      	lsrs	r3, r3, #24
 8003664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003668:	4963      	ldr	r1, [pc, #396]	@ (80037f8 <mbedtls_des_crypt_ecb+0x380>)
 800366a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800366e:	4053      	eors	r3, r2
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	4053      	eors	r3, r2
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	1d1a      	adds	r2, r3, #4
 800367a:	61ba      	str	r2, [r7, #24]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	ea4f 1333 	mov.w	r3, r3, ror #4
 8003684:	4053      	eors	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800368e:	4a5b      	ldr	r2, [pc, #364]	@ (80037fc <mbedtls_des_crypt_ecb+0x384>)
 8003690:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800369c:	4958      	ldr	r1, [pc, #352]	@ (8003800 <mbedtls_des_crypt_ecb+0x388>)
 800369e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036a2:	405a      	eors	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036ac:	4955      	ldr	r1, [pc, #340]	@ (8003804 <mbedtls_des_crypt_ecb+0x38c>)
 80036ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036b2:	405a      	eors	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	0e1b      	lsrs	r3, r3, #24
 80036b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036bc:	4952      	ldr	r1, [pc, #328]	@ (8003808 <mbedtls_des_crypt_ecb+0x390>)
 80036be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036c2:	4053      	eors	r3, r2
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	4053      	eors	r3, r2
 80036c8:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	3301      	adds	r3, #1
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d2:	2b07      	cmp	r3, #7
 80036d4:	f77f af55 	ble.w	8003582 <mbedtls_des_crypt_ecb+0x10a>
    }

    DES_FP( Y, X );
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	ea4f 0373 	mov.w	r3, r3, ror #1
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	4053      	eors	r3, r2
 80036e6:	f003 33aa 	and.w	r3, r3, #2863311530	@ 0xaaaaaaaa
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	4053      	eors	r3, r2
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	6a3a      	ldr	r2, [r7, #32]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	4053      	eors	r3, r2
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	ea4f 0373 	mov.w	r3, r3, ror #1
 8003702:	623b      	str	r3, [r7, #32]
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	0a1a      	lsrs	r2, r3, #8
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4053      	eors	r3, r2
 800370c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	4053      	eors	r3, r2
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	6a3a      	ldr	r2, [r7, #32]
 8003720:	4053      	eors	r3, r2
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	089a      	lsrs	r2, r3, #2
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4053      	eors	r3, r2
 800372c:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	4053      	eors	r3, r2
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	6a3a      	ldr	r2, [r7, #32]
 8003740:	4053      	eors	r3, r2
 8003742:	623b      	str	r3, [r7, #32]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	0c1a      	lsrs	r2, r3, #16
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	4053      	eors	r3, r2
 800374c:	b29b      	uxth	r3, r3
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	4053      	eors	r3, r2
 8003756:	623b      	str	r3, [r7, #32]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	4053      	eors	r3, r2
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	091a      	lsrs	r2, r3, #4
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	4053      	eors	r3, r2
 800376a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	6a3a      	ldr	r2, [r7, #32]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	4053      	eors	r3, r2
 8003776:	623b      	str	r3, [r7, #32]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	4053      	eors	r3, r2
 8003780:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_BE( Y, output, 0 );
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	0e1b      	lsrs	r3, r3, #24
 8003786:	b2da      	uxtb	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	0c1a      	lsrs	r2, r3, #16
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3301      	adds	r3, #1
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	0a1a      	lsrs	r2, r3, #8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3302      	adds	r3, #2
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3303      	adds	r3, #3
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_BE( X, output, 4 );
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	0e1a      	lsrs	r2, r3, #24
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	0c1a      	lsrs	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3305      	adds	r3, #5
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	0a1a      	lsrs	r2, r3, #8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3306      	adds	r3, #6
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3307      	adds	r3, #7
 80037d6:	6a3a      	ldr	r2, [r7, #32]
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]

    return( 0 );
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	372c      	adds	r7, #44	@ 0x2c
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	08007e7c 	.word	0x08007e7c
 80037f0:	08007c7c 	.word	0x08007c7c
 80037f4:	08007a7c 	.word	0x08007a7c
 80037f8:	0800787c 	.word	0x0800787c
 80037fc:	08007d7c 	.word	0x08007d7c
 8003800:	08007b7c 	.word	0x08007b7c
 8003804:	0800797c 	.word	0x0800797c
 8003808:	0800777c 	.word	0x0800777c

0800380c <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <mbedtls_platform_zeroize+0x1c>
        memset_func( buf, 0, len );
 800381c:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <mbedtls_platform_zeroize+0x24>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	2100      	movs	r1, #0
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000020 	.word	0x20000020

08003834 <User_Init>:

mbedtls_aes_context aes_ctx;
mbedtls_des_context des_ctx;
int key_length = 128;

void User_Init() {
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
	mbedtls_aes_init(&aes_ctx);
 8003838:	4803      	ldr	r0, [pc, #12]	@ (8003848 <User_Init+0x14>)
 800383a:	f7fe f9e9 	bl	8001c10 <mbedtls_aes_init>
	mbedtls_des_init(&des_ctx);
 800383e:	4803      	ldr	r0, [pc, #12]	@ (800384c <User_Init+0x18>)
 8003840:	f7ff fbb7 	bl	8002fb2 <mbedtls_des_init>
}
 8003844:	bf00      	nop
 8003846:	bd80      	pop	{r7, pc}
 8003848:	200044b0 	.word	0x200044b0
 800384c:	200045c8 	.word	0x200045c8

08003850 <AES_SetEncryptionKey>:

NutStatus_e AES_SetEncryptionKey(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
	*result_length = 0;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
	if (mbedtls_aes_setkey_enc(&aes_ctx, received_data_ptr, key_length))
 8003864:	4b08      	ldr	r3, [pc, #32]	@ (8003888 <AES_SetEncryptionKey+0x38>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	4807      	ldr	r0, [pc, #28]	@ (800388c <AES_SetEncryptionKey+0x3c>)
 800386e:	f7fe f9ef 	bl	8001c50 <mbedtls_aes_setkey_enc>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <AES_SetEncryptionKey+0x2c>
		return NUT_ERROR;
 8003878:	2302      	movs	r3, #2
 800387a:	e000      	b.n	800387e <AES_SetEncryptionKey+0x2e>
	return NUT_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000024 	.word	0x20000024
 800388c:	200044b0 	.word	0x200044b0

08003890 <AES_SetDecryptionKey>:

NutStatus_e AES_SetDecryptionKey(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
	*result_length = 0;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
	if (mbedtls_aes_setkey_dec(&aes_ctx, received_data_ptr, key_length))
 80038a4:	4b08      	ldr	r3, [pc, #32]	@ (80038c8 <AES_SetDecryptionKey+0x38>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	68f9      	ldr	r1, [r7, #12]
 80038ac:	4807      	ldr	r0, [pc, #28]	@ (80038cc <AES_SetDecryptionKey+0x3c>)
 80038ae:	f7fe fbc3 	bl	8002038 <mbedtls_aes_setkey_dec>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <AES_SetDecryptionKey+0x2c>
		return NUT_ERROR;
 80038b8:	2302      	movs	r3, #2
 80038ba:	e000      	b.n	80038be <AES_SetDecryptionKey+0x2e>
	return NUT_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000024 	.word	0x20000024
 80038cc:	200044b0 	.word	0x200044b0

080038d0 <AES_Encrypt>:

NutStatus_e AES_Encrypt(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
	*result_length = 16;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2210      	movs	r2, #16
 80038e2:	601a      	str	r2, [r3, #0]
	vNut_Quiet();
 80038e4:	f7fd fc26 	bl	8001134 <vNut_Quiet>
	vNut_LED(1);
 80038e8:	2001      	movs	r0, #1
 80038ea:	f7fd fc4b 	bl	8001184 <vNut_LED>
	vNut_IO_USER(1);
 80038ee:	2001      	movs	r0, #1
 80038f0:	f7fd fc74 	bl	80011dc <vNut_IO_USER>
	vNut_IO_1(1);
 80038f4:	2001      	movs	r0, #1
 80038f6:	f7fd fc5b 	bl	80011b0 <vNut_IO_1>
	if (mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_ENCRYPT, received_data_ptr, result_buffer_ptr))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	2101      	movs	r1, #1
 8003900:	480b      	ldr	r0, [pc, #44]	@ (8003930 <AES_Encrypt+0x60>)
 8003902:	f7ff fb3b 	bl	8002f7c <mbedtls_aes_crypt_ecb>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <AES_Encrypt+0x40>
		return NUT_ERROR;
 800390c:	2302      	movs	r3, #2
 800390e:	e00b      	b.n	8003928 <AES_Encrypt+0x58>
	vNut_IO_1(0);
 8003910:	2000      	movs	r0, #0
 8003912:	f7fd fc4d 	bl	80011b0 <vNut_IO_1>
	vNut_IO_USER(0);
 8003916:	2000      	movs	r0, #0
 8003918:	f7fd fc60 	bl	80011dc <vNut_IO_USER>
	vNut_LED(0);
 800391c:	2000      	movs	r0, #0
 800391e:	f7fd fc31 	bl	8001184 <vNut_LED>
	vNut_unQuiet();
 8003922:	f7fd fc1b 	bl	800115c <vNut_unQuiet>
	return NUT_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	200044b0 	.word	0x200044b0

08003934 <AES_Decrypt>:

NutStatus_e AES_Decrypt(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
	*result_length = 16;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2210      	movs	r2, #16
 8003946:	601a      	str	r2, [r3, #0]
	vNut_Quiet();
 8003948:	f7fd fbf4 	bl	8001134 <vNut_Quiet>
	vNut_LED(1);
 800394c:	2001      	movs	r0, #1
 800394e:	f7fd fc19 	bl	8001184 <vNut_LED>
	vNut_IO_USER(1);
 8003952:	2001      	movs	r0, #1
 8003954:	f7fd fc42 	bl	80011dc <vNut_IO_USER>
	vNut_IO_1(1);
 8003958:	2001      	movs	r0, #1
 800395a:	f7fd fc29 	bl	80011b0 <vNut_IO_1>
	if (mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_DECRYPT, received_data_ptr, result_buffer_ptr))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	2100      	movs	r1, #0
 8003964:	480b      	ldr	r0, [pc, #44]	@ (8003994 <AES_Decrypt+0x60>)
 8003966:	f7ff fb09 	bl	8002f7c <mbedtls_aes_crypt_ecb>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <AES_Decrypt+0x40>
		return NUT_ERROR;
 8003970:	2302      	movs	r3, #2
 8003972:	e00b      	b.n	800398c <AES_Decrypt+0x58>
	vNut_IO_1(0);
 8003974:	2000      	movs	r0, #0
 8003976:	f7fd fc1b 	bl	80011b0 <vNut_IO_1>
	vNut_IO_USER(0);
 800397a:	2000      	movs	r0, #0
 800397c:	f7fd fc2e 	bl	80011dc <vNut_IO_USER>
	vNut_LED(0);
 8003980:	2000      	movs	r0, #0
 8003982:	f7fd fbff 	bl	8001184 <vNut_LED>
	vNut_unQuiet();
 8003986:	f7fd fbe9 	bl	800115c <vNut_unQuiet>
	return NUT_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	200044b0 	.word	0x200044b0

08003998 <DES_SetEncryptionKey>:

NutStatus_e DES_SetEncryptionKey(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
	*result_length = 0;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
	if (mbedtls_des_setkey_enc(&des_ctx, received_data_ptr))
 80039ac:	68f9      	ldr	r1, [r7, #12]
 80039ae:	4806      	ldr	r0, [pc, #24]	@ (80039c8 <DES_SetEncryptionKey+0x30>)
 80039b0:	f7ff fd08 	bl	80033c4 <mbedtls_des_setkey_enc>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <DES_SetEncryptionKey+0x26>
		return NUT_ERROR;
 80039ba:	2302      	movs	r3, #2
 80039bc:	e000      	b.n	80039c0 <DES_SetEncryptionKey+0x28>
	return NUT_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	200045c8 	.word	0x200045c8

080039cc <DES_SetDecryptionKey>:

NutStatus_e DES_SetDecryptionKey(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
	*result_length = 0;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
	if (mbedtls_des_setkey_dec(&des_ctx, received_data_ptr))
 80039e0:	68f9      	ldr	r1, [r7, #12]
 80039e2:	4806      	ldr	r0, [pc, #24]	@ (80039fc <DES_SetDecryptionKey+0x30>)
 80039e4:	f7ff fcfd 	bl	80033e2 <mbedtls_des_setkey_dec>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <DES_SetDecryptionKey+0x26>
		return NUT_ERROR;
 80039ee:	2302      	movs	r3, #2
 80039f0:	e000      	b.n	80039f4 <DES_SetDecryptionKey+0x28>
	return NUT_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	200045c8 	.word	0x200045c8

08003a00 <DES_Encrypt>:

NutStatus_e DES_Encrypt(uint8_t *received_data_ptr, uint32_t received_data_length, uint8_t *result_buffer_ptr, uint32_t *result_length,
		uint32_t result_buffer_MAX_size) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
	*result_length = 8;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2208      	movs	r2, #8
 8003a12:	601a      	str	r2, [r3, #0]
	if (mbedtls_des_crypt_ecb(&des_ctx, received_data_ptr, result_buffer_ptr))
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68f9      	ldr	r1, [r7, #12]
 8003a18:	4806      	ldr	r0, [pc, #24]	@ (8003a34 <DES_Encrypt+0x34>)
 8003a1a:	f7ff fd2d 	bl	8003478 <mbedtls_des_crypt_ecb>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <DES_Encrypt+0x28>
		return NUT_ERROR;
 8003a24:	2302      	movs	r3, #2
 8003a26:	e000      	b.n	8003a2a <DES_Encrypt+0x2a>
	return NUT_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	200045c8 	.word	0x200045c8

08003a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a42:	2003      	movs	r0, #3
 8003a44:	f000 fa3e 	bl	8003ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a48:	200f      	movs	r0, #15
 8003a4a:	f000 f80d 	bl	8003a68 <HAL_InitTick>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	71fb      	strb	r3, [r7, #7]
 8003a58:	e001      	b.n	8003a5e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a5a:	f7fd fc75 	bl	8001348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a74:	4b17      	ldr	r3, [pc, #92]	@ (8003ad4 <HAL_InitTick+0x6c>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d023      	beq.n	8003ac4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a7c:	4b16      	ldr	r3, [pc, #88]	@ (8003ad8 <HAL_InitTick+0x70>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4b14      	ldr	r3, [pc, #80]	@ (8003ad4 <HAL_InitTick+0x6c>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	4619      	mov	r1, r3
 8003a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fa3d 	bl	8003f12 <HAL_SYSTICK_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b0f      	cmp	r3, #15
 8003aa2:	d809      	bhi.n	8003ab8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aac:	f000 fa15 	bl	8003eda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8003adc <HAL_InitTick+0x74>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e007      	b.n	8003ac8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	e004      	b.n	8003ac8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
 8003ac2:	e001      	b.n	8003ac8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000058 	.word	0x20000058
 8003ad8:	2000001c 	.word	0x2000001c
 8003adc:	20000054 	.word	0x20000054

08003ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <HAL_IncTick+0x20>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <HAL_IncTick+0x24>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4413      	add	r3, r2
 8003af0:	4a04      	ldr	r2, [pc, #16]	@ (8003b04 <HAL_IncTick+0x24>)
 8003af2:	6013      	str	r3, [r2, #0]
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000058 	.word	0x20000058
 8003b04:	20004648 	.word	0x20004648

08003b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b0c:	4b03      	ldr	r3, [pc, #12]	@ (8003b1c <HAL_GetTick+0x14>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20004648 	.word	0x20004648

08003b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b28:	f7ff ffee 	bl	8003b08 <HAL_GetTick>
 8003b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d005      	beq.n	8003b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <HAL_Delay+0x44>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b46:	bf00      	nop
 8003b48:	f7ff ffde 	bl	8003b08 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d8f7      	bhi.n	8003b48 <HAL_Delay+0x28>
  {
  }
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000058 	.word	0x20000058

08003b68 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e0ed      	b.n	8003d56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd fc02 	bl	8001390 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b9c:	f7ff ffb4 	bl	8003b08 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ba2:	e012      	b.n	8003bca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ba4:	f7ff ffb0 	bl	8003b08 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b0a      	cmp	r3, #10
 8003bb0:	d90b      	bls.n	8003bca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2205      	movs	r2, #5
 8003bc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0c5      	b.n	8003d56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0e5      	beq.n	8003ba4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0202 	bic.w	r2, r2, #2
 8003be6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003be8:	f7ff ff8e 	bl	8003b08 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003bee:	e012      	b.n	8003c16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bf0:	f7ff ff8a 	bl	8003b08 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b0a      	cmp	r3, #10
 8003bfc:	d90b      	bls.n	8003c16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2205      	movs	r2, #5
 8003c0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e09f      	b.n	8003d56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e5      	bne.n	8003bf0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7e1b      	ldrb	r3, [r3, #24]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d108      	bne.n	8003c3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	e007      	b.n	8003c4e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	7e5b      	ldrb	r3, [r3, #25]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d108      	bne.n	8003c68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e007      	b.n	8003c78 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	7e9b      	ldrb	r3, [r3, #26]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d108      	bne.n	8003c92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0220 	orr.w	r2, r2, #32
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e007      	b.n	8003ca2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0220 	bic.w	r2, r2, #32
 8003ca0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7edb      	ldrb	r3, [r3, #27]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d108      	bne.n	8003cbc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0210 	bic.w	r2, r2, #16
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	e007      	b.n	8003ccc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0210 	orr.w	r2, r2, #16
 8003cca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7f1b      	ldrb	r3, [r3, #28]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d108      	bne.n	8003ce6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0208 	orr.w	r2, r2, #8
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e007      	b.n	8003cf6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0208 	bic.w	r2, r2, #8
 8003cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	7f5b      	ldrb	r3, [r3, #29]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d108      	bne.n	8003d10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0204 	orr.w	r2, r2, #4
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	e007      	b.n	8003d20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	ea42 0103 	orr.w	r1, r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	1e5a      	subs	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d70:	4b0c      	ldr	r3, [pc, #48]	@ (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d92:	4a04      	ldr	r2, [pc, #16]	@ (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	60d3      	str	r3, [r2, #12]
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dac:	4b04      	ldr	r3, [pc, #16]	@ (8003dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	f003 0307 	and.w	r3, r3, #7
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	6039      	str	r1, [r7, #0]
 8003dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	db0a      	blt.n	8003dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	490c      	ldr	r1, [pc, #48]	@ (8003e10 <__NVIC_SetPriority+0x4c>)
 8003dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de2:	0112      	lsls	r2, r2, #4
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	440b      	add	r3, r1
 8003de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dec:	e00a      	b.n	8003e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	4908      	ldr	r1, [pc, #32]	@ (8003e14 <__NVIC_SetPriority+0x50>)
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	3b04      	subs	r3, #4
 8003dfc:	0112      	lsls	r2, r2, #4
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	440b      	add	r3, r1
 8003e02:	761a      	strb	r2, [r3, #24]
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	e000e100 	.word	0xe000e100
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b089      	sub	sp, #36	@ 0x24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f1c3 0307 	rsb	r3, r3, #7
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	bf28      	it	cs
 8003e36:	2304      	movcs	r3, #4
 8003e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	2b06      	cmp	r3, #6
 8003e40:	d902      	bls.n	8003e48 <NVIC_EncodePriority+0x30>
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3b03      	subs	r3, #3
 8003e46:	e000      	b.n	8003e4a <NVIC_EncodePriority+0x32>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43da      	mvns	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e60:	f04f 31ff 	mov.w	r1, #4294967295
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6a:	43d9      	mvns	r1, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e70:	4313      	orrs	r3, r2
         );
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3724      	adds	r7, #36	@ 0x24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e90:	d301      	bcc.n	8003e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e92:	2301      	movs	r3, #1
 8003e94:	e00f      	b.n	8003eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e96:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec0 <SysTick_Config+0x40>)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e9e:	210f      	movs	r1, #15
 8003ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea4:	f7ff ff8e 	bl	8003dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ea8:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <SysTick_Config+0x40>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eae:	4b04      	ldr	r3, [pc, #16]	@ (8003ec0 <SysTick_Config+0x40>)
 8003eb0:	2207      	movs	r2, #7
 8003eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	e000e010 	.word	0xe000e010

08003ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff ff47 	bl	8003d60 <__NVIC_SetPriorityGrouping>
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b086      	sub	sp, #24
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003eec:	f7ff ff5c 	bl	8003da8 <__NVIC_GetPriorityGrouping>
 8003ef0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	6978      	ldr	r0, [r7, #20]
 8003ef8:	f7ff ff8e 	bl	8003e18 <NVIC_EncodePriority>
 8003efc:	4602      	mov	r2, r0
 8003efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f02:	4611      	mov	r1, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff ff5d 	bl	8003dc4 <__NVIC_SetPriority>
}
 8003f0a:	bf00      	nop
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ffb0 	bl	8003e80 <SysTick_Config>
 8003f20:	4603      	mov	r3, r0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f3a:	e17f      	b.n	800423c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8171 	beq.w	8004236 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d005      	beq.n	8003f6c <HAL_GPIO_Init+0x40>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d130      	bne.n	8003fce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4013      	ands	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43db      	mvns	r3, r3
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	f003 0201 	and.w	r2, r3, #1
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d118      	bne.n	800400c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	08db      	lsrs	r3, r3, #3
 8003ff6:	f003 0201 	and.w	r2, r3, #1
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b03      	cmp	r3, #3
 8004016:	d017      	beq.n	8004048 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	2203      	movs	r2, #3
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d123      	bne.n	800409c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	08da      	lsrs	r2, r3, #3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3208      	adds	r2, #8
 800405c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004060:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	220f      	movs	r2, #15
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	08da      	lsrs	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3208      	adds	r2, #8
 8004096:	6939      	ldr	r1, [r7, #16]
 8004098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	2203      	movs	r2, #3
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0203 	and.w	r2, r3, #3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80ac 	beq.w	8004236 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040de:	4b5f      	ldr	r3, [pc, #380]	@ (800425c <HAL_GPIO_Init+0x330>)
 80040e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e2:	4a5e      	ldr	r2, [pc, #376]	@ (800425c <HAL_GPIO_Init+0x330>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80040ea:	4b5c      	ldr	r3, [pc, #368]	@ (800425c <HAL_GPIO_Init+0x330>)
 80040ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040f6:	4a5a      	ldr	r2, [pc, #360]	@ (8004260 <HAL_GPIO_Init+0x334>)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	3302      	adds	r3, #2
 80040fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004102:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	220f      	movs	r2, #15
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4013      	ands	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004120:	d025      	beq.n	800416e <HAL_GPIO_Init+0x242>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a4f      	ldr	r2, [pc, #316]	@ (8004264 <HAL_GPIO_Init+0x338>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01f      	beq.n	800416a <HAL_GPIO_Init+0x23e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a4e      	ldr	r2, [pc, #312]	@ (8004268 <HAL_GPIO_Init+0x33c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d019      	beq.n	8004166 <HAL_GPIO_Init+0x23a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4d      	ldr	r2, [pc, #308]	@ (800426c <HAL_GPIO_Init+0x340>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_GPIO_Init+0x236>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4c      	ldr	r2, [pc, #304]	@ (8004270 <HAL_GPIO_Init+0x344>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00d      	beq.n	800415e <HAL_GPIO_Init+0x232>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4b      	ldr	r2, [pc, #300]	@ (8004274 <HAL_GPIO_Init+0x348>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <HAL_GPIO_Init+0x22e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a4a      	ldr	r2, [pc, #296]	@ (8004278 <HAL_GPIO_Init+0x34c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <HAL_GPIO_Init+0x22a>
 8004152:	2306      	movs	r3, #6
 8004154:	e00c      	b.n	8004170 <HAL_GPIO_Init+0x244>
 8004156:	2307      	movs	r3, #7
 8004158:	e00a      	b.n	8004170 <HAL_GPIO_Init+0x244>
 800415a:	2305      	movs	r3, #5
 800415c:	e008      	b.n	8004170 <HAL_GPIO_Init+0x244>
 800415e:	2304      	movs	r3, #4
 8004160:	e006      	b.n	8004170 <HAL_GPIO_Init+0x244>
 8004162:	2303      	movs	r3, #3
 8004164:	e004      	b.n	8004170 <HAL_GPIO_Init+0x244>
 8004166:	2302      	movs	r3, #2
 8004168:	e002      	b.n	8004170 <HAL_GPIO_Init+0x244>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HAL_GPIO_Init+0x244>
 800416e:	2300      	movs	r3, #0
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	f002 0203 	and.w	r2, r2, #3
 8004176:	0092      	lsls	r2, r2, #2
 8004178:	4093      	lsls	r3, r2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004180:	4937      	ldr	r1, [pc, #220]	@ (8004260 <HAL_GPIO_Init+0x334>)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	089b      	lsrs	r3, r3, #2
 8004186:	3302      	adds	r3, #2
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800418e:	4b3b      	ldr	r3, [pc, #236]	@ (800427c <HAL_GPIO_Init+0x350>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	43db      	mvns	r3, r3
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4013      	ands	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041b2:	4a32      	ldr	r2, [pc, #200]	@ (800427c <HAL_GPIO_Init+0x350>)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041b8:	4b30      	ldr	r3, [pc, #192]	@ (800427c <HAL_GPIO_Init+0x350>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	43db      	mvns	r3, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041dc:	4a27      	ldr	r2, [pc, #156]	@ (800427c <HAL_GPIO_Init+0x350>)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041e2:	4b26      	ldr	r3, [pc, #152]	@ (800427c <HAL_GPIO_Init+0x350>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	43db      	mvns	r3, r3
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004206:	4a1d      	ldr	r2, [pc, #116]	@ (800427c <HAL_GPIO_Init+0x350>)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800420c:	4b1b      	ldr	r3, [pc, #108]	@ (800427c <HAL_GPIO_Init+0x350>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	43db      	mvns	r3, r3
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004230:	4a12      	ldr	r2, [pc, #72]	@ (800427c <HAL_GPIO_Init+0x350>)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	3301      	adds	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	f47f ae78 	bne.w	8003f3c <HAL_GPIO_Init+0x10>
  }
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	40010000 	.word	0x40010000
 8004264:	48000400 	.word	0x48000400
 8004268:	48000800 	.word	0x48000800
 800426c:	48000c00 	.word	0x48000c00
 8004270:	48001000 	.word	0x48001000
 8004274:	48001400 	.word	0x48001400
 8004278:	48001800 	.word	0x48001800
 800427c:	40010400 	.word	0x40010400

08004280 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	887b      	ldrh	r3, [r7, #2]
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
 800429c:	e001      	b.n	80042a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	807b      	strh	r3, [r7, #2]
 80042bc:	4613      	mov	r3, r2
 80042be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042c0:	787b      	ldrb	r3, [r7, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042cc:	e002      	b.n	80042d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e08d      	b.n	800440e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fd f886 	bl	8001418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	@ 0x24
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004330:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004340:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d107      	bne.n	800435a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	e006      	b.n	8004368 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004366:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d108      	bne.n	8004382 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	e007      	b.n	8004392 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004390:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69d9      	ldr	r1, [r3, #28]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b20      	cmp	r3, #32
 800442a:	d138      	bne.n	800449e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004436:	2302      	movs	r3, #2
 8004438:	e032      	b.n	80044a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2224      	movs	r2, #36	@ 0x24
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004468:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0201 	orr.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d139      	bne.n	8004536 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e033      	b.n	8004538 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	@ 0x24
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0201 	orr.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e000      	b.n	8004538 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <HAL_PWREx_GetVoltageRange+0x18>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40007000 	.word	0x40007000

08004560 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800456e:	d130      	bne.n	80045d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004570:	4b23      	ldr	r3, [pc, #140]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800457c:	d038      	beq.n	80045f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800457e:	4b20      	ldr	r3, [pc, #128]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004586:	4a1e      	ldr	r2, [pc, #120]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004588:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800458c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800458e:	4b1d      	ldr	r3, [pc, #116]	@ (8004604 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2232      	movs	r2, #50	@ 0x32
 8004594:	fb02 f303 	mul.w	r3, r2, r3
 8004598:	4a1b      	ldr	r2, [pc, #108]	@ (8004608 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	0c9b      	lsrs	r3, r3, #18
 80045a0:	3301      	adds	r3, #1
 80045a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045a4:	e002      	b.n	80045ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045ac:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b8:	d102      	bne.n	80045c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f2      	bne.n	80045a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045cc:	d110      	bne.n	80045f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e00f      	b.n	80045f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80045d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045de:	d007      	beq.n	80045f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045e0:	4b07      	ldr	r3, [pc, #28]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045e8:	4a05      	ldr	r2, [pc, #20]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40007000 	.word	0x40007000
 8004604:	2000001c 	.word	0x2000001c
 8004608:	431bde83 	.word	0x431bde83

0800460c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e3ca      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461e:	4b97      	ldr	r3, [pc, #604]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004628:	4b94      	ldr	r3, [pc, #592]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 80e4 	beq.w	8004808 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <HAL_RCC_OscConfig+0x4a>
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b0c      	cmp	r3, #12
 800464a:	f040 808b 	bne.w	8004764 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b01      	cmp	r3, #1
 8004652:	f040 8087 	bne.w	8004764 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004656:	4b89      	ldr	r3, [pc, #548]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_RCC_OscConfig+0x62>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e3a2      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1a      	ldr	r2, [r3, #32]
 8004672:	4b82      	ldr	r3, [pc, #520]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d004      	beq.n	8004688 <HAL_RCC_OscConfig+0x7c>
 800467e:	4b7f      	ldr	r3, [pc, #508]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004686:	e005      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
 8004688:	4b7c      	ldr	r3, [pc, #496]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 800468a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004694:	4293      	cmp	r3, r2
 8004696:	d223      	bcs.n	80046e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fd55 	bl	800514c <RCC_SetFlashLatencyFromMSIRange>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e383      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ac:	4b73      	ldr	r3, [pc, #460]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a72      	ldr	r2, [pc, #456]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80046b2:	f043 0308 	orr.w	r3, r3, #8
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4b70      	ldr	r3, [pc, #448]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	496d      	ldr	r1, [pc, #436]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ca:	4b6c      	ldr	r3, [pc, #432]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	4968      	ldr	r1, [pc, #416]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
 80046de:	e025      	b.n	800472c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046e0:	4b66      	ldr	r3, [pc, #408]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a65      	ldr	r2, [pc, #404]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80046e6:	f043 0308 	orr.w	r3, r3, #8
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b63      	ldr	r3, [pc, #396]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	4960      	ldr	r1, [pc, #384]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046fe:	4b5f      	ldr	r3, [pc, #380]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	495b      	ldr	r1, [pc, #364]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 800470e:	4313      	orrs	r3, r2
 8004710:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d109      	bne.n	800472c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fd15 	bl	800514c <RCC_SetFlashLatencyFromMSIRange>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e343      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800472c:	f000 fc4a 	bl	8004fc4 <HAL_RCC_GetSysClockFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b52      	ldr	r3, [pc, #328]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	4950      	ldr	r1, [pc, #320]	@ (8004880 <HAL_RCC_OscConfig+0x274>)
 800473e:	5ccb      	ldrb	r3, [r1, r3]
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
 8004748:	4a4e      	ldr	r2, [pc, #312]	@ (8004884 <HAL_RCC_OscConfig+0x278>)
 800474a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800474c:	4b4e      	ldr	r3, [pc, #312]	@ (8004888 <HAL_RCC_OscConfig+0x27c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff f989 	bl	8003a68 <HAL_InitTick>
 8004756:	4603      	mov	r3, r0
 8004758:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d052      	beq.n	8004806 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	e327      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d032      	beq.n	80047d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800476c:	4b43      	ldr	r3, [pc, #268]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a42      	ldr	r2, [pc, #264]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004778:	f7ff f9c6 	bl	8003b08 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004780:	f7ff f9c2 	bl	8003b08 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e310      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004792:	4b3a      	ldr	r3, [pc, #232]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800479e:	4b37      	ldr	r3, [pc, #220]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a36      	ldr	r2, [pc, #216]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80047a4:	f043 0308 	orr.w	r3, r3, #8
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	4b34      	ldr	r3, [pc, #208]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	4931      	ldr	r1, [pc, #196]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047bc:	4b2f      	ldr	r3, [pc, #188]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	492c      	ldr	r1, [pc, #176]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
 80047d0:	e01a      	b.n	8004808 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047d2:	4b2a      	ldr	r3, [pc, #168]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a29      	ldr	r2, [pc, #164]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047de:	f7ff f993 	bl	8003b08 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047e6:	f7ff f98f 	bl	8003b08 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e2dd      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047f8:	4b20      	ldr	r3, [pc, #128]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f0      	bne.n	80047e6 <HAL_RCC_OscConfig+0x1da>
 8004804:	e000      	b.n	8004808 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004806:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d074      	beq.n	80048fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b08      	cmp	r3, #8
 8004818:	d005      	beq.n	8004826 <HAL_RCC_OscConfig+0x21a>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b0c      	cmp	r3, #12
 800481e:	d10e      	bne.n	800483e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b03      	cmp	r3, #3
 8004824:	d10b      	bne.n	800483e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004826:	4b15      	ldr	r3, [pc, #84]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d064      	beq.n	80048fc <HAL_RCC_OscConfig+0x2f0>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d160      	bne.n	80048fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e2ba      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004846:	d106      	bne.n	8004856 <HAL_RCC_OscConfig+0x24a>
 8004848:	4b0c      	ldr	r3, [pc, #48]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a0b      	ldr	r2, [pc, #44]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 800484e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	e026      	b.n	80048a4 <HAL_RCC_OscConfig+0x298>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800485e:	d115      	bne.n	800488c <HAL_RCC_OscConfig+0x280>
 8004860:	4b06      	ldr	r3, [pc, #24]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a05      	ldr	r2, [pc, #20]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 8004866:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	4b03      	ldr	r3, [pc, #12]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a02      	ldr	r2, [pc, #8]	@ (800487c <HAL_RCC_OscConfig+0x270>)
 8004872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	e014      	b.n	80048a4 <HAL_RCC_OscConfig+0x298>
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000
 8004880:	08007734 	.word	0x08007734
 8004884:	2000001c 	.word	0x2000001c
 8004888:	20000054 	.word	0x20000054
 800488c:	4ba0      	ldr	r3, [pc, #640]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a9f      	ldr	r2, [pc, #636]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	4b9d      	ldr	r3, [pc, #628]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a9c      	ldr	r2, [pc, #624]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 800489e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d013      	beq.n	80048d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7ff f92c 	bl	8003b08 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b4:	f7ff f928 	bl	8003b08 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b64      	cmp	r3, #100	@ 0x64
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e276      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048c6:	4b92      	ldr	r3, [pc, #584]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0x2a8>
 80048d2:	e014      	b.n	80048fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7ff f918 	bl	8003b08 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048dc:	f7ff f914 	bl	8003b08 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	@ 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e262      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ee:	4b88      	ldr	r3, [pc, #544]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x2d0>
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d060      	beq.n	80049cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b04      	cmp	r3, #4
 800490e:	d005      	beq.n	800491c <HAL_RCC_OscConfig+0x310>
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b0c      	cmp	r3, #12
 8004914:	d119      	bne.n	800494a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d116      	bne.n	800494a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800491c:	4b7c      	ldr	r3, [pc, #496]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_OscConfig+0x328>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e23f      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004934:	4b76      	ldr	r3, [pc, #472]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	061b      	lsls	r3, r3, #24
 8004942:	4973      	ldr	r1, [pc, #460]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004944:	4313      	orrs	r3, r2
 8004946:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004948:	e040      	b.n	80049cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d023      	beq.n	800499a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004952:	4b6f      	ldr	r3, [pc, #444]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a6e      	ldr	r2, [pc, #440]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800495c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495e:	f7ff f8d3 	bl	8003b08 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004966:	f7ff f8cf 	bl	8003b08 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e21d      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004978:	4b65      	ldr	r3, [pc, #404]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004984:	4b62      	ldr	r3, [pc, #392]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	061b      	lsls	r3, r3, #24
 8004992:	495f      	ldr	r1, [pc, #380]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004994:	4313      	orrs	r3, r2
 8004996:	604b      	str	r3, [r1, #4]
 8004998:	e018      	b.n	80049cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800499a:	4b5d      	ldr	r3, [pc, #372]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a5c      	ldr	r2, [pc, #368]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 80049a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a6:	f7ff f8af 	bl	8003b08 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ae:	f7ff f8ab 	bl	8003b08 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e1f9      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049c0:	4b53      	ldr	r3, [pc, #332]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1f0      	bne.n	80049ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d03c      	beq.n	8004a52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01c      	beq.n	8004a1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 80049e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7ff f88a 	bl	8003b08 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f8:	f7ff f886 	bl	8003b08 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e1d4      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a0a:	4b41      	ldr	r3, [pc, #260]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0ef      	beq.n	80049f8 <HAL_RCC_OscConfig+0x3ec>
 8004a18:	e01b      	b.n	8004a52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a20:	4a3b      	ldr	r2, [pc, #236]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2a:	f7ff f86d 	bl	8003b08 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a32:	f7ff f869 	bl	8003b08 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e1b7      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a44:	4b32      	ldr	r3, [pc, #200]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1ef      	bne.n	8004a32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 80a6 	beq.w	8004bac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a60:	2300      	movs	r3, #0
 8004a62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a64:	4b2a      	ldr	r3, [pc, #168]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10d      	bne.n	8004a8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a70:	4b27      	ldr	r3, [pc, #156]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a74:	4a26      	ldr	r2, [pc, #152]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a7c:	4b24      	ldr	r3, [pc, #144]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8c:	4b21      	ldr	r3, [pc, #132]	@ (8004b14 <HAL_RCC_OscConfig+0x508>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d118      	bne.n	8004aca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a98:	4b1e      	ldr	r3, [pc, #120]	@ (8004b14 <HAL_RCC_OscConfig+0x508>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b14 <HAL_RCC_OscConfig+0x508>)
 8004a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa4:	f7ff f830 	bl	8003b08 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aac:	f7ff f82c 	bl	8003b08 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e17a      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004abe:	4b15      	ldr	r3, [pc, #84]	@ (8004b14 <HAL_RCC_OscConfig+0x508>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d108      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x4d8>
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ae2:	e029      	b.n	8004b38 <HAL_RCC_OscConfig+0x52c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d115      	bne.n	8004b18 <HAL_RCC_OscConfig+0x50c>
 8004aec:	4b08      	ldr	r3, [pc, #32]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af2:	4a07      	ldr	r2, [pc, #28]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004af4:	f043 0304 	orr.w	r3, r3, #4
 8004af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004afc:	4b04      	ldr	r3, [pc, #16]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b02:	4a03      	ldr	r2, [pc, #12]	@ (8004b10 <HAL_RCC_OscConfig+0x504>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b0c:	e014      	b.n	8004b38 <HAL_RCC_OscConfig+0x52c>
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40007000 	.word	0x40007000
 8004b18:	4b9c      	ldr	r3, [pc, #624]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1e:	4a9b      	ldr	r2, [pc, #620]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b28:	4b98      	ldr	r3, [pc, #608]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2e:	4a97      	ldr	r2, [pc, #604]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004b30:	f023 0304 	bic.w	r3, r3, #4
 8004b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d016      	beq.n	8004b6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fe ffe2 	bl	8003b08 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b46:	e00a      	b.n	8004b5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b48:	f7fe ffde 	bl	8003b08 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e12a      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b5e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0ed      	beq.n	8004b48 <HAL_RCC_OscConfig+0x53c>
 8004b6c:	e015      	b.n	8004b9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fe ffcb 	bl	8003b08 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b76:	f7fe ffc7 	bl	8003b08 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e113      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b8c:	4b7f      	ldr	r3, [pc, #508]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1ed      	bne.n	8004b76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b9a:	7ffb      	ldrb	r3, [r7, #31]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d105      	bne.n	8004bac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba0:	4b7a      	ldr	r3, [pc, #488]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba4:	4a79      	ldr	r2, [pc, #484]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004ba6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004baa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80fe 	beq.w	8004db2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	f040 80d0 	bne.w	8004d60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004bc0:	4b72      	ldr	r3, [pc, #456]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f003 0203 	and.w	r2, r3, #3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d130      	bne.n	8004c36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bde:	3b01      	subs	r3, #1
 8004be0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d127      	bne.n	8004c36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d11f      	bne.n	8004c36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c00:	2a07      	cmp	r2, #7
 8004c02:	bf14      	ite	ne
 8004c04:	2201      	movne	r2, #1
 8004c06:	2200      	moveq	r2, #0
 8004c08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d113      	bne.n	8004c36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d109      	bne.n	8004c36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d06e      	beq.n	8004d14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b0c      	cmp	r3, #12
 8004c3a:	d069      	beq.n	8004d10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c3c:	4b53      	ldr	r3, [pc, #332]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d105      	bne.n	8004c54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c48:	4b50      	ldr	r3, [pc, #320]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0ad      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c58:	4b4c      	ldr	r3, [pc, #304]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a4b      	ldr	r2, [pc, #300]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c64:	f7fe ff50 	bl	8003b08 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6c:	f7fe ff4c 	bl	8003b08 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e09a      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c7e:	4b43      	ldr	r3, [pc, #268]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c8a:	4b40      	ldr	r3, [pc, #256]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	4b40      	ldr	r3, [pc, #256]	@ (8004d90 <HAL_RCC_OscConfig+0x784>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c9a:	3a01      	subs	r2, #1
 8004c9c:	0112      	lsls	r2, r2, #4
 8004c9e:	4311      	orrs	r1, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ca4:	0212      	lsls	r2, r2, #8
 8004ca6:	4311      	orrs	r1, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cac:	0852      	lsrs	r2, r2, #1
 8004cae:	3a01      	subs	r2, #1
 8004cb0:	0552      	lsls	r2, r2, #21
 8004cb2:	4311      	orrs	r1, r2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004cb8:	0852      	lsrs	r2, r2, #1
 8004cba:	3a01      	subs	r2, #1
 8004cbc:	0652      	lsls	r2, r2, #25
 8004cbe:	4311      	orrs	r1, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cc4:	0912      	lsrs	r2, r2, #4
 8004cc6:	0452      	lsls	r2, r2, #17
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	4930      	ldr	r1, [pc, #192]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ce6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ce8:	f7fe ff0e 	bl	8003b08 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fe ff0a 	bl	8003b08 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e058      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d02:	4b22      	ldr	r3, [pc, #136]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d0e:	e050      	b.n	8004db2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e04f      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d14:	4b1d      	ldr	r3, [pc, #116]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d148      	bne.n	8004db2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d20:	4b1a      	ldr	r3, [pc, #104]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a19      	ldr	r2, [pc, #100]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d2c:	4b17      	ldr	r3, [pc, #92]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a16      	ldr	r2, [pc, #88]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d38:	f7fe fee6 	bl	8003b08 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fe fee2 	bl	8003b08 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e030      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d52:	4b0e      	ldr	r3, [pc, #56]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0x734>
 8004d5e:	e028      	b.n	8004db2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d023      	beq.n	8004dae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d66:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a08      	ldr	r2, [pc, #32]	@ (8004d8c <HAL_RCC_OscConfig+0x780>)
 8004d6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d72:	f7fe fec9 	bl	8003b08 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d78:	e00c      	b.n	8004d94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7a:	f7fe fec5 	bl	8003b08 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d905      	bls.n	8004d94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e013      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d94:	4b09      	ldr	r3, [pc, #36]	@ (8004dbc <HAL_RCC_OscConfig+0x7b0>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1ec      	bne.n	8004d7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004da0:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <HAL_RCC_OscConfig+0x7b0>)
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	4905      	ldr	r1, [pc, #20]	@ (8004dbc <HAL_RCC_OscConfig+0x7b0>)
 8004da6:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <HAL_RCC_OscConfig+0x7b4>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	60cb      	str	r3, [r1, #12]
 8004dac:	e001      	b.n	8004db2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	feeefffc 	.word	0xfeeefffc

08004dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0e7      	b.n	8004fa8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b75      	ldr	r3, [pc, #468]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d910      	bls.n	8004e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b72      	ldr	r3, [pc, #456]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 0207 	bic.w	r2, r3, #7
 8004dee:	4970      	ldr	r1, [pc, #448]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b6e      	ldr	r3, [pc, #440]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0cf      	b.n	8004fa8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d010      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	4b66      	ldr	r3, [pc, #408]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d908      	bls.n	8004e36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e24:	4b63      	ldr	r3, [pc, #396]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4960      	ldr	r1, [pc, #384]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d04c      	beq.n	8004edc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e4a:	4b5a      	ldr	r3, [pc, #360]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d121      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0a6      	b.n	8004fa8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e62:	4b54      	ldr	r3, [pc, #336]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d115      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e09a      	b.n	8004fa8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e08e      	b.n	8004fa8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e086      	b.n	8004fa8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e9a:	4b46      	ldr	r3, [pc, #280]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f023 0203 	bic.w	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4943      	ldr	r1, [pc, #268]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eac:	f7fe fe2c 	bl	8003b08 <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb4:	f7fe fe28 	bl	8003b08 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e06e      	b.n	8004fa8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eca:	4b3a      	ldr	r3, [pc, #232]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 020c 	and.w	r2, r3, #12
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d1eb      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d010      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	4b31      	ldr	r3, [pc, #196]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d208      	bcs.n	8004f0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	492b      	ldr	r1, [pc, #172]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f0a:	4b29      	ldr	r3, [pc, #164]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d210      	bcs.n	8004f3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f18:	4b25      	ldr	r3, [pc, #148]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f023 0207 	bic.w	r2, r3, #7
 8004f20:	4923      	ldr	r1, [pc, #140]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f28:	4b21      	ldr	r3, [pc, #132]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d001      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e036      	b.n	8004fa8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d008      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f46:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	4918      	ldr	r1, [pc, #96]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d009      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f64:	4b13      	ldr	r3, [pc, #76]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	4910      	ldr	r1, [pc, #64]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f78:	f000 f824 	bl	8004fc4 <HAL_RCC_GetSysClockFreq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	490b      	ldr	r1, [pc, #44]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1f4>)
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	fa22 f303 	lsr.w	r3, r2, r3
 8004f94:	4a09      	ldr	r2, [pc, #36]	@ (8004fbc <HAL_RCC_ClockConfig+0x1f8>)
 8004f96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f98:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1fc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fe fd63 	bl	8003a68 <HAL_InitTick>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004fa6:	7afb      	ldrb	r3, [r7, #11]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40022000 	.word	0x40022000
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	08007734 	.word	0x08007734
 8004fbc:	2000001c 	.word	0x2000001c
 8004fc0:	20000054 	.word	0x20000054

08004fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b089      	sub	sp, #36	@ 0x24
 8004fc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 030c 	and.w	r3, r3, #12
 8004fda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2b0c      	cmp	r3, #12
 8004ff0:	d121      	bne.n	8005036 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d11e      	bne.n	8005036 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ff8:	4b34      	ldr	r3, [pc, #208]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d107      	bne.n	8005014 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005004:	4b31      	ldr	r3, [pc, #196]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	e005      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005014:	4b2d      	ldr	r3, [pc, #180]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	091b      	lsrs	r3, r3, #4
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005020:	4a2b      	ldr	r2, [pc, #172]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005028:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10d      	bne.n	800504c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005034:	e00a      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b04      	cmp	r3, #4
 800503a:	d102      	bne.n	8005042 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800503c:	4b25      	ldr	r3, [pc, #148]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800503e:	61bb      	str	r3, [r7, #24]
 8005040:	e004      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d101      	bne.n	800504c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005048:	4b23      	ldr	r3, [pc, #140]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800504a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b0c      	cmp	r3, #12
 8005050:	d134      	bne.n	80050bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005052:	4b1e      	ldr	r3, [pc, #120]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d003      	beq.n	800506a <HAL_RCC_GetSysClockFreq+0xa6>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d003      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0xac>
 8005068:	e005      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800506a:	4b1a      	ldr	r3, [pc, #104]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800506c:	617b      	str	r3, [r7, #20]
      break;
 800506e:	e005      	b.n	800507c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005070:	4b19      	ldr	r3, [pc, #100]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005072:	617b      	str	r3, [r7, #20]
      break;
 8005074:	e002      	b.n	800507c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	617b      	str	r3, [r7, #20]
      break;
 800507a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800507c:	4b13      	ldr	r3, [pc, #76]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x108>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	3301      	adds	r3, #1
 8005088:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800508a:	4b10      	ldr	r3, [pc, #64]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x108>)
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	fb03 f202 	mul.w	r2, r3, r2
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050a2:	4b0a      	ldr	r3, [pc, #40]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x108>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	0e5b      	lsrs	r3, r3, #25
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	3301      	adds	r3, #1
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050bc:	69bb      	ldr	r3, [r7, #24]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3724      	adds	r7, #36	@ 0x24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000
 80050d0:	0800774c 	.word	0x0800774c
 80050d4:	00f42400 	.word	0x00f42400
 80050d8:	007a1200 	.word	0x007a1200

080050dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e0:	4b03      	ldr	r3, [pc, #12]	@ (80050f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050e2:	681b      	ldr	r3, [r3, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	2000001c 	.word	0x2000001c

080050f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050f8:	f7ff fff0 	bl	80050dc <HAL_RCC_GetHCLKFreq>
 80050fc:	4602      	mov	r2, r0
 80050fe:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	4904      	ldr	r1, [pc, #16]	@ (800511c <HAL_RCC_GetPCLK1Freq+0x28>)
 800510a:	5ccb      	ldrb	r3, [r1, r3]
 800510c:	f003 031f 	and.w	r3, r3, #31
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40021000 	.word	0x40021000
 800511c:	08007744 	.word	0x08007744

08005120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005124:	f7ff ffda 	bl	80050dc <HAL_RCC_GetHCLKFreq>
 8005128:	4602      	mov	r2, r0
 800512a:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <HAL_RCC_GetPCLK2Freq+0x24>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	0adb      	lsrs	r3, r3, #11
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	4904      	ldr	r1, [pc, #16]	@ (8005148 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005136:	5ccb      	ldrb	r3, [r1, r3]
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40021000 	.word	0x40021000
 8005148:	08007744 	.word	0x08007744

0800514c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005154:	2300      	movs	r3, #0
 8005156:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005158:	4b2a      	ldr	r3, [pc, #168]	@ (8005204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005164:	f7ff f9ee 	bl	8004544 <HAL_PWREx_GetVoltageRange>
 8005168:	6178      	str	r0, [r7, #20]
 800516a:	e014      	b.n	8005196 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800516c:	4b25      	ldr	r3, [pc, #148]	@ (8005204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800516e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005170:	4a24      	ldr	r2, [pc, #144]	@ (8005204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005176:	6593      	str	r3, [r2, #88]	@ 0x58
 8005178:	4b22      	ldr	r3, [pc, #136]	@ (8005204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800517a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005184:	f7ff f9de 	bl	8004544 <HAL_PWREx_GetVoltageRange>
 8005188:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800518a:	4b1e      	ldr	r3, [pc, #120]	@ (8005204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800518c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518e:	4a1d      	ldr	r2, [pc, #116]	@ (8005204 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005194:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800519c:	d10b      	bne.n	80051b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b80      	cmp	r3, #128	@ 0x80
 80051a2:	d919      	bls.n	80051d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80051a8:	d902      	bls.n	80051b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051aa:	2302      	movs	r3, #2
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	e013      	b.n	80051d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051b0:	2301      	movs	r3, #1
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	e010      	b.n	80051d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b80      	cmp	r3, #128	@ 0x80
 80051ba:	d902      	bls.n	80051c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051bc:	2303      	movs	r3, #3
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	e00a      	b.n	80051d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b80      	cmp	r3, #128	@ 0x80
 80051c6:	d102      	bne.n	80051ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051c8:	2302      	movs	r3, #2
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	e004      	b.n	80051d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b70      	cmp	r3, #112	@ 0x70
 80051d2:	d101      	bne.n	80051d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051d4:	2301      	movs	r3, #1
 80051d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f023 0207 	bic.w	r2, r3, #7
 80051e0:	4909      	ldr	r1, [pc, #36]	@ (8005208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051e8:	4b07      	ldr	r3, [pc, #28]	@ (8005208 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d001      	beq.n	80051fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40021000 	.word	0x40021000
 8005208:	40022000 	.word	0x40022000

0800520c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005214:	2300      	movs	r3, #0
 8005216:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005218:	2300      	movs	r3, #0
 800521a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005224:	2b00      	cmp	r3, #0
 8005226:	d041      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800522c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005230:	d02a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005232:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005236:	d824      	bhi.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005238:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800523c:	d008      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800523e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005242:	d81e      	bhi.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005248:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800524c:	d010      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800524e:	e018      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005250:	4b86      	ldr	r3, [pc, #536]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4a85      	ldr	r2, [pc, #532]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800525a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800525c:	e015      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3304      	adds	r3, #4
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fabb 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800526e:	e00c      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3320      	adds	r3, #32
 8005274:	2100      	movs	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fba6 	bl	80059c8 <RCCEx_PLLSAI2_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005280:	e003      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	74fb      	strb	r3, [r7, #19]
      break;
 8005286:	e000      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800528a:	7cfb      	ldrb	r3, [r7, #19]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10b      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005290:	4b76      	ldr	r3, [pc, #472]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005296:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800529e:	4973      	ldr	r1, [pc, #460]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80052a6:	e001      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	7cfb      	ldrb	r3, [r7, #19]
 80052aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d041      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052c0:	d02a      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80052c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052c6:	d824      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052cc:	d008      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052d2:	d81e      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80052d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052dc:	d010      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052de:	e018      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052e0:	4b62      	ldr	r3, [pc, #392]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a61      	ldr	r2, [pc, #388]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052ec:	e015      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3304      	adds	r3, #4
 80052f2:	2100      	movs	r1, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fa73 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 80052fa:	4603      	mov	r3, r0
 80052fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052fe:	e00c      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3320      	adds	r3, #32
 8005304:	2100      	movs	r1, #0
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fb5e 	bl	80059c8 <RCCEx_PLLSAI2_Config>
 800530c:	4603      	mov	r3, r0
 800530e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005310:	e003      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	74fb      	strb	r3, [r7, #19]
      break;
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800531a:	7cfb      	ldrb	r3, [r7, #19]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10b      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005320:	4b52      	ldr	r3, [pc, #328]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005326:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800532e:	494f      	ldr	r1, [pc, #316]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005336:	e001      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005338:	7cfb      	ldrb	r3, [r7, #19]
 800533a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80a0 	beq.w	800548a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800534a:	2300      	movs	r3, #0
 800534c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800534e:	4b47      	ldr	r3, [pc, #284]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800535e:	2300      	movs	r3, #0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00d      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005364:	4b41      	ldr	r3, [pc, #260]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005368:	4a40      	ldr	r2, [pc, #256]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800536e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005370:	4b3e      	ldr	r3, [pc, #248]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800537c:	2301      	movs	r3, #1
 800537e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005380:	4b3b      	ldr	r3, [pc, #236]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a3a      	ldr	r2, [pc, #232]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800538a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800538c:	f7fe fbbc 	bl	8003b08 <HAL_GetTick>
 8005390:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005392:	e009      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005394:	f7fe fbb8 	bl	8003b08 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d902      	bls.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	74fb      	strb	r3, [r7, #19]
        break;
 80053a6:	e005      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053a8:	4b31      	ldr	r3, [pc, #196]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0ef      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d15c      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053ba:	4b2c      	ldr	r3, [pc, #176]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01f      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d019      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053d8:	4b24      	ldr	r3, [pc, #144]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053e4:	4b21      	ldr	r3, [pc, #132]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ea:	4a20      	ldr	r2, [pc, #128]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053f4:	4b1d      	ldr	r3, [pc, #116]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fa:	4a1c      	ldr	r2, [pc, #112]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005404:	4a19      	ldr	r2, [pc, #100]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d016      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005416:	f7fe fb77 	bl	8003b08 <HAL_GetTick>
 800541a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800541c:	e00b      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800541e:	f7fe fb73 	bl	8003b08 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800542c:	4293      	cmp	r3, r2
 800542e:	d902      	bls.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	74fb      	strb	r3, [r7, #19]
            break;
 8005434:	e006      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005436:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0ec      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10c      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800544a:	4b08      	ldr	r3, [pc, #32]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005450:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800545a:	4904      	ldr	r1, [pc, #16]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005462:	e009      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	74bb      	strb	r3, [r7, #18]
 8005468:	e006      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800546a:	bf00      	nop
 800546c:	40021000 	.word	0x40021000
 8005470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005474:	7cfb      	ldrb	r3, [r7, #19]
 8005476:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005478:	7c7b      	ldrb	r3, [r7, #17]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d105      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800547e:	4b9e      	ldr	r3, [pc, #632]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005482:	4a9d      	ldr	r2, [pc, #628]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005488:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005496:	4b98      	ldr	r3, [pc, #608]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549c:	f023 0203 	bic.w	r2, r3, #3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	4994      	ldr	r1, [pc, #592]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054b8:	4b8f      	ldr	r3, [pc, #572]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054be:	f023 020c 	bic.w	r2, r3, #12
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c6:	498c      	ldr	r1, [pc, #560]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054da:	4b87      	ldr	r3, [pc, #540]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e8:	4983      	ldr	r1, [pc, #524]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054fc:	4b7e      	ldr	r3, [pc, #504]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005502:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550a:	497b      	ldr	r1, [pc, #492]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800551e:	4b76      	ldr	r3, [pc, #472]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005524:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800552c:	4972      	ldr	r1, [pc, #456]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005540:	4b6d      	ldr	r3, [pc, #436]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005546:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554e:	496a      	ldr	r1, [pc, #424]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005562:	4b65      	ldr	r3, [pc, #404]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005568:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005570:	4961      	ldr	r1, [pc, #388]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005584:	4b5c      	ldr	r3, [pc, #368]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005592:	4959      	ldr	r1, [pc, #356]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055a6:	4b54      	ldr	r3, [pc, #336]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b4:	4950      	ldr	r1, [pc, #320]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055c8:	4b4b      	ldr	r3, [pc, #300]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d6:	4948      	ldr	r1, [pc, #288]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055ea:	4b43      	ldr	r3, [pc, #268]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f8:	493f      	ldr	r1, [pc, #252]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d028      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800560c:	4b3a      	ldr	r3, [pc, #232]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005612:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800561a:	4937      	ldr	r1, [pc, #220]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800562a:	d106      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800562c:	4b32      	ldr	r3, [pc, #200]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4a31      	ldr	r2, [pc, #196]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005636:	60d3      	str	r3, [r2, #12]
 8005638:	e011      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800563e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005642:	d10c      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3304      	adds	r3, #4
 8005648:	2101      	movs	r1, #1
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f8c8 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800565a:	7cfb      	ldrb	r3, [r7, #19]
 800565c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d028      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800566a:	4b23      	ldr	r3, [pc, #140]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005670:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005678:	491f      	ldr	r1, [pc, #124]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005684:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005688:	d106      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800568a:	4b1b      	ldr	r3, [pc, #108]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	4a1a      	ldr	r2, [pc, #104]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005694:	60d3      	str	r3, [r2, #12]
 8005696:	e011      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056a0:	d10c      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3304      	adds	r3, #4
 80056a6:	2101      	movs	r1, #1
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 f899 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056b2:	7cfb      	ldrb	r3, [r7, #19]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80056b8:	7cfb      	ldrb	r3, [r7, #19]
 80056ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d02b      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056c8:	4b0b      	ldr	r3, [pc, #44]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d6:	4908      	ldr	r1, [pc, #32]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056e6:	d109      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e8:	4b03      	ldr	r3, [pc, #12]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4a02      	ldr	r2, [pc, #8]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056f2:	60d3      	str	r3, [r2, #12]
 80056f4:	e014      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80056f6:	bf00      	nop
 80056f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005700:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005704:	d10c      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3304      	adds	r3, #4
 800570a:	2101      	movs	r1, #1
 800570c:	4618      	mov	r0, r3
 800570e:	f000 f867 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 8005712:	4603      	mov	r3, r0
 8005714:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005716:	7cfb      	ldrb	r3, [r7, #19]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800571c:	7cfb      	ldrb	r3, [r7, #19]
 800571e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d02f      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800572c:	4b2b      	ldr	r3, [pc, #172]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800572e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005732:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800573a:	4928      	ldr	r1, [pc, #160]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800573c:	4313      	orrs	r3, r2
 800573e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800574a:	d10d      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	2102      	movs	r1, #2
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f844 	bl	80057e0 <RCCEx_PLLSAI1_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d014      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005762:	7cfb      	ldrb	r3, [r7, #19]
 8005764:	74bb      	strb	r3, [r7, #18]
 8005766:	e011      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800576c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005770:	d10c      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3320      	adds	r3, #32
 8005776:	2102      	movs	r1, #2
 8005778:	4618      	mov	r0, r3
 800577a:	f000 f925 	bl	80059c8 <RCCEx_PLLSAI2_Config>
 800577e:	4603      	mov	r3, r0
 8005780:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005782:	7cfb      	ldrb	r3, [r7, #19]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005788:	7cfb      	ldrb	r3, [r7, #19]
 800578a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005798:	4b10      	ldr	r3, [pc, #64]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057a6:	490d      	ldr	r1, [pc, #52]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00b      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057ba:	4b08      	ldr	r3, [pc, #32]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ca:	4904      	ldr	r1, [pc, #16]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80057d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40021000 	.word	0x40021000

080057e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057ee:	4b75      	ldr	r3, [pc, #468]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d018      	beq.n	800582c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057fa:	4b72      	ldr	r3, [pc, #456]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0203 	and.w	r2, r3, #3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d10d      	bne.n	8005826 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
       ||
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005812:	4b6c      	ldr	r3, [pc, #432]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
       ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d047      	beq.n	80058b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	73fb      	strb	r3, [r7, #15]
 800582a:	e044      	b.n	80058b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b03      	cmp	r3, #3
 8005832:	d018      	beq.n	8005866 <RCCEx_PLLSAI1_Config+0x86>
 8005834:	2b03      	cmp	r3, #3
 8005836:	d825      	bhi.n	8005884 <RCCEx_PLLSAI1_Config+0xa4>
 8005838:	2b01      	cmp	r3, #1
 800583a:	d002      	beq.n	8005842 <RCCEx_PLLSAI1_Config+0x62>
 800583c:	2b02      	cmp	r3, #2
 800583e:	d009      	beq.n	8005854 <RCCEx_PLLSAI1_Config+0x74>
 8005840:	e020      	b.n	8005884 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005842:	4b60      	ldr	r3, [pc, #384]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d11d      	bne.n	800588a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005852:	e01a      	b.n	800588a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005854:	4b5b      	ldr	r3, [pc, #364]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800585c:	2b00      	cmp	r3, #0
 800585e:	d116      	bne.n	800588e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005864:	e013      	b.n	800588e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005866:	4b57      	ldr	r3, [pc, #348]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10f      	bne.n	8005892 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005872:	4b54      	ldr	r3, [pc, #336]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005882:	e006      	b.n	8005892 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
      break;
 8005888:	e004      	b.n	8005894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800588a:	bf00      	nop
 800588c:	e002      	b.n	8005894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800588e:	bf00      	nop
 8005890:	e000      	b.n	8005894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005892:	bf00      	nop
    }

    if(status == HAL_OK)
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10d      	bne.n	80058b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800589a:	4b4a      	ldr	r3, [pc, #296]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6819      	ldr	r1, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	430b      	orrs	r3, r1
 80058b0:	4944      	ldr	r1, [pc, #272]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d17d      	bne.n	80059b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058bc:	4b41      	ldr	r3, [pc, #260]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a40      	ldr	r2, [pc, #256]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c8:	f7fe f91e 	bl	8003b08 <HAL_GetTick>
 80058cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058ce:	e009      	b.n	80058e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058d0:	f7fe f91a 	bl	8003b08 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d902      	bls.n	80058e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	73fb      	strb	r3, [r7, #15]
        break;
 80058e2:	e005      	b.n	80058f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058e4:	4b37      	ldr	r3, [pc, #220]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1ef      	bne.n	80058d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d160      	bne.n	80059b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d111      	bne.n	8005920 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058fc:	4b31      	ldr	r3, [pc, #196]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6892      	ldr	r2, [r2, #8]
 800590c:	0211      	lsls	r1, r2, #8
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68d2      	ldr	r2, [r2, #12]
 8005912:	0912      	lsrs	r2, r2, #4
 8005914:	0452      	lsls	r2, r2, #17
 8005916:	430a      	orrs	r2, r1
 8005918:	492a      	ldr	r1, [pc, #168]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800591a:	4313      	orrs	r3, r2
 800591c:	610b      	str	r3, [r1, #16]
 800591e:	e027      	b.n	8005970 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d112      	bne.n	800594c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005926:	4b27      	ldr	r3, [pc, #156]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800592e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6892      	ldr	r2, [r2, #8]
 8005936:	0211      	lsls	r1, r2, #8
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6912      	ldr	r2, [r2, #16]
 800593c:	0852      	lsrs	r2, r2, #1
 800593e:	3a01      	subs	r2, #1
 8005940:	0552      	lsls	r2, r2, #21
 8005942:	430a      	orrs	r2, r1
 8005944:	491f      	ldr	r1, [pc, #124]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005946:	4313      	orrs	r3, r2
 8005948:	610b      	str	r3, [r1, #16]
 800594a:	e011      	b.n	8005970 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800594c:	4b1d      	ldr	r3, [pc, #116]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005954:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6892      	ldr	r2, [r2, #8]
 800595c:	0211      	lsls	r1, r2, #8
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6952      	ldr	r2, [r2, #20]
 8005962:	0852      	lsrs	r2, r2, #1
 8005964:	3a01      	subs	r2, #1
 8005966:	0652      	lsls	r2, r2, #25
 8005968:	430a      	orrs	r2, r1
 800596a:	4916      	ldr	r1, [pc, #88]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800596c:	4313      	orrs	r3, r2
 800596e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005970:	4b14      	ldr	r3, [pc, #80]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a13      	ldr	r2, [pc, #76]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005976:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800597a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fe f8c4 	bl	8003b08 <HAL_GetTick>
 8005980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005982:	e009      	b.n	8005998 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005984:	f7fe f8c0 	bl	8003b08 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d902      	bls.n	8005998 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	73fb      	strb	r3, [r7, #15]
          break;
 8005996:	e005      	b.n	80059a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005998:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0ef      	beq.n	8005984 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059aa:	4b06      	ldr	r3, [pc, #24]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	4904      	ldr	r1, [pc, #16]	@ (80059c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40021000 	.word	0x40021000

080059c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d018      	beq.n	8005a14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80059e2:	4b67      	ldr	r3, [pc, #412]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f003 0203 	and.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d10d      	bne.n	8005a0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
       ||
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80059fa:	4b61      	ldr	r3, [pc, #388]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	091b      	lsrs	r3, r3, #4
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
       ||
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d047      	beq.n	8005a9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	73fb      	strb	r3, [r7, #15]
 8005a12:	e044      	b.n	8005a9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d018      	beq.n	8005a4e <RCCEx_PLLSAI2_Config+0x86>
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d825      	bhi.n	8005a6c <RCCEx_PLLSAI2_Config+0xa4>
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d002      	beq.n	8005a2a <RCCEx_PLLSAI2_Config+0x62>
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d009      	beq.n	8005a3c <RCCEx_PLLSAI2_Config+0x74>
 8005a28:	e020      	b.n	8005a6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a2a:	4b55      	ldr	r3, [pc, #340]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d11d      	bne.n	8005a72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a3a:	e01a      	b.n	8005a72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a3c:	4b50      	ldr	r3, [pc, #320]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d116      	bne.n	8005a76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a4c:	e013      	b.n	8005a76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a4e:	4b4c      	ldr	r3, [pc, #304]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10f      	bne.n	8005a7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a5a:	4b49      	ldr	r3, [pc, #292]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d109      	bne.n	8005a7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a6a:	e006      	b.n	8005a7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a70:	e004      	b.n	8005a7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a72:	bf00      	nop
 8005a74:	e002      	b.n	8005a7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a76:	bf00      	nop
 8005a78:	e000      	b.n	8005a7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10d      	bne.n	8005a9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a82:	4b3f      	ldr	r3, [pc, #252]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6819      	ldr	r1, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	430b      	orrs	r3, r1
 8005a98:	4939      	ldr	r1, [pc, #228]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d167      	bne.n	8005b74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005aa4:	4b36      	ldr	r3, [pc, #216]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a35      	ldr	r2, [pc, #212]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab0:	f7fe f82a 	bl	8003b08 <HAL_GetTick>
 8005ab4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ab6:	e009      	b.n	8005acc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ab8:	f7fe f826 	bl	8003b08 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d902      	bls.n	8005acc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	73fb      	strb	r3, [r7, #15]
        break;
 8005aca:	e005      	b.n	8005ad8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005acc:	4b2c      	ldr	r3, [pc, #176]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1ef      	bne.n	8005ab8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d14a      	bne.n	8005b74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d111      	bne.n	8005b08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ae4:	4b26      	ldr	r3, [pc, #152]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6892      	ldr	r2, [r2, #8]
 8005af4:	0211      	lsls	r1, r2, #8
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68d2      	ldr	r2, [r2, #12]
 8005afa:	0912      	lsrs	r2, r2, #4
 8005afc:	0452      	lsls	r2, r2, #17
 8005afe:	430a      	orrs	r2, r1
 8005b00:	491f      	ldr	r1, [pc, #124]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	614b      	str	r3, [r1, #20]
 8005b06:	e011      	b.n	8005b2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b08:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6892      	ldr	r2, [r2, #8]
 8005b18:	0211      	lsls	r1, r2, #8
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6912      	ldr	r2, [r2, #16]
 8005b1e:	0852      	lsrs	r2, r2, #1
 8005b20:	3a01      	subs	r2, #1
 8005b22:	0652      	lsls	r2, r2, #25
 8005b24:	430a      	orrs	r2, r1
 8005b26:	4916      	ldr	r1, [pc, #88]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b2c:	4b14      	ldr	r3, [pc, #80]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a13      	ldr	r2, [pc, #76]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b38:	f7fd ffe6 	bl	8003b08 <HAL_GetTick>
 8005b3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b3e:	e009      	b.n	8005b54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b40:	f7fd ffe2 	bl	8003b08 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d902      	bls.n	8005b54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	73fb      	strb	r3, [r7, #15]
          break;
 8005b52:	e005      	b.n	8005b60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b54:	4b0a      	ldr	r3, [pc, #40]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0ef      	beq.n	8005b40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b66:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	4904      	ldr	r1, [pc, #16]	@ (8005b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40021000 	.word	0x40021000

08005b84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e095      	b.n	8005cc2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d108      	bne.n	8005bb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba6:	d009      	beq.n	8005bbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	61da      	str	r2, [r3, #28]
 8005bae:	e005      	b.n	8005bbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fb fc7c 	bl	80014d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bf2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bfc:	d902      	bls.n	8005c04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e002      	b.n	8005c0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005c12:	d007      	beq.n	8005c24 <HAL_SPI_Init+0xa0>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c66:	ea42 0103 	orr.w	r1, r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	0c1b      	lsrs	r3, r3, #16
 8005c80:	f003 0204 	and.w	r2, r3, #4
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ca0:	ea42 0103 	orr.w	r1, r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b088      	sub	sp, #32
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	603b      	str	r3, [r7, #0]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cda:	f7fd ff15 	bl	8003b08 <HAL_GetTick>
 8005cde:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d001      	beq.n	8005cf4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e15c      	b.n	8005fae <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_SPI_Transmit+0x36>
 8005cfa:	88fb      	ldrh	r3, [r7, #6]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e154      	b.n	8005fae <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <HAL_SPI_Transmit+0x48>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e14d      	b.n	8005fae <HAL_SPI_Transmit+0x2e4>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2203      	movs	r2, #3
 8005d1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	88fa      	ldrh	r2, [r7, #6]
 8005d32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	88fa      	ldrh	r2, [r7, #6]
 8005d38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d64:	d10f      	bne.n	8005d86 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d90:	2b40      	cmp	r3, #64	@ 0x40
 8005d92:	d007      	beq.n	8005da4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005da2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dac:	d952      	bls.n	8005e54 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <HAL_SPI_Transmit+0xf2>
 8005db6:	8b7b      	ldrh	r3, [r7, #26]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d145      	bne.n	8005e48 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc0:	881a      	ldrh	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dcc:	1c9a      	adds	r2, r3, #2
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005de0:	e032      	b.n	8005e48 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d112      	bne.n	8005e16 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df4:	881a      	ldrh	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e00:	1c9a      	adds	r2, r3, #2
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e14:	e018      	b.n	8005e48 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e16:	f7fd fe77 	bl	8003b08 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d803      	bhi.n	8005e2e <HAL_SPI_Transmit+0x164>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d102      	bne.n	8005e34 <HAL_SPI_Transmit+0x16a>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e0b2      	b.n	8005fae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1c7      	bne.n	8005de2 <HAL_SPI_Transmit+0x118>
 8005e52:	e083      	b.n	8005f5c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_SPI_Transmit+0x198>
 8005e5c:	8b7b      	ldrh	r3, [r7, #26]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d177      	bne.n	8005f52 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d912      	bls.n	8005e92 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e70:	881a      	ldrh	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7c:	1c9a      	adds	r2, r3, #2
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b02      	subs	r3, #2
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e90:	e05f      	b.n	8005f52 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	330c      	adds	r3, #12
 8005e9c:	7812      	ldrb	r2, [r2, #0]
 8005e9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005eb8:	e04b      	b.n	8005f52 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d12b      	bne.n	8005f20 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d912      	bls.n	8005ef8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed6:	881a      	ldrh	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee2:	1c9a      	adds	r2, r3, #2
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b02      	subs	r3, #2
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ef6:	e02c      	b.n	8005f52 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	330c      	adds	r3, #12
 8005f02:	7812      	ldrb	r2, [r2, #0]
 8005f04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f1e:	e018      	b.n	8005f52 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f20:	f7fd fdf2 	bl	8003b08 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d803      	bhi.n	8005f38 <HAL_SPI_Transmit+0x26e>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f36:	d102      	bne.n	8005f3e <HAL_SPI_Transmit+0x274>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e02d      	b.n	8005fae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1ae      	bne.n	8005eba <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 fcf5 	bl	8006950 <SPI_EndRxTxTransaction>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005fac:	2300      	movs	r3, #0
  }
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b088      	sub	sp, #32
 8005fba:	af02      	add	r7, sp, #8
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d001      	beq.n	8005fd6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e123      	b.n	800621e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fde:	d112      	bne.n	8006006 <HAL_SPI_Receive+0x50>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10e      	bne.n	8006006 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2204      	movs	r2, #4
 8005fec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ff0:	88fa      	ldrh	r2, [r7, #6]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	68b9      	ldr	r1, [r7, #8]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f912 	bl	8006226 <HAL_SPI_TransmitReceive>
 8006002:	4603      	mov	r3, r0
 8006004:	e10b      	b.n	800621e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006006:	f7fd fd7f 	bl	8003b08 <HAL_GetTick>
 800600a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_SPI_Receive+0x62>
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e100      	b.n	800621e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_SPI_Receive+0x74>
 8006026:	2302      	movs	r3, #2
 8006028:	e0f9      	b.n	800621e <HAL_SPI_Receive+0x268>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2204      	movs	r2, #4
 8006036:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	88fa      	ldrh	r2, [r7, #6]
 800604a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	88fa      	ldrh	r2, [r7, #6]
 8006052:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800607c:	d908      	bls.n	8006090 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800608c:	605a      	str	r2, [r3, #4]
 800608e:	e007      	b.n	80060a0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800609e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060a8:	d10f      	bne.n	80060ca <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d4:	2b40      	cmp	r3, #64	@ 0x40
 80060d6:	d007      	beq.n	80060e8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060f0:	d875      	bhi.n	80061de <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80060f2:	e037      	b.n	8006164 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d117      	bne.n	8006132 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f103 020c 	add.w	r2, r3, #12
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610e:	7812      	ldrb	r2, [r2, #0]
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006130:	e018      	b.n	8006164 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006132:	f7fd fce9 	bl	8003b08 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d803      	bhi.n	800614a <HAL_SPI_Receive+0x194>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006148:	d102      	bne.n	8006150 <HAL_SPI_Receive+0x19a>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e05c      	b.n	800621e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1c1      	bne.n	80060f4 <HAL_SPI_Receive+0x13e>
 8006170:	e03b      	b.n	80061ea <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b01      	cmp	r3, #1
 800617e:	d115      	bne.n	80061ac <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618a:	b292      	uxth	r2, r2
 800618c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006192:	1c9a      	adds	r2, r3, #2
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80061aa:	e018      	b.n	80061de <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ac:	f7fd fcac 	bl	8003b08 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d803      	bhi.n	80061c4 <HAL_SPI_Receive+0x20e>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	d102      	bne.n	80061ca <HAL_SPI_Receive+0x214>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e01f      	b.n	800621e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1c3      	bne.n	8006172 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fb56 	bl	80068a0 <SPI_EndRxTransaction>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800621c:	2300      	movs	r3, #0
  }
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b08a      	sub	sp, #40	@ 0x28
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
 8006232:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006234:	2301      	movs	r3, #1
 8006236:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006238:	f7fd fc66 	bl	8003b08 <HAL_GetTick>
 800623c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006244:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800624c:	887b      	ldrh	r3, [r7, #2]
 800624e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006250:	887b      	ldrh	r3, [r7, #2]
 8006252:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006254:	7ffb      	ldrb	r3, [r7, #31]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d00c      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x4e>
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006260:	d106      	bne.n	8006270 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d102      	bne.n	8006270 <HAL_SPI_TransmitReceive+0x4a>
 800626a:	7ffb      	ldrb	r3, [r7, #31]
 800626c:	2b04      	cmp	r3, #4
 800626e:	d001      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006270:	2302      	movs	r3, #2
 8006272:	e1f3      	b.n	800665c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_SPI_TransmitReceive+0x60>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_SPI_TransmitReceive+0x60>
 8006280:	887b      	ldrh	r3, [r7, #2]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e1e8      	b.n	800665c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x72>
 8006294:	2302      	movs	r3, #2
 8006296:	e1e1      	b.n	800665c <HAL_SPI_TransmitReceive+0x436>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d003      	beq.n	80062b4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2205      	movs	r2, #5
 80062b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	887a      	ldrh	r2, [r7, #2]
 80062c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	887a      	ldrh	r2, [r7, #2]
 80062cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	887a      	ldrh	r2, [r7, #2]
 80062da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	887a      	ldrh	r2, [r7, #2]
 80062e0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062f6:	d802      	bhi.n	80062fe <HAL_SPI_TransmitReceive+0xd8>
 80062f8:	8abb      	ldrh	r3, [r7, #20]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d908      	bls.n	8006310 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800630c:	605a      	str	r2, [r3, #4]
 800630e:	e007      	b.n	8006320 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800631e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632a:	2b40      	cmp	r3, #64	@ 0x40
 800632c:	d007      	beq.n	800633e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800633c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006346:	f240 8083 	bls.w	8006450 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <HAL_SPI_TransmitReceive+0x132>
 8006352:	8afb      	ldrh	r3, [r7, #22]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d16f      	bne.n	8006438 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635c:	881a      	ldrh	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006368:	1c9a      	adds	r2, r3, #2
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800637c:	e05c      	b.n	8006438 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b02      	cmp	r3, #2
 800638a:	d11b      	bne.n	80063c4 <HAL_SPI_TransmitReceive+0x19e>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d016      	beq.n	80063c4 <HAL_SPI_TransmitReceive+0x19e>
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	2b01      	cmp	r3, #1
 800639a:	d113      	bne.n	80063c4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a0:	881a      	ldrh	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ac:	1c9a      	adds	r2, r3, #2
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d11c      	bne.n	800640c <HAL_SPI_TransmitReceive+0x1e6>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d016      	beq.n	800640c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e8:	b292      	uxth	r2, r2
 80063ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f0:	1c9a      	adds	r2, r3, #2
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006408:	2301      	movs	r3, #1
 800640a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800640c:	f7fd fb7c 	bl	8003b08 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006418:	429a      	cmp	r2, r3
 800641a:	d80d      	bhi.n	8006438 <HAL_SPI_TransmitReceive+0x212>
 800641c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006422:	d009      	beq.n	8006438 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e111      	b.n	800665c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d19d      	bne.n	800637e <HAL_SPI_TransmitReceive+0x158>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d197      	bne.n	800637e <HAL_SPI_TransmitReceive+0x158>
 800644e:	e0e5      	b.n	800661c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <HAL_SPI_TransmitReceive+0x23a>
 8006458:	8afb      	ldrh	r3, [r7, #22]
 800645a:	2b01      	cmp	r3, #1
 800645c:	f040 80d1 	bne.w	8006602 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	d912      	bls.n	8006490 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646e:	881a      	ldrh	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	1c9a      	adds	r2, r3, #2
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b02      	subs	r3, #2
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800648e:	e0b8      	b.n	8006602 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	330c      	adds	r3, #12
 800649a:	7812      	ldrb	r2, [r2, #0]
 800649c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064b6:	e0a4      	b.n	8006602 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d134      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x30a>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d02f      	beq.n	8006530 <HAL_SPI_TransmitReceive+0x30a>
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d12c      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d912      	bls.n	8006506 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	881a      	ldrh	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b02      	subs	r3, #2
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006504:	e012      	b.n	800652c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	330c      	adds	r3, #12
 8006510:	7812      	ldrb	r2, [r2, #0]
 8006512:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b01      	cmp	r3, #1
 800653c:	d148      	bne.n	80065d0 <HAL_SPI_TransmitReceive+0x3aa>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d042      	beq.n	80065d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b01      	cmp	r3, #1
 8006554:	d923      	bls.n	800659e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006560:	b292      	uxth	r2, r2
 8006562:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006568:	1c9a      	adds	r2, r3, #2
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b02      	subs	r3, #2
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b01      	cmp	r3, #1
 800658a:	d81f      	bhi.n	80065cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800659a:	605a      	str	r2, [r3, #4]
 800659c:	e016      	b.n	80065cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f103 020c 	add.w	r2, r3, #12
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	7812      	ldrb	r2, [r2, #0]
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065cc:	2301      	movs	r3, #1
 80065ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065d0:	f7fd fa9a 	bl	8003b08 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065dc:	429a      	cmp	r2, r3
 80065de:	d803      	bhi.n	80065e8 <HAL_SPI_TransmitReceive+0x3c2>
 80065e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e6:	d102      	bne.n	80065ee <HAL_SPI_TransmitReceive+0x3c8>
 80065e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d109      	bne.n	8006602 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e02c      	b.n	800665c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	f47f af55 	bne.w	80064b8 <HAL_SPI_TransmitReceive+0x292>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	f47f af4e 	bne.w	80064b8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800661c:	6a3a      	ldr	r2, [r7, #32]
 800661e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 f995 	bl	8006950 <SPI_EndRxTxTransaction>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e00e      	b.n	800665c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800665a:	2300      	movs	r3, #0
  }
}
 800665c:	4618      	mov	r0, r3
 800665e:	3728      	adds	r7, #40	@ 0x28
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006674:	f7fd fa48 	bl	8003b08 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	4413      	add	r3, r2
 8006682:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006684:	f7fd fa40 	bl	8003b08 <HAL_GetTick>
 8006688:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800668a:	4b39      	ldr	r3, [pc, #228]	@ (8006770 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	015b      	lsls	r3, r3, #5
 8006690:	0d1b      	lsrs	r3, r3, #20
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	fb02 f303 	mul.w	r3, r2, r3
 8006698:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800669a:	e054      	b.n	8006746 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a2:	d050      	beq.n	8006746 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066a4:	f7fd fa30 	bl	8003b08 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d902      	bls.n	80066ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d13d      	bne.n	8006736 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066d2:	d111      	bne.n	80066f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066dc:	d004      	beq.n	80066e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e6:	d107      	bne.n	80066f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006700:	d10f      	bne.n	8006722 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006720:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e017      	b.n	8006766 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	3b01      	subs	r3, #1
 8006744:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	4013      	ands	r3, r2
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	429a      	cmp	r2, r3
 8006754:	bf0c      	ite	eq
 8006756:	2301      	moveq	r3, #1
 8006758:	2300      	movne	r3, #0
 800675a:	b2db      	uxtb	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	429a      	cmp	r2, r3
 8006762:	d19b      	bne.n	800669c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3720      	adds	r7, #32
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	2000001c 	.word	0x2000001c

08006774 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08a      	sub	sp, #40	@ 0x28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006786:	f7fd f9bf 	bl	8003b08 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	1a9b      	subs	r3, r3, r2
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	4413      	add	r3, r2
 8006794:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006796:	f7fd f9b7 	bl	8003b08 <HAL_GetTick>
 800679a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80067a4:	4b3d      	ldr	r3, [pc, #244]	@ (800689c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	00da      	lsls	r2, r3, #3
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	0d1b      	lsrs	r3, r3, #20
 80067b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b6:	fb02 f303 	mul.w	r3, r2, r3
 80067ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80067bc:	e060      	b.n	8006880 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80067c4:	d107      	bne.n	80067d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d050      	beq.n	8006880 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067de:	f7fd f993 	bl	8003b08 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d902      	bls.n	80067f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d13d      	bne.n	8006870 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006802:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800680c:	d111      	bne.n	8006832 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006816:	d004      	beq.n	8006822 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006820:	d107      	bne.n	8006832 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006830:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800683a:	d10f      	bne.n	800685c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800685a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e010      	b.n	8006892 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	3b01      	subs	r3, #1
 800687e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	4013      	ands	r3, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	429a      	cmp	r2, r3
 800688e:	d196      	bne.n	80067be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3728      	adds	r7, #40	@ 0x28
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	2000001c 	.word	0x2000001c

080068a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068b4:	d111      	bne.n	80068da <SPI_EndRxTransaction+0x3a>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068be:	d004      	beq.n	80068ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c8:	d107      	bne.n	80068da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068d8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2200      	movs	r2, #0
 80068e2:	2180      	movs	r1, #128	@ 0x80
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff febd 	bl	8006664 <SPI_WaitFlagStateUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d007      	beq.n	8006900 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068f4:	f043 0220 	orr.w	r2, r3, #32
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e023      	b.n	8006948 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006908:	d11d      	bne.n	8006946 <SPI_EndRxTransaction+0xa6>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006912:	d004      	beq.n	800691e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800691c:	d113      	bne.n	8006946 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2200      	movs	r2, #0
 8006926:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff ff22 	bl	8006774 <SPI_WaitFifoStateUntilTimeout>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d007      	beq.n	8006946 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800693a:	f043 0220 	orr.w	r2, r3, #32
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e000      	b.n	8006948 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2200      	movs	r2, #0
 8006964:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f7ff ff03 	bl	8006774 <SPI_WaitFifoStateUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d007      	beq.n	8006984 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006978:	f043 0220 	orr.w	r2, r3, #32
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e027      	b.n	80069d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2200      	movs	r2, #0
 800698c:	2180      	movs	r1, #128	@ 0x80
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f7ff fe68 	bl	8006664 <SPI_WaitFlagStateUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d007      	beq.n	80069aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800699e:	f043 0220 	orr.w	r2, r3, #32
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e014      	b.n	80069d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f7ff fedc 	bl	8006774 <SPI_WaitFifoStateUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069c6:	f043 0220 	orr.w	r2, r3, #32
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e000      	b.n	80069d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e040      	b.n	8006a70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fa fdac 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2224      	movs	r2, #36	@ 0x24
 8006a08:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0201 	bic.w	r2, r2, #1
 8006a18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fc32 	bl	800728c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f977 	bl	8006d1c <UART_SetConfig>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d101      	bne.n	8006a38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e01b      	b.n	8006a70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fcb1 	bl	80073d0 <UART_CheckIdleState>
 8006a6e:	4603      	mov	r3, r0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08a      	sub	sp, #40	@ 0x28
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	603b      	str	r3, [r7, #0]
 8006a84:	4613      	mov	r3, r2
 8006a86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d177      	bne.n	8006b80 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <HAL_UART_Transmit+0x24>
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e070      	b.n	8006b82 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2221      	movs	r2, #33	@ 0x21
 8006aac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aae:	f7fd f82b 	bl	8003b08 <HAL_GetTick>
 8006ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	88fa      	ldrh	r2, [r7, #6]
 8006ac0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006acc:	d108      	bne.n	8006ae0 <HAL_UART_Transmit+0x68>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d104      	bne.n	8006ae0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	61bb      	str	r3, [r7, #24]
 8006ade:	e003      	b.n	8006ae8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ae8:	e02f      	b.n	8006b4a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2200      	movs	r2, #0
 8006af2:	2180      	movs	r1, #128	@ 0x80
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fd13 	bl	8007520 <UART_WaitOnFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d004      	beq.n	8006b0a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2220      	movs	r2, #32
 8006b04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e03b      	b.n	8006b82 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10b      	bne.n	8006b28 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	881a      	ldrh	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b1c:	b292      	uxth	r2, r2
 8006b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	3302      	adds	r3, #2
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	e007      	b.n	8006b38 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	3301      	adds	r3, #1
 8006b36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1c9      	bne.n	8006aea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2140      	movs	r1, #64	@ 0x40
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 fcdd 	bl	8007520 <UART_WaitOnFlagUntilTimeout>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d004      	beq.n	8006b76 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e005      	b.n	8006b82 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e000      	b.n	8006b82 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006b80:	2302      	movs	r3, #2
  }
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b08a      	sub	sp, #40	@ 0x28
 8006b8e:	af02      	add	r7, sp, #8
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	603b      	str	r3, [r7, #0]
 8006b96:	4613      	mov	r3, r2
 8006b98:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ba0:	2b20      	cmp	r3, #32
 8006ba2:	f040 80b6 	bne.w	8006d12 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <HAL_UART_Receive+0x28>
 8006bac:	88fb      	ldrh	r3, [r7, #6]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e0ae      	b.n	8006d14 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2222      	movs	r2, #34	@ 0x22
 8006bc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bcc:	f7fc ff9c 	bl	8003b08 <HAL_GetTick>
 8006bd0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	88fa      	ldrh	r2, [r7, #6]
 8006bd6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	88fa      	ldrh	r2, [r7, #6]
 8006bde:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bea:	d10e      	bne.n	8006c0a <HAL_UART_Receive+0x80>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d105      	bne.n	8006c00 <HAL_UART_Receive+0x76>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006bfa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006bfe:	e02d      	b.n	8006c5c <HAL_UART_Receive+0xd2>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	22ff      	movs	r2, #255	@ 0xff
 8006c04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c08:	e028      	b.n	8006c5c <HAL_UART_Receive+0xd2>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10d      	bne.n	8006c2e <HAL_UART_Receive+0xa4>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d104      	bne.n	8006c24 <HAL_UART_Receive+0x9a>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	22ff      	movs	r2, #255	@ 0xff
 8006c1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c22:	e01b      	b.n	8006c5c <HAL_UART_Receive+0xd2>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	227f      	movs	r2, #127	@ 0x7f
 8006c28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c2c:	e016      	b.n	8006c5c <HAL_UART_Receive+0xd2>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c36:	d10d      	bne.n	8006c54 <HAL_UART_Receive+0xca>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d104      	bne.n	8006c4a <HAL_UART_Receive+0xc0>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	227f      	movs	r2, #127	@ 0x7f
 8006c44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c48:	e008      	b.n	8006c5c <HAL_UART_Receive+0xd2>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	223f      	movs	r2, #63	@ 0x3f
 8006c4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c52:	e003      	b.n	8006c5c <HAL_UART_Receive+0xd2>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c62:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c6c:	d108      	bne.n	8006c80 <HAL_UART_Receive+0xf6>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d104      	bne.n	8006c80 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	e003      	b.n	8006c88 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c84:	2300      	movs	r3, #0
 8006c86:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006c88:	e037      	b.n	8006cfa <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2200      	movs	r2, #0
 8006c92:	2120      	movs	r1, #32
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 fc43 	bl	8007520 <UART_WaitOnFlagUntilTimeout>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e033      	b.n	8006d14 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10c      	bne.n	8006ccc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	8a7b      	ldrh	r3, [r7, #18]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	3302      	adds	r3, #2
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e00d      	b.n	8006ce8 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	8a7b      	ldrh	r3, [r7, #18]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	4013      	ands	r3, r2
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1c1      	bne.n	8006c8a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e000      	b.n	8006d14 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006d12:	2302      	movs	r3, #2
  }
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3720      	adds	r7, #32
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d20:	b08a      	sub	sp, #40	@ 0x28
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	431a      	orrs	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4ba4      	ldr	r3, [pc, #656]	@ (8006fdc <UART_SetConfig+0x2c0>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	6812      	ldr	r2, [r2, #0]
 8006d52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d54:	430b      	orrs	r3, r1
 8006d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a99      	ldr	r2, [pc, #612]	@ (8006fe0 <UART_SetConfig+0x2c4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d004      	beq.n	8006d88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d84:	4313      	orrs	r3, r2
 8006d86:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a90      	ldr	r2, [pc, #576]	@ (8006fe4 <UART_SetConfig+0x2c8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d126      	bne.n	8006df4 <UART_SetConfig+0xd8>
 8006da6:	4b90      	ldr	r3, [pc, #576]	@ (8006fe8 <UART_SetConfig+0x2cc>)
 8006da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dac:	f003 0303 	and.w	r3, r3, #3
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d81b      	bhi.n	8006dec <UART_SetConfig+0xd0>
 8006db4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dbc <UART_SetConfig+0xa0>)
 8006db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dba:	bf00      	nop
 8006dbc:	08006dcd 	.word	0x08006dcd
 8006dc0:	08006ddd 	.word	0x08006ddd
 8006dc4:	08006dd5 	.word	0x08006dd5
 8006dc8:	08006de5 	.word	0x08006de5
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd2:	e116      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dda:	e112      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006ddc:	2304      	movs	r3, #4
 8006dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006de2:	e10e      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006de4:	2308      	movs	r3, #8
 8006de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dea:	e10a      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006dec:	2310      	movs	r3, #16
 8006dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006df2:	e106      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a7c      	ldr	r2, [pc, #496]	@ (8006fec <UART_SetConfig+0x2d0>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d138      	bne.n	8006e70 <UART_SetConfig+0x154>
 8006dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8006fe8 <UART_SetConfig+0x2cc>)
 8006e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e04:	f003 030c 	and.w	r3, r3, #12
 8006e08:	2b0c      	cmp	r3, #12
 8006e0a:	d82d      	bhi.n	8006e68 <UART_SetConfig+0x14c>
 8006e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e14 <UART_SetConfig+0xf8>)
 8006e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e12:	bf00      	nop
 8006e14:	08006e49 	.word	0x08006e49
 8006e18:	08006e69 	.word	0x08006e69
 8006e1c:	08006e69 	.word	0x08006e69
 8006e20:	08006e69 	.word	0x08006e69
 8006e24:	08006e59 	.word	0x08006e59
 8006e28:	08006e69 	.word	0x08006e69
 8006e2c:	08006e69 	.word	0x08006e69
 8006e30:	08006e69 	.word	0x08006e69
 8006e34:	08006e51 	.word	0x08006e51
 8006e38:	08006e69 	.word	0x08006e69
 8006e3c:	08006e69 	.word	0x08006e69
 8006e40:	08006e69 	.word	0x08006e69
 8006e44:	08006e61 	.word	0x08006e61
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4e:	e0d8      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006e50:	2302      	movs	r3, #2
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e56:	e0d4      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006e58:	2304      	movs	r3, #4
 8006e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e5e:	e0d0      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006e60:	2308      	movs	r3, #8
 8006e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e66:	e0cc      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006e68:	2310      	movs	r3, #16
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e6e:	e0c8      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a5e      	ldr	r2, [pc, #376]	@ (8006ff0 <UART_SetConfig+0x2d4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d125      	bne.n	8006ec6 <UART_SetConfig+0x1aa>
 8006e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8006fe8 <UART_SetConfig+0x2cc>)
 8006e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e84:	2b30      	cmp	r3, #48	@ 0x30
 8006e86:	d016      	beq.n	8006eb6 <UART_SetConfig+0x19a>
 8006e88:	2b30      	cmp	r3, #48	@ 0x30
 8006e8a:	d818      	bhi.n	8006ebe <UART_SetConfig+0x1a2>
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d00a      	beq.n	8006ea6 <UART_SetConfig+0x18a>
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d814      	bhi.n	8006ebe <UART_SetConfig+0x1a2>
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <UART_SetConfig+0x182>
 8006e98:	2b10      	cmp	r3, #16
 8006e9a:	d008      	beq.n	8006eae <UART_SetConfig+0x192>
 8006e9c:	e00f      	b.n	8006ebe <UART_SetConfig+0x1a2>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ea4:	e0ad      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eac:	e0a9      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006eae:	2304      	movs	r3, #4
 8006eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eb4:	e0a5      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006eb6:	2308      	movs	r3, #8
 8006eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ebc:	e0a1      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006ebe:	2310      	movs	r3, #16
 8006ec0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ec4:	e09d      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a4a      	ldr	r2, [pc, #296]	@ (8006ff4 <UART_SetConfig+0x2d8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d125      	bne.n	8006f1c <UART_SetConfig+0x200>
 8006ed0:	4b45      	ldr	r3, [pc, #276]	@ (8006fe8 <UART_SetConfig+0x2cc>)
 8006ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8006edc:	d016      	beq.n	8006f0c <UART_SetConfig+0x1f0>
 8006ede:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ee0:	d818      	bhi.n	8006f14 <UART_SetConfig+0x1f8>
 8006ee2:	2b80      	cmp	r3, #128	@ 0x80
 8006ee4:	d00a      	beq.n	8006efc <UART_SetConfig+0x1e0>
 8006ee6:	2b80      	cmp	r3, #128	@ 0x80
 8006ee8:	d814      	bhi.n	8006f14 <UART_SetConfig+0x1f8>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <UART_SetConfig+0x1d8>
 8006eee:	2b40      	cmp	r3, #64	@ 0x40
 8006ef0:	d008      	beq.n	8006f04 <UART_SetConfig+0x1e8>
 8006ef2:	e00f      	b.n	8006f14 <UART_SetConfig+0x1f8>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006efa:	e082      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006efc:	2302      	movs	r3, #2
 8006efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f02:	e07e      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006f04:	2304      	movs	r3, #4
 8006f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f0a:	e07a      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006f0c:	2308      	movs	r3, #8
 8006f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f12:	e076      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006f14:	2310      	movs	r3, #16
 8006f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f1a:	e072      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a35      	ldr	r2, [pc, #212]	@ (8006ff8 <UART_SetConfig+0x2dc>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d12a      	bne.n	8006f7c <UART_SetConfig+0x260>
 8006f26:	4b30      	ldr	r3, [pc, #192]	@ (8006fe8 <UART_SetConfig+0x2cc>)
 8006f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f34:	d01a      	beq.n	8006f6c <UART_SetConfig+0x250>
 8006f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f3a:	d81b      	bhi.n	8006f74 <UART_SetConfig+0x258>
 8006f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f40:	d00c      	beq.n	8006f5c <UART_SetConfig+0x240>
 8006f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f46:	d815      	bhi.n	8006f74 <UART_SetConfig+0x258>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <UART_SetConfig+0x238>
 8006f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f50:	d008      	beq.n	8006f64 <UART_SetConfig+0x248>
 8006f52:	e00f      	b.n	8006f74 <UART_SetConfig+0x258>
 8006f54:	2300      	movs	r3, #0
 8006f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f5a:	e052      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f62:	e04e      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006f64:	2304      	movs	r3, #4
 8006f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f6a:	e04a      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006f6c:	2308      	movs	r3, #8
 8006f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f72:	e046      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006f74:	2310      	movs	r3, #16
 8006f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f7a:	e042      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a17      	ldr	r2, [pc, #92]	@ (8006fe0 <UART_SetConfig+0x2c4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d13a      	bne.n	8006ffc <UART_SetConfig+0x2e0>
 8006f86:	4b18      	ldr	r3, [pc, #96]	@ (8006fe8 <UART_SetConfig+0x2cc>)
 8006f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f94:	d01a      	beq.n	8006fcc <UART_SetConfig+0x2b0>
 8006f96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f9a:	d81b      	bhi.n	8006fd4 <UART_SetConfig+0x2b8>
 8006f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fa0:	d00c      	beq.n	8006fbc <UART_SetConfig+0x2a0>
 8006fa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fa6:	d815      	bhi.n	8006fd4 <UART_SetConfig+0x2b8>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <UART_SetConfig+0x298>
 8006fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fb0:	d008      	beq.n	8006fc4 <UART_SetConfig+0x2a8>
 8006fb2:	e00f      	b.n	8006fd4 <UART_SetConfig+0x2b8>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fba:	e022      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fc2:	e01e      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006fc4:	2304      	movs	r3, #4
 8006fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fca:	e01a      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006fcc:	2308      	movs	r3, #8
 8006fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fd2:	e016      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fda:	e012      	b.n	8007002 <UART_SetConfig+0x2e6>
 8006fdc:	efff69f3 	.word	0xefff69f3
 8006fe0:	40008000 	.word	0x40008000
 8006fe4:	40013800 	.word	0x40013800
 8006fe8:	40021000 	.word	0x40021000
 8006fec:	40004400 	.word	0x40004400
 8006ff0:	40004800 	.word	0x40004800
 8006ff4:	40004c00 	.word	0x40004c00
 8006ff8:	40005000 	.word	0x40005000
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a9f      	ldr	r2, [pc, #636]	@ (8007284 <UART_SetConfig+0x568>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d17a      	bne.n	8007102 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800700c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007010:	2b08      	cmp	r3, #8
 8007012:	d824      	bhi.n	800705e <UART_SetConfig+0x342>
 8007014:	a201      	add	r2, pc, #4	@ (adr r2, 800701c <UART_SetConfig+0x300>)
 8007016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701a:	bf00      	nop
 800701c:	08007041 	.word	0x08007041
 8007020:	0800705f 	.word	0x0800705f
 8007024:	08007049 	.word	0x08007049
 8007028:	0800705f 	.word	0x0800705f
 800702c:	0800704f 	.word	0x0800704f
 8007030:	0800705f 	.word	0x0800705f
 8007034:	0800705f 	.word	0x0800705f
 8007038:	0800705f 	.word	0x0800705f
 800703c:	08007057 	.word	0x08007057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007040:	f7fe f858 	bl	80050f4 <HAL_RCC_GetPCLK1Freq>
 8007044:	61f8      	str	r0, [r7, #28]
        break;
 8007046:	e010      	b.n	800706a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007048:	4b8f      	ldr	r3, [pc, #572]	@ (8007288 <UART_SetConfig+0x56c>)
 800704a:	61fb      	str	r3, [r7, #28]
        break;
 800704c:	e00d      	b.n	800706a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800704e:	f7fd ffb9 	bl	8004fc4 <HAL_RCC_GetSysClockFreq>
 8007052:	61f8      	str	r0, [r7, #28]
        break;
 8007054:	e009      	b.n	800706a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800705a:	61fb      	str	r3, [r7, #28]
        break;
 800705c:	e005      	b.n	800706a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007068:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80fb 	beq.w	8007268 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	4613      	mov	r3, r2
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	4413      	add	r3, r2
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	429a      	cmp	r2, r3
 8007080:	d305      	bcc.n	800708e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	429a      	cmp	r2, r3
 800708c:	d903      	bls.n	8007096 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007094:	e0e8      	b.n	8007268 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	2200      	movs	r2, #0
 800709a:	461c      	mov	r4, r3
 800709c:	4615      	mov	r5, r2
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	022b      	lsls	r3, r5, #8
 80070a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80070ac:	0222      	lsls	r2, r4, #8
 80070ae:	68f9      	ldr	r1, [r7, #12]
 80070b0:	6849      	ldr	r1, [r1, #4]
 80070b2:	0849      	lsrs	r1, r1, #1
 80070b4:	2000      	movs	r0, #0
 80070b6:	4688      	mov	r8, r1
 80070b8:	4681      	mov	r9, r0
 80070ba:	eb12 0a08 	adds.w	sl, r2, r8
 80070be:	eb43 0b09 	adc.w	fp, r3, r9
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	603b      	str	r3, [r7, #0]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070d0:	4650      	mov	r0, sl
 80070d2:	4659      	mov	r1, fp
 80070d4:	f7f9 f878 	bl	80001c8 <__aeabi_uldivmod>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4613      	mov	r3, r2
 80070de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070e6:	d308      	bcc.n	80070fa <UART_SetConfig+0x3de>
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ee:	d204      	bcs.n	80070fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	60da      	str	r2, [r3, #12]
 80070f8:	e0b6      	b.n	8007268 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007100:	e0b2      	b.n	8007268 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800710a:	d15e      	bne.n	80071ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800710c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007110:	2b08      	cmp	r3, #8
 8007112:	d828      	bhi.n	8007166 <UART_SetConfig+0x44a>
 8007114:	a201      	add	r2, pc, #4	@ (adr r2, 800711c <UART_SetConfig+0x400>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	08007141 	.word	0x08007141
 8007120:	08007149 	.word	0x08007149
 8007124:	08007151 	.word	0x08007151
 8007128:	08007167 	.word	0x08007167
 800712c:	08007157 	.word	0x08007157
 8007130:	08007167 	.word	0x08007167
 8007134:	08007167 	.word	0x08007167
 8007138:	08007167 	.word	0x08007167
 800713c:	0800715f 	.word	0x0800715f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007140:	f7fd ffd8 	bl	80050f4 <HAL_RCC_GetPCLK1Freq>
 8007144:	61f8      	str	r0, [r7, #28]
        break;
 8007146:	e014      	b.n	8007172 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007148:	f7fd ffea 	bl	8005120 <HAL_RCC_GetPCLK2Freq>
 800714c:	61f8      	str	r0, [r7, #28]
        break;
 800714e:	e010      	b.n	8007172 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007150:	4b4d      	ldr	r3, [pc, #308]	@ (8007288 <UART_SetConfig+0x56c>)
 8007152:	61fb      	str	r3, [r7, #28]
        break;
 8007154:	e00d      	b.n	8007172 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007156:	f7fd ff35 	bl	8004fc4 <HAL_RCC_GetSysClockFreq>
 800715a:	61f8      	str	r0, [r7, #28]
        break;
 800715c:	e009      	b.n	8007172 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800715e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007162:	61fb      	str	r3, [r7, #28]
        break;
 8007164:	e005      	b.n	8007172 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d077      	beq.n	8007268 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	005a      	lsls	r2, r3, #1
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	085b      	lsrs	r3, r3, #1
 8007182:	441a      	add	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	fbb2 f3f3 	udiv	r3, r2, r3
 800718c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	2b0f      	cmp	r3, #15
 8007192:	d916      	bls.n	80071c2 <UART_SetConfig+0x4a6>
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800719a:	d212      	bcs.n	80071c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	f023 030f 	bic.w	r3, r3, #15
 80071a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	085b      	lsrs	r3, r3, #1
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	8afb      	ldrh	r3, [r7, #22]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	8afa      	ldrh	r2, [r7, #22]
 80071be:	60da      	str	r2, [r3, #12]
 80071c0:	e052      	b.n	8007268 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80071c8:	e04e      	b.n	8007268 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071ce:	2b08      	cmp	r3, #8
 80071d0:	d827      	bhi.n	8007222 <UART_SetConfig+0x506>
 80071d2:	a201      	add	r2, pc, #4	@ (adr r2, 80071d8 <UART_SetConfig+0x4bc>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	080071fd 	.word	0x080071fd
 80071dc:	08007205 	.word	0x08007205
 80071e0:	0800720d 	.word	0x0800720d
 80071e4:	08007223 	.word	0x08007223
 80071e8:	08007213 	.word	0x08007213
 80071ec:	08007223 	.word	0x08007223
 80071f0:	08007223 	.word	0x08007223
 80071f4:	08007223 	.word	0x08007223
 80071f8:	0800721b 	.word	0x0800721b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071fc:	f7fd ff7a 	bl	80050f4 <HAL_RCC_GetPCLK1Freq>
 8007200:	61f8      	str	r0, [r7, #28]
        break;
 8007202:	e014      	b.n	800722e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007204:	f7fd ff8c 	bl	8005120 <HAL_RCC_GetPCLK2Freq>
 8007208:	61f8      	str	r0, [r7, #28]
        break;
 800720a:	e010      	b.n	800722e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800720c:	4b1e      	ldr	r3, [pc, #120]	@ (8007288 <UART_SetConfig+0x56c>)
 800720e:	61fb      	str	r3, [r7, #28]
        break;
 8007210:	e00d      	b.n	800722e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007212:	f7fd fed7 	bl	8004fc4 <HAL_RCC_GetSysClockFreq>
 8007216:	61f8      	str	r0, [r7, #28]
        break;
 8007218:	e009      	b.n	800722e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800721a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800721e:	61fb      	str	r3, [r7, #28]
        break;
 8007220:	e005      	b.n	800722e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800722c:	bf00      	nop
    }

    if (pclk != 0U)
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d019      	beq.n	8007268 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	085a      	lsrs	r2, r3, #1
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	441a      	add	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	fbb2 f3f3 	udiv	r3, r2, r3
 8007246:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2b0f      	cmp	r3, #15
 800724c:	d909      	bls.n	8007262 <UART_SetConfig+0x546>
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007254:	d205      	bcs.n	8007262 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	b29a      	uxth	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60da      	str	r2, [r3, #12]
 8007260:	e002      	b.n	8007268 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007274:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007278:	4618      	mov	r0, r3
 800727a:	3728      	adds	r7, #40	@ 0x28
 800727c:	46bd      	mov	sp, r7
 800727e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007282:	bf00      	nop
 8007284:	40008000 	.word	0x40008000
 8007288:	00f42400 	.word	0x00f42400

0800728c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007298:	f003 0308 	and.w	r3, r3, #8
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00a      	beq.n	80072b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00a      	beq.n	80072fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fe:	f003 0304 	and.w	r3, r3, #4
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00a      	beq.n	800731c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007320:	f003 0310 	and.w	r3, r3, #16
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00a      	beq.n	800733e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01a      	beq.n	80073a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800738a:	d10a      	bne.n	80073a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	605a      	str	r2, [r3, #4]
  }
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b098      	sub	sp, #96	@ 0x60
 80073d4:	af02      	add	r7, sp, #8
 80073d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073e0:	f7fc fb92 	bl	8003b08 <HAL_GetTick>
 80073e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0308 	and.w	r3, r3, #8
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d12e      	bne.n	8007452 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073fc:	2200      	movs	r2, #0
 80073fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f88c 	bl	8007520 <UART_WaitOnFlagUntilTimeout>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d021      	beq.n	8007452 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800741c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800741e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007422:	653b      	str	r3, [r7, #80]	@ 0x50
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800742c:	647b      	str	r3, [r7, #68]	@ 0x44
 800742e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800743a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e6      	bne.n	800740e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e062      	b.n	8007518 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b04      	cmp	r3, #4
 800745e:	d149      	bne.n	80074f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007460:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007468:	2200      	movs	r2, #0
 800746a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f856 	bl	8007520 <UART_WaitOnFlagUntilTimeout>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d03c      	beq.n	80074f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007482:	e853 3f00 	ldrex	r3, [r3]
 8007486:	623b      	str	r3, [r7, #32]
   return(result);
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800748e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007498:	633b      	str	r3, [r7, #48]	@ 0x30
 800749a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800749e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e6      	bne.n	800747a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3308      	adds	r3, #8
 80074b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3308      	adds	r3, #8
 80074ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074cc:	61fa      	str	r2, [r7, #28]
 80074ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	69b9      	ldr	r1, [r7, #24]
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	617b      	str	r3, [r7, #20]
   return(result);
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e5      	bne.n	80074ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e011      	b.n	8007518 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3758      	adds	r7, #88	@ 0x58
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007530:	e04f      	b.n	80075d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d04b      	beq.n	80075d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800753a:	f7fc fae5 	bl	8003b08 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	429a      	cmp	r2, r3
 8007548:	d302      	bcc.n	8007550 <UART_WaitOnFlagUntilTimeout+0x30>
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e04e      	b.n	80075f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	2b00      	cmp	r3, #0
 8007560:	d037      	beq.n	80075d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2b80      	cmp	r3, #128	@ 0x80
 8007566:	d034      	beq.n	80075d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b40      	cmp	r3, #64	@ 0x40
 800756c:	d031      	beq.n	80075d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f003 0308 	and.w	r3, r3, #8
 8007578:	2b08      	cmp	r3, #8
 800757a:	d110      	bne.n	800759e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2208      	movs	r2, #8
 8007582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f838 	bl	80075fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2208      	movs	r2, #8
 800758e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e029      	b.n	80075f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075ac:	d111      	bne.n	80075d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f81e 	bl	80075fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e00f      	b.n	80075f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	69da      	ldr	r2, [r3, #28]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	4013      	ands	r3, r2
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	429a      	cmp	r2, r3
 80075e0:	bf0c      	ite	eq
 80075e2:	2301      	moveq	r3, #1
 80075e4:	2300      	movne	r3, #0
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	461a      	mov	r2, r3
 80075ea:	79fb      	ldrb	r3, [r7, #7]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d0a0      	beq.n	8007532 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b095      	sub	sp, #84	@ 0x54
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007612:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007620:	643b      	str	r3, [r7, #64]	@ 0x40
 8007622:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007626:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800762e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e6      	bne.n	8007602 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	e853 3f00 	ldrex	r3, [r3]
 8007642:	61fb      	str	r3, [r7, #28]
   return(result);
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	f023 0301 	bic.w	r3, r3, #1
 800764a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3308      	adds	r3, #8
 8007652:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007654:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800765a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e5      	bne.n	8007634 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800766c:	2b01      	cmp	r3, #1
 800766e:	d118      	bne.n	80076a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	60bb      	str	r3, [r7, #8]
   return(result);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f023 0310 	bic.w	r3, r3, #16
 8007684:	647b      	str	r3, [r7, #68]	@ 0x44
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800768e:	61bb      	str	r3, [r7, #24]
 8007690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6979      	ldr	r1, [r7, #20]
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	613b      	str	r3, [r7, #16]
   return(result);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e6      	bne.n	8007670 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80076b6:	bf00      	nop
 80076b8:	3754      	adds	r7, #84	@ 0x54
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <memset>:
 80076c2:	4402      	add	r2, r0
 80076c4:	4603      	mov	r3, r0
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d100      	bne.n	80076cc <memset+0xa>
 80076ca:	4770      	bx	lr
 80076cc:	f803 1b01 	strb.w	r1, [r3], #1
 80076d0:	e7f9      	b.n	80076c6 <memset+0x4>
	...

080076d4 <__libc_init_array>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	4d0d      	ldr	r5, [pc, #52]	@ (800770c <__libc_init_array+0x38>)
 80076d8:	4c0d      	ldr	r4, [pc, #52]	@ (8007710 <__libc_init_array+0x3c>)
 80076da:	1b64      	subs	r4, r4, r5
 80076dc:	10a4      	asrs	r4, r4, #2
 80076de:	2600      	movs	r6, #0
 80076e0:	42a6      	cmp	r6, r4
 80076e2:	d109      	bne.n	80076f8 <__libc_init_array+0x24>
 80076e4:	4d0b      	ldr	r5, [pc, #44]	@ (8007714 <__libc_init_array+0x40>)
 80076e6:	4c0c      	ldr	r4, [pc, #48]	@ (8007718 <__libc_init_array+0x44>)
 80076e8:	f000 f818 	bl	800771c <_init>
 80076ec:	1b64      	subs	r4, r4, r5
 80076ee:	10a4      	asrs	r4, r4, #2
 80076f0:	2600      	movs	r6, #0
 80076f2:	42a6      	cmp	r6, r4
 80076f4:	d105      	bne.n	8007702 <__libc_init_array+0x2e>
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
 80076f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fc:	4798      	blx	r3
 80076fe:	3601      	adds	r6, #1
 8007700:	e7ee      	b.n	80076e0 <__libc_init_array+0xc>
 8007702:	f855 3b04 	ldr.w	r3, [r5], #4
 8007706:	4798      	blx	r3
 8007708:	3601      	adds	r6, #1
 800770a:	e7f2      	b.n	80076f2 <__libc_init_array+0x1e>
 800770c:	08008004 	.word	0x08008004
 8007710:	08008004 	.word	0x08008004
 8007714:	08008004 	.word	0x08008004
 8007718:	08008008 	.word	0x08008008

0800771c <_init>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	bf00      	nop
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr

08007728 <_fini>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	bf00      	nop
 800772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772e:	bc08      	pop	{r3}
 8007730:	469e      	mov	lr, r3
 8007732:	4770      	bx	lr
